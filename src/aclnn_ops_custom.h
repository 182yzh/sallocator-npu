/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2023. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License" );
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OP_API_INC_ACLNN_OPS_TRAIN_H_
#define OP_API_INC_ACLNN_OPS_TRAIN_H_

#include <aclnnop/aclnn_abs.h>
#include <aclnnop/aclnn_acos.h>
#include <aclnnop/aclnn_acosh.h>
#include <aclnnop/aclnn_adaptive_avg_pool2d.h>
#include <aclnnop/aclnn_adaptive_avg_pool2d_backward.h>
#include <aclnnop/aclnn_adaptive_avg_pool3d_backward.h>
#include <aclnnop/aclnn_adaptive_max_pool2d.h>
#include <aclnnop/aclnn_add.h>
#include <aclnnop/aclnn_addbmm.h>
#include <aclnnop/aclnn_addcdiv.h>
#include <aclnnop/aclnn_addcmul.h>
#include <aclnnop/aclnn_addmm.h>
#include <aclnnop/aclnn_addmv.h>
#include <aclnnop/aclnn_addr.h>
#include <aclnnop/aclnn_affine_grid.h>
#include <aclnnop/aclnn_all.h>
#include <aclnnop/aclnn_all_gather_matmul.h>
#include <aclnnop/aclnn_amax.h>
#include <aclnnop/aclnn_amin.h>
#include <aclnnop/aclnn_aminmax.h>
#include <aclnnop/aclnn_aminmax_all.h>
#include <aclnnop/aclnn_aminmax_dim.h>
#include <aclnnop/aclnn_any.h>
#include <aclnnop/aclnn_arange.h>
#include <aclnnop/aclnn_argmax.h>
#include <aclnnop/aclnn_argmin.h>
#include <aclnnop/aclnn_argsort.h>
#include <aclnnop/aclnn_asin.h>
#include <aclnnop/aclnn_asinh.h>
#include <aclnnop/aclnn_atan.h>
#include <aclnnop/aclnn_atan2.h>
#include <aclnnop/aclnn_atanh.h>
#include <aclnnop/aclnn_avgpool2d.h>
#include <aclnnop/aclnn_avgpool2d_backward.h>
#include <aclnnop/aclnn_baddbmm.h>
#include <aclnnop/aclnn_batch_matmul.h>
#include <aclnnop/aclnn_batch_norm.h>
#include <aclnnop/aclnn_batch_norm_backward.h>
#include <aclnnop/aclnn_batch_norm_elemt.h>
#include <aclnnop/aclnn_batch_norm_elemt_backward.h>
#include <aclnnop/aclnn_batch_norm_gather_stats_with_counts.h>
#include <aclnnop/aclnn_batch_norm_stats.h>
#include <aclnnop/aclnn_binary_cross_entropy.h>
#include <aclnnop/aclnn_binary_cross_entropy_backward.h>
#include <aclnnop/aclnn_binary_cross_entropy_with_logits.h>
#include <aclnnop/aclnn_binary_cross_entropy_with_logits_backward.h>
// #include <aclnnop/aclnn_binary_cross_entropy_with_logits_target_backward.h>
#include <aclnnop/aclnn_bincount.h>
#include <aclnnop/aclnn_bitwise_and_scalar.h>
#include <aclnnop/aclnn_bitwise_and_tensor.h>
#include <aclnnop/aclnn_bitwise_not.h>
#include <aclnnop/aclnn_bitwise_or_scalar.h>
#include <aclnnop/aclnn_bitwise_or_tensor.h>
#include <aclnnop/aclnn_bitwise_xor_scalar.h>
#include <aclnnop/aclnn_bitwise_xor_tensor.h>
#include <aclnnop/aclnn_cast.h>
#include <aclnnop/aclnn_ceil.h>
#include <aclnnop/aclnn_cat.h>
#include <aclnnop/aclnn_celu.h>
#include <aclnnop/aclnn_channel_shuffle.h>
#include <aclnnop/aclnn_clamp.h>
#include <aclnnop/aclnn_complex.h>
#include <aclnnop/aclnn_constant_pad_nd.h>
#include <aclnnop/aclnn_convolution.h>
#include <aclnnop/aclnn_convolution_backward.h>
#include <aclnnop/aclnn_cos.h>
#include <aclnnop/aclnn_cosh.h>
#include <aclnnop/aclnn_ctc_loss.h>
#include <aclnnop/aclnn_ctc_loss_backward.h>
#include <aclnnop/aclnn_cummax.h>
#include <aclnnop/aclnn_cummin.h>
#include <aclnnop/aclnn_cumsum.h>
#include <aclnnop/aclnn_diag.h>
#include <aclnnop/aclnn_diag_flat.h>
#include <aclnnop/aclnn_div.h>
#include <aclnnop/aclnn_dot.h>
#include <aclnnop/aclnn_dropout.h>
#include <aclnnop/aclnn_dropout_backward.h>
#include <aclnnop/aclnn_dropout_do_mask.h>
#include <aclnnop/aclnn_dropout_gen_mask.h>
#include <aclnnop/aclnn_elu.h>
#include <aclnnop/aclnn_elu_backward.h>
#include <aclnnop/aclnn_embedding.h>
#include <aclnnop/aclnn_embedding_dense_backward.h>
#include <aclnnop/aclnn_embedding_renorm.h>
#include <aclnnop/aclnn_embedding_bag.h>
#include <aclnnop/aclnn_eq_scalar.h>
#include <aclnnop/aclnn_eq_tensor.h>
#include <aclnnop/aclnn_equal.h>
#include <aclnnop/aclnn_erf.h>
#include <aclnnop/aclnn_erfc.h>
#include <aclnnop/aclnn_erfinv.h>
#include <aclnnop/aclnn_exp.h>
#include <aclnnop/aclnn_exp2.h>
#include <aclnnop/aclnn_expand.h>
#include <aclnnop/aclnn_expm1.h>
#include <aclnnop/aclnn_eye.h>
#include <aclnnop/aclnn_ffn.h>
#include <aclnnop/aclnn_flash_attention_score.h>
#include <aclnnop/aclnn_flash_attention_score_grad.h>
#include <aclnnop/aclnn_flatten.h>
#include <aclnnop/aclnn_flip.h>
#include <aclnnop/aclnn_floor.h>
#include <aclnnop/aclnn_floor_divide.h>
#include <aclnnop/aclnn_fmod_scalar.h>
#include <aclnnop/aclnn_fmod_tensor.h>
#include <aclnnop/aclnn_frac.h>
#include <aclnnop/aclnn_gather.h>
#include <aclnnop/aclnn_gather_v2.h>
#include <aclnnop/aclnn_geglu.h>
#include <aclnnop/aclnn_geglu_backward.h>
#include <aclnnop/aclnn_gelu.h>
#include <aclnnop/aclnn_gelu_backward.h>
#include <aclnnop/aclnn_gelu_v2.h>
#include <aclnnop/aclnn_gelu_backward_v2.h>
#include <aclnnop/aclnn_gemm.h>
#include <aclnnop/aclnn_ger.h>
#include <aclnnop/aclnn_ge_scalar.h>
#include <aclnnop/aclnn_ge_tensor.h>
#include <aclnnop/aclnn_glu.h>
#include <aclnnop/aclnn_glu_backward.h>
#include <aclnnop/aclnn_grid_sampler2d.h>
#include <aclnnop/aclnn_grid_sampler2d_backward.h>
#include <aclnnop/aclnn_grid_sampler3d.h>
#include <aclnnop/aclnn_grid_sampler3d_backward.h>
#include <aclnnop/aclnn_group_norm.h>
#include <aclnnop/aclnn_group_norm_backward.h>
#include <aclnnop/aclnn_group_norm_silu.h>
#include <aclnnop/aclnn_gt_scalar.h>
#include <aclnnop/aclnn_gt_tensor.h>
#include <aclnnop/aclnn_hardshrink.h>
#include <aclnnop/aclnn_hardshrink_backward.h>
#include <aclnnop/aclnn_hardsigmoid.h>
#include <aclnnop/aclnn_hardsigmoid_backward.h>
#include <aclnnop/aclnn_hardswish.h>
#include <aclnnop/aclnn_hardswish_backward.h>
#include <aclnnop/aclnn_hardtanh.h>
#include <aclnnop/aclnn_hardtanh_backward.h>
#include <aclnnop/aclnn_histc.h>
#include <aclnnop/aclnn_im2col.h>
#include <aclnnop/aclnn_im2col_backward.h>
#include <aclnnop/aclnn_incre_flash_attention.h>
#include <aclnnop/aclnn_incre_flash_attention_v2.h>
#include <aclnnop/aclnn_incre_flash_attention_v3.h>
#include <aclnnop/aclnn_index.h>
#include <aclnnop/aclnn_index_add.h>
#include <aclnnop/aclnn_index_fill_tensor.h>
#include <aclnnop/aclnn_index_put_impl.h>
#include <aclnnop/aclnn_index_select.h>
#include <aclnnop/aclnn_inverse.h>
#include <aclnnop/aclnn_isclose.h>
#include <aclnnop/aclnn_isfinite.h>
#include <aclnnop/aclnn_isin_tensor_scalar.h>
#include <aclnnop/aclnn_isneginf.h>
#include <aclnnop/aclnn_isposinf.h>
#include <aclnnop/aclnn_kl_div.h>
#include <aclnnop/aclnn_kl_div_backward.h>
#include <aclnnop/aclnn_kthvalue.h>
#include <aclnnop/aclnn_l1_loss.h>
#include <aclnnop/aclnn_l1_loss_backward.h>
#include <aclnnop/aclnn_layer_norm.h>
#include <aclnnop/aclnn_layer_norm_backward.h>
#include <aclnnop/aclnn_leaky_relu.h>
#include <aclnnop/aclnn_leaky_relu_backward.h>
#include <aclnnop/aclnn_le_scalar.h>
#include <aclnnop/aclnn_le_tensor.h>
#include <aclnnop/aclnn_linalg_vector_norm.h>
#include <aclnnop/aclnn_linspace.h>
#include <aclnnop/aclnn_log.h>
#include <aclnnop/aclnn_log10.h>
#include <aclnnop/aclnn_log1p.h>
#include <aclnnop/aclnn_log2.h>
#include <aclnnop/aclnn_logaddexp.h>
#include <aclnnop/aclnn_logaddexp2.h>
#include <aclnnop/aclnn_logdet.h>
#include <aclnnop/aclnn_logical_and.h>
#include <aclnnop/aclnn_logical_not.h>
#include <aclnnop/aclnn_logical_or.h>
#include <aclnnop/aclnn_logical_xor.h>
#include <aclnnop/aclnn_logsigmoid.h>
#include <aclnnop/aclnn_logsigmoid_backward.h>
#include <aclnnop/aclnn_logsoftmax.h>
#include <aclnnop/aclnn_logsoftmax_backward.h>
#include <aclnnop/aclnn_logsumexp.h>
#include <aclnnop/aclnn_lt_scalar.h>
#include <aclnnop/aclnn_lt_tensor.h>
#include <aclnnop/aclnn_masked_select.h>
#include <aclnnop/aclnn_matmul.h>
#include <aclnnop/aclnn_matmul_compress_dequant.h> 
//---
#include <aclnnop/aclnn_matmul_reduce_scatter.h>
#include <aclnnop/aclnn_max.h>
#include <aclnnop/aclnn_max_dim.h>
#include <aclnnop/aclnn_maximum.h>
#include <aclnnop/aclnn_max_pool2d_with_indices.h>
#include <aclnnop/aclnn_max_pool2d_with_indices_backward.h>
#include <aclnnop/aclnn_max_unpool2d.h>
#include <aclnnop/aclnn_max_unpool2d_backward.h>
#include <aclnnop/aclnn_max_unpool3d.h>
#include <aclnnop/aclnn_max_unpool3d_backward.h>
#include <aclnnop/aclnn_max_v2.h>
#include <aclnnop/aclnn_mean.h>
#include <aclnnop/aclnn_median.h>
#include <aclnnop/aclnn_min.h>
#include <aclnnop/aclnn_min_dim.h>
#include <aclnnop/aclnn_minimum.h>
#include <aclnnop/aclnn_mish.h>
#include <aclnnop/aclnn_mish_backward.h>
#include <aclnnop/aclnn_mm.h>
#include <aclnnop/aclnn_mse_loss.h>
#include <aclnnop/aclnn_mse_loss_backward.h>
#include <aclnnop/aclnn_mse_loss_out.h>
#include <aclnnop/aclnn_mul.h>
#include <aclnnop/aclnn_multilabel_margin_loss.h>
#include <aclnnop/aclnn_mv.h>
#include <aclnnop/aclnn_nan_to_num.h>
#include <aclnnop/aclnn_ne_scalar.h>
#include <aclnnop/aclnn_ne_tensor.h>
#include <aclnnop/aclnn_neg.h>
#include <aclnnop/aclnn_nll_loss.h>
#include <aclnnop/aclnn_nll_loss2d.h>
#include <aclnnop/aclnn_nll_loss2d_backward.h>
#include <aclnnop/aclnn_nll_loss_backward.h>
#include <aclnnop/aclnn_nonzero.h>
#include <aclnnop/aclnn_nonzero_v2.h>
#include <aclnnop/aclnn_norm.h>
#include <aclnnop/aclnn_one_hot.h>
#include <aclnnop/aclnn_pdist.h>
#include <aclnnop/aclnn_pdist_forward.h>
#include <aclnnop/aclnn_permute.h>
#include <aclnnop/aclnn_polar.h>
#include <aclnnop/aclnn_pow_tensor_tensor.h>
#include <aclnnop/aclnn_prelu.h>
#include <aclnnop/aclnn_prelu_backward.h>
#include <aclnnop/aclnn_prod.h>
#include <aclnnop/aclnn_prompt_flash_attention.h>
#include <aclnnop/aclnn_prompt_flash_attention_v2.h>
#include <aclnnop/aclnn_quant_matmul.h>
#include <aclnnop/aclnn_range.h>
#include <aclnnop/aclnn_real.h>
#include <aclnnop/aclnn_reciprocal.h>
#include <aclnnop/aclnn_reduce_nansum.h>
#include <aclnnop/aclnn_reduce_sum.h>
#include <aclnnop/aclnn_reflection_pad1d.h>
#include <aclnnop/aclnn_reflection_pad1d_backward.h>
#include <aclnnop/aclnn_reflection_pad2d.h>
#include <aclnnop/aclnn_reflection_pad3d.h>
#include <aclnnop/aclnn_relu.h>
#include <aclnnop/aclnn_renorm.h>
#include <aclnnop/aclnn_repeat.h>
#include <aclnnop/aclnn_repeat_interleave.h>
#include <aclnnop/aclnn_replication_pad1d.h>
#include <aclnnop/aclnn_replication_pad1d_backward.h>
#include <aclnnop/aclnn_replication_pad2d.h>
#include <aclnnop/aclnn_replication_pad3d.h>
#include <aclnnop/aclnn_roll.h>
#include <aclnnop/aclnn_round.h>
#include <aclnnop/aclnn_rrelu_with_noise.h>
#include <aclnnop/aclnn_rsqrt.h>
#include <aclnnop/aclnn_rsub.h>
#include <aclnnop/aclnn_scatter.h>
#include <aclnnop/aclnn_scatter_add.h>
#include <aclnnop/aclnn_searchsorted.h>
#include <aclnnop/aclnn_selu.h>
#include <aclnnop/aclnn_selu_backward.h>
#include <aclnnop/aclnn_sigmoid.h>
#include <aclnnop/aclnn_sigmoid_backward.h>
#include <aclnnop/aclnn_sign.h>
#include <aclnnop/aclnn_signbit.h>
#include <aclnnop/aclnn_silu.h>
#include <aclnnop/aclnn_silu_backward.h>
#include <aclnnop/aclnn_sin.h>
#include <aclnnop/aclnn_sinc.h>
#include <aclnnop/aclnn_sinh.h>
#include <aclnnop/aclnn_slice.h>
#include <aclnnop/aclnn_slice_v2.h>
#include <aclnnop/aclnn_slogdet.h>
#include <aclnnop/aclnn_smooth_l1_loss.h>
#include <aclnnop/aclnn_smooth_l1_loss_backward.h>
#include <aclnnop/aclnn_soft_margin_loss.h>
#include <aclnnop/aclnn_soft_margin_loss_backward.h>
#include <aclnnop/aclnn_softmax.h>
#include <aclnnop/aclnn_softmax_backward.h>
#include <aclnnop/aclnn_softplus.h>
#include <aclnnop/aclnn_softplus_backward.h>
#include <aclnnop/aclnn_softshrink.h>
#include <aclnnop/aclnn_softshrink_backward.h>
#include <aclnnop/aclnn_sort.h>
#include <aclnnop/aclnn_split_tensor.h>
#include <aclnnop/aclnn_split_with_size.h>
#include <aclnnop/aclnn_sqrt.h>
#include <aclnnop/aclnn_stack.h>
#include <aclnnop/aclnn_std.h>
#include <aclnnop/aclnn_std_mean_correction.h>
#include <aclnnop/aclnn_sub.h>
#include <aclnnop/aclnn_sum.h>
#include <aclnnop/aclnn_s_where.h>
#include <aclnnop/aclnn_take.h>
#include <aclnnop/aclnn_tan.h>
#include <aclnnop/aclnn_tanh.h>
#include <aclnnop/aclnn_tanh_backward.h>
#include <aclnnop/aclnn_threshold.h>
#include <aclnnop/aclnn_threshold_backward.h>
#include <aclnnop/aclnn_topk.h>
#include <aclnnop/aclnn_trace.h>
#include <aclnnop/aclnn_trans_quant_param.h>
//----
#include <aclnnop/aclnn_triangular_solve.h>
#include <aclnnop/aclnn_tril.h>
#include <aclnnop/aclnn_triu.h>
#include <aclnnop/aclnn_trunc.h>
#include <aclnnop/aclnn_unique.h>
#include <aclnnop/aclnn_unique2.h>
#include <aclnnop/aclnn_unique_consecutive.h>
#include <aclnnop/aclnn_upsample_bilinear_2d.h>
#include <aclnnop/aclnn_upsample_bilinear_2d_backward.h>
#include <aclnnop/aclnn_upsample_linear_1d.h>
#include <aclnnop/aclnn_upsample_linear_1d_backward.h>
#include <aclnnop/aclnn_upsample_nearest_1d.h>
#include <aclnnop/aclnn_upsample_nearest_1d_backward.h>
#include <aclnnop/aclnn_upsample_nearest_2d.h>
#include <aclnnop/aclnn_upsample_nearest_2d_backward.h>
#include <aclnnop/aclnn_upsample_nearest_3d.h>
#include <aclnnop/aclnn_upsample_nearest_3d_backward.h>
#include <aclnnop/aclnn_upsample_trilinear_3d.h>
#include <aclnnop/aclnn_upsample_trilinear_3d_backward.h>
#include <aclnnop/aclnn_var.h>
#include <aclnnop/aclnn_var_mean.h>
#include <aclnnop/aclnn_x_log_y_scalar_other.h>
#include <aclnnop/aclnn_x_log_y_scalar_self.h>
#include <aclnnop/aclnn_x_log_y_tensor.h>
#include <aclnnop/aclnn_chamfer_distance_backward.h>
#include <aclnnop/aclnn_digamma.h>
#include <aclnnop/aclnn_lgamma.h>
#include <aclnnop/aclnn_global_average_pool.h>
#include <aclnnop/aclnn_batch_norm_backward_reduce.h>
// #include <aclnnop/aclnn_bitwiseand.h>
#include <aclnnop/aclnn_copy.h>
#include <aclnnop/aclnn_fill_diagonal.h>
#include <aclnnop/aclnn_fill_scalar.h>
#include <aclnnop/aclnn_fill_tensor.h>
#include <aclnnop/aclnn_index_copy.h>
#include <aclnnop/aclnn_lerp_tensor.h>
#include <aclnnop/aclnn_lerp_scalar.h>
#include <aclnnop/aclnn_masked_fill_scalar.h>
#include <aclnnop/aclnn_masked_fill_tensor.h>
#include <aclnnop/aclnn_masked_scatter.h>
#include <aclnnop/aclnn_normal.h>
#include <aclnnop/aclnn_nan_to_num.h>
//---
#include <aclnnop/aclnn_ones.h>
#include <aclnnop/aclnn_pow.h>
#include <aclnnop/aclnn_put.h>
#include <aclnnop/aclnn_random.h>
#include <aclnnop/aclnn_remainder.h>
#include <aclnnop/aclnn_scatter_update.h>
#include <aclnnop/aclnn_zero.h>
#include <aclnnop/aclnn_isin.h>
#include <aclnnop/aclnn_pad2d_backward.h>
#include <aclnnop/aclnn_instance_norm.h>
//----
// #include <aclnnop/aclnn_foreach_add_scalar_v2.h>
// #include <aclnnop/aclnn_foreach_addcdiv_scalar_v2.h>
// #include <aclnnop/aclnn_foreach_addcmul_scalar_v2.h>
// #include <aclnnop/aclnn_foreach_add_list_v2.h>
// #include <aclnnop/aclnn_foreach_div_scalar_v2.h>
// #include <aclnnop/aclnn_foreach_maximum_scalar_v2.h>
// #include <aclnnop/aclnn_foreach_minimum_scalar_v2.h>
// #include <aclnnop/aclnn_foreach_mul_scalar_v2.h>
// #include <aclnnop/aclnn_foreach_pow_scalar_v2.h>
// #include <aclnnop/aclnn_foreach_round_off_number_v2.h>
// #include <aclnnop/aclnn_foreach_sub_list_v2.h>
// #include <aclnnop/aclnn_foreach_sub_scalar_v2.h>
#endif // OP_API_INC_ACLNN_OPS_TRAIN_H_


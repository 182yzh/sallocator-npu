# 1 "tmp.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "tmp.cpp"
# 1 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl.h" 1
# 14 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl.h"
# 1 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h" 1
# 14 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
# 1 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 33 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/aarch64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/aarch64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/aarch64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/gnu/stubs.h" 1 3 4




# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 6 "/usr/include/aarch64-linux-gnu/gnu/stubs.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/gnu/stubs-lp64.h" 1 3 4
# 9 "/usr/include/aarch64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 34 "/usr/include/aarch64-linux-gnu/bits/libc-header-start.h" 2 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/aarch64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/aarch64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/timesize.h" 1 3 4
# 19 "/usr/include/aarch64-linux-gnu/bits/timesize.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 20 "/usr/include/aarch64-linux-gnu/bits/timesize.h" 2 3 4
# 29 "/usr/include/aarch64-linux-gnu/bits/types.h" 2 3 4



# 31 "/usr/include/aarch64-linux-gnu/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/aarch64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/aarch64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/aarch64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/aarch64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/aarch64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/aarch64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/aarch64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stdint.h" 2 3 4
# 15 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h" 2
# 1 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 209 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 415 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 16 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h" 2
# 1 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h" 1
# 15 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
# 1 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 1 3 4
# 16 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h" 2
# 1 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/error_codes/rt_error_codes.h" 1
# 14 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/error_codes/rt_error_codes.h"
# 1 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 1 3 4
# 15 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/error_codes/rt_error_codes.h" 2



# 17 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/error_codes/rt_error_codes.h"
extern "C" {
# 125 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/error_codes/rt_error_codes.h"
}
# 17 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h" 2
# 1 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/error_codes/ge_error_codes.h" 1
# 27 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/error_codes/ge_error_codes.h"
# 1 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 1 3 4
# 28 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/error_codes/ge_error_codes.h" 2



extern "C" {

static const uint32_t ACL_ERROR_GE_PARAM_INVALID = 145000U;
static const uint32_t ACL_ERROR_GE_EXEC_NOT_INIT = 145001U;
static const uint32_t ACL_ERROR_GE_EXEC_MODEL_PATH_INVALID = 145002U;
static const uint32_t ACL_ERROR_GE_EXEC_MODEL_ID_INVALID = 145003U;
static const uint32_t ACL_ERROR_GE_EXEC_MODEL_DATA_SIZE_INVALID = 145006U;
static const uint32_t ACL_ERROR_GE_EXEC_MODEL_ADDR_INVALID = 145007U;
static const uint32_t ACL_ERROR_GE_EXEC_MODEL_QUEUE_ID_INVALID = 145008U;
static const uint32_t ACL_ERROR_GE_EXEC_LOAD_MODEL_REPEATED = 145009U;
static const uint32_t ACL_ERROR_GE_DYNAMIC_INPUT_ADDR_INVALID = 145011U;
static const uint32_t ACL_ERROR_GE_DYNAMIC_INPUT_LENGTH_INVALID = 145012U;
static const uint32_t ACL_ERROR_GE_DYNAMIC_BATCH_SIZE_INVALID = 145013U;
static const uint32_t ACL_ERROR_GE_AIPP_BATCH_EMPTY = 145014U;
static const uint32_t ACL_ERROR_GE_AIPP_NOT_EXIST = 145015U;
static const uint32_t ACL_ERROR_GE_AIPP_MODE_INVALID = 145016U;
static const uint32_t ACL_ERROR_GE_OP_TASK_TYPE_INVALID = 145017U;
static const uint32_t ACL_ERROR_GE_OP_KERNEL_TYPE_INVALID = 145018U;
static const uint32_t ACL_ERROR_GE_PLGMGR_PATH_INVALID = 145019U;
static const uint32_t ACL_ERROR_GE_FORMAT_INVALID = 145020U;
static const uint32_t ACL_ERROR_GE_SHAPE_INVALID = 145021U;
static const uint32_t ACL_ERROR_GE_DATATYPE_INVALID = 145022U;
static const uint32_t ACL_ERROR_GE_MEMORY_ALLOCATION = 245000U;
static const uint32_t ACL_ERROR_GE_MEMORY_OPERATE_FAILED = 245001U;
static const uint32_t ACL_ERROR_GE_DEVICE_MEMORY_OPERATE_FAILED = 245002U;
static const uint32_t ACL_ERROR_GE_SUBHEALTHY = 345102U;
static const uint32_t ACL_ERROR_GE_INTERNAL_ERROR = 545000U;
static const uint32_t ACL_ERROR_GE_LOAD_MODEL = 545001U;
static const uint32_t ACL_ERROR_GE_EXEC_LOAD_MODEL_PARTITION_FAILED = 545002U;
static const uint32_t ACL_ERROR_GE_EXEC_LOAD_WEIGHT_PARTITION_FAILED = 545003U;
static const uint32_t ACL_ERROR_GE_EXEC_LOAD_TASK_PARTITION_FAILED = 545004U;
static const uint32_t ACL_ERROR_GE_EXEC_LOAD_KERNEL_PARTITION_FAILED = 545005U;
static const uint32_t ACL_ERROR_GE_EXEC_RELEASE_MODEL_DATA = 545006U;
static const uint32_t ACL_ERROR_GE_COMMAND_HANDLE = 545007U;
static const uint32_t ACL_ERROR_GE_GET_TENSOR_INFO = 545008U;
static const uint32_t ACL_ERROR_GE_UNLOAD_MODEL = 545009U;
static const uint32_t ACL_ERROR_GE_MODEL_EXECUTE_TIMEOUT = 545601U;
static const uint32_t ACL_ERROR_GE_REDEPLOYING = 545602U;


}
# 18 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h" 2


extern "C" {
# 48 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
typedef void *aclrtStream;
typedef void *aclrtEvent;
typedef void *aclrtContext;
typedef int aclError;
typedef uint16_t aclFloat16;
typedef struct aclDataBuffer aclDataBuffer;
typedef struct aclTensorDesc aclTensorDesc;
typedef void *aclrtAllocatorDesc;
typedef void *aclrtAllocator;
typedef void *aclrtAllocatorBlock;
typedef void *aclrtAllocatorAddr;

static const int ACL_ERROR_NONE = 0;
static const int ACL_SUCCESS = 0;

static const int ACL_ERROR_INVALID_PARAM = 100000;
static const int ACL_ERROR_UNINITIALIZE = 100001;
static const int ACL_ERROR_REPEAT_INITIALIZE = 100002;
static const int ACL_ERROR_INVALID_FILE = 100003;
static const int ACL_ERROR_WRITE_FILE = 100004;
static const int ACL_ERROR_INVALID_FILE_SIZE = 100005;
static const int ACL_ERROR_PARSE_FILE = 100006;
static const int ACL_ERROR_FILE_MISSING_ATTR = 100007;
static const int ACL_ERROR_FILE_ATTR_INVALID = 100008;
static const int ACL_ERROR_INVALID_DUMP_CONFIG = 100009;
static const int ACL_ERROR_INVALID_PROFILING_CONFIG = 100010;
static const int ACL_ERROR_INVALID_MODEL_ID = 100011;
static const int ACL_ERROR_DESERIALIZE_MODEL = 100012;
static const int ACL_ERROR_PARSE_MODEL = 100013;
static const int ACL_ERROR_READ_MODEL_FAILURE = 100014;
static const int ACL_ERROR_MODEL_SIZE_INVALID = 100015;
static const int ACL_ERROR_MODEL_MISSING_ATTR = 100016;
static const int ACL_ERROR_MODEL_INPUT_NOT_MATCH = 100017;
static const int ACL_ERROR_MODEL_OUTPUT_NOT_MATCH = 100018;
static const int ACL_ERROR_MODEL_NOT_DYNAMIC = 100019;
static const int ACL_ERROR_OP_TYPE_NOT_MATCH = 100020;
static const int ACL_ERROR_OP_INPUT_NOT_MATCH = 100021;
static const int ACL_ERROR_OP_OUTPUT_NOT_MATCH = 100022;
static const int ACL_ERROR_OP_ATTR_NOT_MATCH = 100023;
static const int ACL_ERROR_OP_NOT_FOUND = 100024;
static const int ACL_ERROR_OP_LOAD_FAILED = 100025;
static const int ACL_ERROR_UNSUPPORTED_DATA_TYPE = 100026;
static const int ACL_ERROR_FORMAT_NOT_MATCH = 100027;
static const int ACL_ERROR_BIN_SELECTOR_NOT_REGISTERED = 100028;
static const int ACL_ERROR_KERNEL_NOT_FOUND = 100029;
static const int ACL_ERROR_BIN_SELECTOR_ALREADY_REGISTERED = 100030;
static const int ACL_ERROR_KERNEL_ALREADY_REGISTERED = 100031;
static const int ACL_ERROR_INVALID_QUEUE_ID = 100032;
static const int ACL_ERROR_REPEAT_SUBSCRIBE = 100033;
static const int ACL_ERROR_STREAM_NOT_SUBSCRIBE = 100034;
static const int ACL_ERROR_THREAD_NOT_SUBSCRIBE = 100035;
static const int ACL_ERROR_WAIT_CALLBACK_TIMEOUT = 100036;
static const int ACL_ERROR_REPEAT_FINALIZE = 100037;
static const int ACL_ERROR_NOT_STATIC_AIPP = 100038;
static const int ACL_ERROR_COMPILING_STUB_MODE = 100039;
static const int ACL_ERROR_GROUP_NOT_SET = 100040;
static const int ACL_ERROR_GROUP_NOT_CREATE = 100041;
static const int ACL_ERROR_PROF_ALREADY_RUN = 100042;
static const int ACL_ERROR_PROF_NOT_RUN = 100043;
static const int ACL_ERROR_DUMP_ALREADY_RUN = 100044;
static const int ACL_ERROR_DUMP_NOT_RUN = 100045;
static const int ACL_ERROR_PROF_REPEAT_SUBSCRIBE = 148046;
static const int ACL_ERROR_PROF_API_CONFLICT = 148047;
static const int ACL_ERROR_INVALID_MAX_OPQUEUE_NUM_CONFIG = 148048;
static const int ACL_ERROR_INVALID_OPP_PATH = 148049;
static const int ACL_ERROR_OP_UNSUPPORTED_DYNAMIC = 148050;
static const int ACL_ERROR_RELATIVE_RESOURCE_NOT_CLEARED = 148051;
static const int ACL_ERROR_UNSUPPORTED_JPEG = 148052;

static const int ACL_ERROR_BAD_ALLOC = 200000;
static const int ACL_ERROR_API_NOT_SUPPORT = 200001;
static const int ACL_ERROR_INVALID_DEVICE = 200002;
static const int ACL_ERROR_MEMORY_ADDRESS_UNALIGNED = 200003;
static const int ACL_ERROR_RESOURCE_NOT_MATCH = 200004;
static const int ACL_ERROR_INVALID_RESOURCE_HANDLE = 200005;
static const int ACL_ERROR_FEATURE_UNSUPPORTED = 200006;
static const int ACL_ERROR_PROF_MODULES_UNSUPPORTED = 200007;

static const int ACL_ERROR_STORAGE_OVER_LIMIT = 300000;

static const int ACL_ERROR_INTERNAL_ERROR = 500000;
static const int ACL_ERROR_FAILURE = 500001;
static const int ACL_ERROR_GE_FAILURE = 500002;
static const int ACL_ERROR_RT_FAILURE = 500003;
static const int ACL_ERROR_DRV_FAILURE = 500004;
static const int ACL_ERROR_PROFILING_FAILURE = 500005;





typedef enum {
    ACL_DT_UNDEFINED = -1,
    ACL_FLOAT = 0,
    ACL_FLOAT16 = 1,
    ACL_INT8 = 2,
    ACL_INT32 = 3,
    ACL_UINT8 = 4,
    ACL_INT16 = 6,
    ACL_UINT16 = 7,
    ACL_UINT32 = 8,
    ACL_INT64 = 9,
    ACL_UINT64 = 10,
    ACL_DOUBLE = 11,
    ACL_BOOL = 12,
    ACL_STRING = 13,
    ACL_COMPLEX64 = 16,
    ACL_COMPLEX128 = 17,
    ACL_BF16 = 27,
    ACL_INT4 = 29,
    ACL_UINT1 = 30,
    ACL_COMPLEX32 = 33,
} aclDataType;

typedef enum {
    ACL_FORMAT_UNDEFINED = -1,
    ACL_FORMAT_NCHW = 0,
    ACL_FORMAT_NHWC = 1,
    ACL_FORMAT_ND = 2,
    ACL_FORMAT_NC1HWC0 = 3,
    ACL_FORMAT_FRACTAL_Z = 4,
    ACL_FORMAT_NC1HWC0_C04 = 12,
    ACL_FORMAT_HWCN = 16,
    ACL_FORMAT_NDHWC = 27,
    ACL_FORMAT_FRACTAL_NZ = 29,
    ACL_FORMAT_NCDHW = 30,
    ACL_FORMAT_NDC1HWC0 = 32,
    ACL_FRACTAL_Z_3D = 33,
    ACL_FORMAT_NC = 35,
    ACL_FORMAT_NCL = 47,
} aclFormat;

typedef enum {
    ACL_DEBUG = 0,
    ACL_INFO = 1,
    ACL_WARNING = 2,
    ACL_ERROR = 3,
} aclLogLevel;

typedef enum {
    ACL_MEMTYPE_DEVICE = 0,
    ACL_MEMTYPE_HOST = 1,
    ACL_MEMTYPE_HOST_COMPILE_INDEPENDENT = 2
} aclMemType;

typedef enum {
    ACL_OPT_DETERMINISTIC = 0,
    ACL_OPT_ENABLE_DEBUG_KERNEL = 1
} aclSysParamOpt;

typedef enum {
    ACL_CANN_ATTR_UNDEFINED = -1,
    ACL_CANN_ATTR_INF_NAN = 0,
    ACL_CANN_ATTR_BF16 = 1,
    ACL_CANN_ATTR_JIT_COMPILE = 2
} aclCannAttr;

typedef enum {
    ACL_DEVICE_INFO_UNDEFINED = -1,
    ACL_DEVICE_INFO_AI_CORE_NUM = 0,
    ACL_DEVICE_INFO_VECTOR_CORE_NUM = 1,
    ACL_DEVICE_INFO_L2_SIZE = 2
} aclDeviceInfo;
# 220 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 float aclFloat16ToFloat(aclFloat16 value);
# 230 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclFloat16 aclFloatToFloat16(float value);
# 247 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclDataBuffer *aclCreateDataBuffer(void *data, size_t size);
# 265 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclDestroyDataBuffer(const aclDataBuffer *dataBuffer);
# 288 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclUpdateDataBuffer(aclDataBuffer *dataBuffer, void *data, size_t size);
# 298 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 void *aclGetDataBufferAddr(const aclDataBuffer *dataBuffer);
# 308 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
__attribute__((deprecated("aclGetDataBufferSize is deprecated, use aclGetDataBufferSizeV2 instead")))
 uint32_t aclGetDataBufferSize(const aclDataBuffer *dataBuffer);
# 319 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 size_t aclGetDataBufferSizeV2(const aclDataBuffer *dataBuffer);
# 329 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 size_t aclDataTypeSize(aclDataType dataType);
# 344 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclTensorDesc *aclCreateTensorDesc(aclDataType dataType,
                                                       int numDims,
                                                       const int64_t *dims,
                                                       aclFormat format);







 void aclDestroyTensorDesc(const aclTensorDesc *desc);
# 368 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclSetTensorShapeRange(aclTensorDesc* desc,
                                                    size_t dimsCount,
                                                    int64_t dimsRange[][2]);
# 383 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclSetTensorValueRange(aclTensorDesc* desc,
                                                    size_t valueCount,
                                                    int64_t valueRange[][2]);
# 395 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclDataType aclGetTensorDescType(const aclTensorDesc *desc);
# 406 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclFormat aclGetTensorDescFormat(const aclTensorDesc *desc);
# 417 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 size_t aclGetTensorDescSize(const aclTensorDesc *desc);
# 428 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 size_t aclGetTensorDescElementCount(const aclTensorDesc *desc);
# 440 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 size_t aclGetTensorDescNumDims(const aclTensorDesc *desc);
# 452 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
__attribute__((deprecated("aclGetTensorDescDim is deprecated, use aclGetTensorDescDimV2 instead")))
 int64_t aclGetTensorDescDim(const aclTensorDesc *desc, size_t index);
# 466 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclGetTensorDescDimV2(const aclTensorDesc *desc, size_t index, int64_t *dimSize);
# 480 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclGetTensorDescDimRange(const aclTensorDesc *desc,
                                                      size_t index,
                                                      size_t dimRangeNum,
                                                      int64_t *dimRange);
# 492 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 void aclSetTensorDescName(aclTensorDesc *desc, const char *name);
# 503 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 const char *aclGetTensorDescName(aclTensorDesc *desc);
# 518 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclTransTensorDescFormat(const aclTensorDesc *srcDesc, aclFormat dstFormat,
    aclTensorDesc **dstDesc);
# 531 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
__attribute__((deprecated("aclSetTensorStorageFormat is deprecated, use aclSetTensorFormat instead")))
 aclError aclSetTensorStorageFormat(aclTensorDesc *desc, aclFormat format);
# 545 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
__attribute__((deprecated("aclSetTensorStorageShape is deprecated, use aclSetTensorShape instead")))
 aclError aclSetTensorStorageShape(aclTensorDesc *desc, int numDims, const int64_t *dims);
# 558 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclSetTensorFormat(aclTensorDesc *desc, aclFormat format);
# 571 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclSetTensorShape(aclTensorDesc *desc, int numDims, const int64_t *dims);
# 583 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclSetTensorOriginFormat(aclTensorDesc *desc, aclFormat format);
# 596 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclSetTensorOriginShape(aclTensorDesc *desc, int numDims, const int64_t *dims);
# 608 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclTensorDesc *aclGetTensorDescByIndex(aclTensorDesc *desc, size_t index);
# 619 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 void *aclGetTensorDescAddress(const aclTensorDesc *desc);
# 631 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclSetTensorDynamicInput(aclTensorDesc *desc, const char *dynamicInputName);
# 644 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclSetTensorConst(aclTensorDesc *desc, void *dataBuffer, size_t length);
# 657 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclSetTensorPlaceMent(aclTensorDesc *desc, aclMemType memType);
# 670 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 void aclAppLog(aclLogLevel logLevel, const char *func, const char *file, uint32_t line,
    const char *fmt, ...);
# 680 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 const char *aclrtGetSocName();
# 695 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclGetCannAttributeList(const aclCannAttr **cannAttrList, size_t *num);
# 708 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclGetCannAttribute(aclCannAttr cannAttr, int32_t *value);
# 721 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_base.h"
 aclError aclGetDeviceCapability(uint32_t deviceId, aclDeviceInfo deviceInfo, int64_t *value);


}
# 17 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h" 2


extern "C" {
# 32 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
typedef enum aclrtRunMode {
    ACL_DEVICE,
    ACL_HOST,
} aclrtRunMode;

typedef enum aclrtTsId {
    ACL_TS_ID_AICORE = 0,
    ACL_TS_ID_AIVECTOR = 1,
    ACL_TS_ID_RESERVED = 2,
} aclrtTsId;

typedef enum aclrtEventStatus {
    ACL_EVENT_STATUS_COMPLETE = 0,
    ACL_EVENT_STATUS_NOT_READY = 1,
    ACL_EVENT_STATUS_RESERVED = 2,
} aclrtEventStatus;

typedef enum aclrtEventRecordedStatus {
    ACL_EVENT_RECORDED_STATUS_NOT_READY = 0,
    ACL_EVENT_RECORDED_STATUS_COMPLETE = 1,
} aclrtEventRecordedStatus;

typedef enum aclrtEventWaitStatus {
    ACL_EVENT_WAIT_STATUS_COMPLETE = 0,
    ACL_EVENT_WAIT_STATUS_NOT_READY = 1,
    ACL_EVENT_WAIT_STATUS_RESERVED = 0xFFFF,
} aclrtEventWaitStatus;

typedef enum aclrtStreamStatus {
    ACL_STREAM_STATUS_COMPLETE = 0,
    ACL_STREAM_STATUS_NOT_READY = 1,
    ACL_STREAM_STATUS_RESERVED = 0xFFFF,
} aclrtStreamStatus;

typedef enum aclrtCallbackBlockType {
    ACL_CALLBACK_NO_BLOCK,
    ACL_CALLBACK_BLOCK,
} aclrtCallbackBlockType;

typedef enum aclrtMemcpyKind {
    ACL_MEMCPY_HOST_TO_HOST,
    ACL_MEMCPY_HOST_TO_DEVICE,
    ACL_MEMCPY_DEVICE_TO_HOST,
    ACL_MEMCPY_DEVICE_TO_DEVICE,
} aclrtMemcpyKind;

typedef enum aclrtMemMallocPolicy {
    ACL_MEM_MALLOC_HUGE_FIRST,
    ACL_MEM_MALLOC_HUGE_ONLY,
    ACL_MEM_MALLOC_NORMAL_ONLY,
    ACL_MEM_MALLOC_HUGE_FIRST_P2P,
    ACL_MEM_MALLOC_HUGE_ONLY_P2P,
    ACL_MEM_MALLOC_NORMAL_ONLY_P2P,
    ACL_MEM_TYPE_LOW_BAND_WIDTH = 0x0100,
    ACL_MEM_TYPE_HIGH_BAND_WIDTH = 0x1000,
} aclrtMemMallocPolicy;

typedef enum aclrtMemAttr {
    ACL_DDR_MEM,
    ACL_HBM_MEM,
    ACL_DDR_MEM_HUGE,
    ACL_DDR_MEM_NORMAL,
    ACL_HBM_MEM_HUGE,
    ACL_HBM_MEM_NORMAL,
    ACL_DDR_MEM_P2P_HUGE,
    ACL_DDR_MEM_P2P_NORMAL,
    ACL_HBM_MEM_P2P_HUGE,
    ACL_HBM_MEM_P2P_NORMAL,
} aclrtMemAttr;

typedef enum aclrtGroupAttr {
    ACL_GROUP_AICORE_INT,
    ACL_GROUP_AIV_INT,
    ACL_GROUP_AIC_INT,
    ACL_GROUP_SDMANUM_INT,
    ACL_GROUP_ASQNUM_INT,
    ACL_GROUP_GROUPID_INT
} aclrtGroupAttr;

typedef enum aclrtFloatOverflowMode {
    ACL_RT_OVERFLOW_MODE_SATURATION = 0,
    ACL_RT_OVERFLOW_MODE_INFNAN,
    ACL_RT_OVERFLOW_MODE_UNDEF,
} aclrtFloatOverflowMode;

typedef enum {
    ACL_RT_STREAM_WORK_ADDR_PTR = 0,
    ACL_RT_STREAM_WORK_SIZE,
    ACL_RT_STREAM_FLAG,
    ACL_RT_STREAM_PRIORITY,
} aclrtStreamConfigAttr;

typedef struct aclrtStreamConfigHandle {
    void* workptr;
    size_t workSize;
    size_t flag;
    uint32_t priority;
} aclrtStreamConfigHandle;

typedef struct aclrtUtilizationExtendInfo aclrtUtilizationExtendInfo;

typedef struct aclrtUtilizationInfo {
    int32_t cubeUtilization;
    int32_t vectorUtilization;
    int32_t aicpuUtilization;
    int32_t memoryUtilization;
    aclrtUtilizationExtendInfo *utilizationExtend;
} aclrtUtilizationInfo;

typedef struct tagRtGroupInfo aclrtGroupInfo;

typedef struct rtExceptionInfo aclrtExceptionInfo;

typedef enum aclrtMemLocationType {
    ACL_MEM_LOCATION_TYPE_HOST = 0,
    ACL_MEM_LOCATION_TYPE_DEVICE,
} aclrtMemLocationType;

typedef struct aclrtMemLocation {
    uint32_t id;
    aclrtMemLocationType type;
} aclrtMemLocation;

typedef enum aclrtMemAllocationType {
    ACL_MEM_ALLOCATION_TYPE_PINNED = 0,
} aclrtMemAllocationType;

typedef enum aclrtMemHandleType {
    ACL_MEM_HANDLE_TYPE_NONE = 0,
} aclrtMemHandleType;

typedef struct aclrtPhysicalMemProp {
    aclrtMemHandleType handleType;
    aclrtMemAllocationType allocationType;
    aclrtMemAttr memAttr;
    aclrtMemLocation location;
    uint64_t reserve;
} aclrtPhysicalMemProp;

typedef enum aclrtMemGranularityOptions {
    ACL_RT_MEM_ALLOC_GRANULARITY_MINIMUM,
    ACL_RT_MEM_ALLOC_GRANULARITY_RECOMMENDED,
    ACL_RT_MEM_ALLOC_GRANULARITY_UNDEF = 0xFFFF,
} aclrtMemGranularityOptions;

typedef void* aclrtDrvMemHandle;

typedef void (*aclrtCallback)(void *userData);

typedef void (*aclrtExceptionInfoCallback)(aclrtExceptionInfo *exceptionInfo);

typedef enum aclrtDeviceStatus {
    ACL_RT_DEVICE_STATUS_NORMAL = 0,
    ACL_RT_DEVICE_STATUS_ABNORMAL,
    ACL_RT_DEVICE_STATUS_END = 0xFFFF,
} aclrtDeviceStatus;

typedef void* aclrtBinary;
typedef void* aclrtBinHandle;
typedef void* aclrtFuncHandle;
# 202 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSetExceptionInfoCallback(aclrtExceptionInfoCallback callback);
# 213 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 uint32_t aclrtGetTaskIdFromExceptionInfo(const aclrtExceptionInfo *info);
# 224 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 uint32_t aclrtGetStreamIdFromExceptionInfo(const aclrtExceptionInfo *info);
# 235 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 uint32_t aclrtGetThreadIdFromExceptionInfo(const aclrtExceptionInfo *info);
# 246 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 uint32_t aclrtGetDeviceIdFromExceptionInfo(const aclrtExceptionInfo *info);
# 257 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 uint32_t aclrtGetErrorCodeFromExceptionInfo(const aclrtExceptionInfo *info);
# 269 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSubscribeReport(uint64_t threadId, aclrtStream stream);
# 286 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtLaunchCallback(aclrtCallback fn, void *userData, aclrtCallbackBlockType blockType,
                                                 aclrtStream stream);
# 304 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtProcessReport(int32_t timeout);
# 318 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtUnSubscribeReport(uint64_t threadId, aclrtStream stream);
# 345 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtCreateContext(aclrtContext *context, int32_t deviceId);
# 361 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtDestroyContext(aclrtContext context);
# 397 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSetCurrentContext(aclrtContext context);
# 415 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetCurrentContext(aclrtContext *context);
# 426 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtCtxGetSysParamOpt(aclSysParamOpt opt, int64_t *value);
# 437 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtCtxSetSysParamOpt(aclSysParamOpt opt, int64_t value);
# 465 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSetDevice(int32_t deviceId);
# 492 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtResetDevice(int32_t deviceId);
# 503 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetDevice(int32_t *deviceId);
# 515 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSetStreamFailureMode(aclrtStream stream, uint64_t mode);
# 526 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetRunMode(aclrtRunMode *runMode);
# 535 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSynchronizeDevice(void);
# 546 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSetTsDevice(aclrtTsId tsId);
# 557 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetDeviceUtilizationRate(int32_t deviceId, aclrtUtilizationInfo *utilizationInfo);
# 568 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetDeviceCount(uint32_t *count);
# 579 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtCreateEvent(aclrtEvent *event);
# 591 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtCreateEventWithFlag(aclrtEvent *event, uint32_t flag);
# 603 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtCreateEventExWithFlag(aclrtEvent *event, uint32_t flag);
# 623 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtDestroyEvent(aclrtEvent event);
# 635 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtRecordEvent(aclrtEvent event, aclrtStream stream);
# 651 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtResetEvent(aclrtEvent event, aclrtStream stream);
# 663 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
__attribute__((deprecated("aclrtQueryEvent is deprecated, use aclrtQueryEventStatus instead")))
 aclError aclrtQueryEvent(aclrtEvent event, aclrtEventStatus *status);
# 676 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtQueryEventStatus(aclrtEvent event, aclrtEventRecordedStatus *status);
# 688 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtQueryEventWaitStatus(aclrtEvent event, aclrtEventWaitStatus *status);
# 699 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSynchronizeEvent(aclrtEvent event);
# 712 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSynchronizeEventWithTimeout(aclrtEvent event, int32_t timeout);
# 727 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtEventElapsedTime(float *ms, aclrtEvent startEvent, aclrtEvent endEvent);
# 753 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMalloc(void **devPtr,
                                         size_t size,
                                         aclrtMemMallocPolicy policy);
# 778 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMallocAlign32(void **devPtr,
                                                size_t size,
                                                aclrtMemMallocPolicy policy);
# 803 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMallocCached(void **devPtr,
                                               size_t size,
                                               aclrtMemMallocPolicy policy);
# 817 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemFlush(void *devPtr, size_t size);
# 829 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemInvalidate(void *devPtr, size_t size);
# 845 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtFree(void *devPtr);
# 865 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMallocHost(void **hostPtr, size_t size);
# 881 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtFreeHost(void *hostPtr);
# 896 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemcpy(void *dst,
                                         size_t destMax,
                                         const void *src,
                                         size_t count,
                                         aclrtMemcpyKind kind);
# 919 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemset(void *devPtr, size_t maxCount, int32_t value, size_t count);
# 946 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemcpyAsync(void *dst,
                                              size_t destMax,
                                              const void *src,
                                              size_t count,
                                              aclrtMemcpyKind kind,
                                              aclrtStream stream);
# 968 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemcpy2d(void *dst,
                                           size_t dpitch,
                                           const void *src,
                                           size_t spitch,
                                           size_t width,
                                           size_t height,
                                           aclrtMemcpyKind kind);
# 992 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemcpy2dAsync(void *dst,
                                                size_t dpitch,
                                                const void *src,
                                                size_t spitch,
                                                size_t width,
                                                size_t height,
                                                aclrtMemcpyKind kind,
                                                aclrtStream stream);
# 1022 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemsetAsync(void *devPtr,
                                              size_t maxCount,
                                              int32_t value,
                                              size_t count,
                                              aclrtStream stream);
# 1043 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtReserveMemAddress(void **virPtr,
                                                    size_t size,
                                                    size_t alignment,
                                                    void *expectPtr,
                                                    uint64_t flags);
# 1060 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtReleaseMemAddress(void *virPtr);
# 1078 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMallocPhysical(aclrtDrvMemHandle *handle,
                                                 size_t size,
                                                 const aclrtPhysicalMemProp *prop,
                                                 uint64_t flags);
# 1095 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtFreePhysical(aclrtDrvMemHandle handle);
# 1112 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMapMem(void *virPtr,
                                         size_t size,
                                         size_t offset,
                                         aclrtDrvMemHandle handle,
                                         uint64_t flags);
# 1129 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtUnmapMem(void *virPtr);







 aclrtStreamConfigHandle *aclrtCreateStreamConfigHandle(void);
# 1148 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtDestroyStreamConfigHandle(aclrtStreamConfigHandle *handle);
# 1162 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSetStreamConfigOpt(aclrtStreamConfigHandle *handle, aclrtStreamConfigAttr attr,
    const void *attrValue, size_t valueSize);
# 1174 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtCreateStream(aclrtStream *stream);
# 1185 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtCreateStreamV2(aclrtStream *stream, const aclrtStreamConfigHandle *handle);
# 1201 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtCreateStreamWithConfig(aclrtStream *stream, uint32_t priority, uint32_t flag);
# 1222 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtDestroyStream(aclrtStream stream);
# 1238 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtDestroyStreamForce(aclrtStream stream);
# 1250 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSynchronizeStream(aclrtStream stream);
# 1264 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSynchronizeStreamWithTimeout(aclrtStream stream, int32_t timeout);
# 1276 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtStreamQuery(aclrtStream stream, aclrtStreamStatus *status);
# 1290 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtStreamWaitEvent(aclrtStream stream, aclrtEvent event);
# 1306 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSetGroup(int32_t groupId);
# 1322 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetGroupCount(uint32_t *count);
# 1333 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclrtGroupInfo *aclrtCreateGroupInfo();
# 1346 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtDestroyGroupInfo(aclrtGroupInfo *groupInfo);
# 1359 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetAllGroupInfo(aclrtGroupInfo *groupInfo);
# 1377 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetGroupInfoDetail(const aclrtGroupInfo *groupInfo,
                                                     int32_t groupIndex,
                                                     aclrtGroupAttr attr,
                                                     void *attrValue,
                                                     size_t valueLen,
                                                     size_t *paramRetSize);
# 1397 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtDeviceCanAccessPeer(int32_t *canAccessPeer, int32_t deviceId, int32_t peerDeviceId);
# 1411 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtDeviceEnablePeerAccess(int32_t peerDeviceId, uint32_t flags);
# 1424 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtDeviceDisablePeerAccess(int32_t peerDeviceId);
# 1438 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetMemInfo(aclrtMemAttr attr, size_t *free, size_t *total);
# 1449 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSetOpWaitTimeout(uint32_t timeout);
# 1460 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSetOpExecuteTimeOut(uint32_t timeout);
# 1471 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSetStreamOverflowSwitch(aclrtStream stream, uint32_t flag);
# 1482 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetStreamOverflowSwitch(aclrtStream stream, uint32_t *flag);
# 1492 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSetDeviceSatMode(aclrtFloatOverflowMode mode);
# 1502 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetDeviceSatMode(aclrtFloatOverflowMode *mode);
# 1519 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtGetOverflowStatus(void *outputAddr, size_t outputSize, aclrtStream stream);
# 1534 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtResetOverflowStatus(aclrtStream stream);
# 1546 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtSubscribeHostFunc(uint64_t hostFuncThreadId, aclrtStream exeStream);
# 1562 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtProcessHostFunc(int32_t timeout);
# 1576 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtUnSubscribeHostFunc(uint64_t hostFuncThreadId, aclrtStream exeStream);
# 1588 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtQueryDeviceStatus(int32_t deviceId, aclrtDeviceStatus *deviceStatus);
# 1599 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclrtBinary aclrtCreateBinary(const void *data, size_t dataLen);
# 1610 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtDestroyBinary(aclrtBinary binary);
# 1623 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtBinaryLoad(const aclrtBinary binary, aclrtBinHandle *binHandle);
# 1635 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtBinaryUnLoad(aclrtBinHandle binHandle);
# 1648 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtBinaryGetFunction(const aclrtBinHandle binHandle, const char *kernelName,
                                                    aclrtFuncHandle *funcHandle);
# 1663 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtLaunchKernel(aclrtFuncHandle funcHandle, uint32_t blockDim,
                                               const void *argsData, size_t argsSize, aclrtStream stream);
# 1677 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemExportToShareableHandle(aclrtDrvMemHandle handle,
                                                             aclrtMemHandleType handleType, uint64_t flags,
                                                             uint64_t *shareableHandle);
# 1691 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemImportFromShareableHandle(uint64_t shareableHandle,
                                                               int32_t deviceId, aclrtDrvMemHandle *handle);
# 1704 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemSetPidToShareableHandle(uint64_t shareableHandle,
                                                             int32_t *pid, size_t pidNum);
# 1717 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtMemGetAllocationGranularity(aclrtPhysicalMemProp *prop,
                                                              aclrtMemGranularityOptions option,
                                                              size_t *granularity);
# 1729 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h"
 aclError aclrtDeviceGetBareTgid(int32_t *pid);


}
# 15 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl.h" 2
# 1 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h" 1
# 17 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
extern "C" {


typedef struct aclopHandle aclopHandle;
typedef struct aclopAttr aclopAttr;
typedef struct aclopKernelDesc aclopKernelDesc;

typedef void (*aclDataDeallocator)(void *data, size_t length);

static const int ACL_COMPILE_FLAG_BIN_SELECTOR = 1;

typedef enum aclEngineType {
    ACL_ENGINE_SYS,
    ACL_ENGINE_AICORE,
    ACL_ENGINE_VECTOR,
} aclopEngineType;
# 45 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetModelDir(const char *modelDir);
# 59 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopLoad(const void *model, size_t modelSize);
# 68 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclopAttr *aclopCreateAttr();







 void aclopDestroyAttr(const aclopAttr *attr);
# 90 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetAttrBool(aclopAttr *attr, const char *attrName, uint8_t attrValue);
# 103 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetAttrInt(aclopAttr *attr, const char *attrName, int64_t attrValue);
# 116 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetAttrFloat(aclopAttr *attr, const char *attrName, float attrValue);
# 129 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetAttrString(aclopAttr *attr, const char *attrName, const char *attrValue);
# 142 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetAttrDataType(aclopAttr *attr, const char *attrName, aclDataType attrValue);
# 156 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetAttrListDataType(aclopAttr *attr, const char *attrName, int numValues,
    const aclDataType values[]);
# 171 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetAttrListBool(aclopAttr *attr, const char *attrName, int numValues,
    const uint8_t *values);
# 186 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetAttrListInt(aclopAttr *attr, const char *attrName, int numValues,
    const int64_t *values);
# 201 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetAttrListFloat(aclopAttr *attr, const char *attrName, int numValues,
    const float *values);
# 216 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetAttrListString(aclopAttr *attr, const char *attrName, int numValues,
    const char **values);
# 232 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetAttrListListInt(aclopAttr *attr,
                                                     const char *attrName,
                                                     int numLists,
                                                     const int *numValues,
                                                     const int64_t *const values[]);
# 265 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
__attribute__((deprecated("aclopExecute is deprecated, use aclopExecuteV2 instead")))
 aclError aclopExecute(const char *opType,
                                          int numInputs,
                                          const aclTensorDesc *const inputDesc[],
                                          const aclDataBuffer *const inputs[],
                                          int numOutputs,
                                          const aclTensorDesc *const outputDesc[],
                                          aclDataBuffer *const outputs[],
                                          const aclopAttr *attr,
                                          aclrtStream stream);
# 304 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopExecuteV2(const char *opType,
                                            int numInputs,
                                            aclTensorDesc *inputDesc[],
                                            aclDataBuffer *inputs[],
                                            int numOutputs,
                                            aclTensorDesc *outputDesc[],
                                            aclDataBuffer *outputs[],
                                            aclopAttr *attr,
                                            aclrtStream stream);
# 330 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopCreateHandle(const char *opType,
                                               int numInputs,
                                               const aclTensorDesc *const inputDesc[],
                                               int numOutputs,
                                               const aclTensorDesc *const outputDesc[],
                                               const aclopAttr *opAttr,
                                               aclopHandle **handle);







 void aclopDestroyHandle(aclopHandle *handle);
# 367 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopExecWithHandle(aclopHandle *handle,
                                                 int numInputs,
                                                 const aclDataBuffer *const inputs[],
                                                 int numOutputs,
                                                 aclDataBuffer *const outputs[],
                                                 aclrtStream stream);
# 388 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopCast(const aclTensorDesc *srcDesc,
                                       const aclDataBuffer *srcBuffer,
                                       const aclTensorDesc *dstDesc,
                                       aclDataBuffer *dstBuffer,
                                       uint8_t truncate,
                                       aclrtStream stream);
# 407 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopCreateHandleForCast(aclTensorDesc *srcDesc,
                                                      aclTensorDesc *dstDesc,
                                                      uint8_t truncate,
                                                      aclopHandle **handle);
# 431 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopCreateKernel(const char *opType,
                                               const char *kernelId,
                                               const char *kernelName,
                                               void *binData,
                                               int binSize,
                                               aclopEngineType enginetype,
                                               aclDataDeallocator deallocator);
# 454 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
typedef aclError (*aclopCompileFunc)(int numInputs,
                                     const aclTensorDesc *const inputDesc[],
                                     int numOutputs,
                                     const aclTensorDesc *const outputDesc[],
                                     const aclopAttr *opAttr,
                                     aclopKernelDesc *aclopKernelDesc);
# 473 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopRegisterCompileFunc(const char *opType, aclopCompileFunc func);
# 484 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopUnregisterCompileFunc(const char *opType);
# 499 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetKernelArgs(aclopKernelDesc *kernelDesc,
                                                const char *kernelId,
                                                uint32_t blockDim,
                                                const void *args,
                                                uint32_t argSize);
# 516 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopSetKernelWorkspaceSizes(aclopKernelDesc *kernelDesc, int numWorkspaces,
                                                          size_t *workspaceSizes);
# 534 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopUpdateParams(const char *opType,
                                               int numInputs,
                                               const aclTensorDesc *const inputDesc[],
                                               int numOutputs,
                                               const aclTensorDesc *const outputDesc[],
                                               const aclopAttr *attr);
# 557 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopInferShape(const char *opType,
                                             int numInputs,
                                             aclTensorDesc *inputDesc[],
                                             aclDataBuffer *inputs[],
                                             int numOutputs,
                                             aclTensorDesc *outputDesc[],
                                             aclopAttr *attr);
# 577 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopStartDumpArgs(uint32_t dumpType, const char *path);
# 588 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h"
 aclError aclopStopDumpArgs(uint32_t dumpType);


}
# 16 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl.h" 2
# 1 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h" 1
# 14 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
# 1 "/usr/lib/gcc/aarch64-linux-gnu/9/include/stddef.h" 1 3 4
# 15 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h" 2






extern "C" {
# 46 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
typedef struct aclmdlDataset aclmdlDataset;
typedef struct aclmdlDesc aclmdlDesc;
typedef struct aclmdlAIPP aclmdlAIPP;
typedef struct aclAippExtendInfo aclAippExtendInfo;
typedef struct aclmdlConfigHandle aclmdlConfigHandle;
typedef struct aclmdlExecConfigHandle aclmdlExecConfigHandle;

typedef enum {
    ACL_YUV420SP_U8 = 1,
    ACL_XRGB8888_U8 = 2,
    ACL_RGB888_U8 = 3,
    ACL_YUV400_U8 = 4,
    ACL_NC1HWC0DI_FP16 = 5,
    ACL_NC1HWC0DI_S8 = 6,
    ACL_ARGB8888_U8 = 7,
    ACL_YUYV_U8 = 8,
    ACL_YUV422SP_U8 = 9,
    ACL_AYUV444_U8 = 10,
    ACL_RAW10 = 11,
    ACL_RAW12 = 12,
    ACL_RAW16 = 13,
    ACL_RAW24 = 14,
    ACL_AIPP_RESERVED = 0xFFFF,
} aclAippInputFormat;

typedef enum {
    ACL_MDL_PRIORITY_INT32 = 0,
    ACL_MDL_LOAD_TYPE_SIZET,
    ACL_MDL_PATH_PTR,
    ACL_MDL_MEM_ADDR_PTR,
    ACL_MDL_MEM_SIZET,
    ACL_MDL_WEIGHT_ADDR_PTR,
    ACL_MDL_WEIGHT_SIZET,
    ACL_MDL_WORKSPACE_ADDR_PTR,
    ACL_MDL_WORKSPACE_SIZET,
    ACL_MDL_INPUTQ_NUM_SIZET,
    ACL_MDL_INPUTQ_ADDR_PTR,
    ACL_MDL_OUTPUTQ_NUM_SIZET,
    ACL_MDL_OUTPUTQ_ADDR_PTR,
    ACL_MDL_WORKSPACE_MEM_OPTIMIZE,
    ACL_MDL_WEIGHT_PATH_PTR,
    ACL_MDL_MODEL_DESC_PTR,
    ACL_MDL_MODEL_DESC_SIZET,
    ACL_MDL_KERNEL_PTR,
    ACL_MDL_KERNEL_SIZET,
    ACL_MDL_KERNEL_ARGS_PTR,
    ACL_MDL_KERNEL_ARGS_SIZET,
    ACL_MDL_STATIC_TASK_PTR,
    ACL_MDL_STATIC_TASK_SIZET,
    ACL_MDL_DYNAMIC_TASK_PTR,
    ACL_MDL_DYNAMIC_TASK_SIZET
} aclmdlConfigAttr;

typedef enum {
    ACL_MDL_STREAM_SYNC_TIMEOUT = 0,
    ACL_MDL_EVENT_SYNC_TIMEOUT,
    ACL_MDL_WORK_ADDR_PTR,
    ACL_MDL_WORK_SIZET,
    ACL_MDL_MPAIMID_SIZET,
    ACL_MDL_AICQOS_SIZET,
    ACL_MDL_AICOST_SIZET,
    ACL_MDL_MEC_TIMETHR_SIZET
} aclmdlExecConfigAttr;

typedef enum {
    ACL_DATA_WITHOUT_AIPP = 0,
    ACL_DATA_WITH_STATIC_AIPP,
    ACL_DATA_WITH_DYNAMIC_AIPP,
    ACL_DYNAMIC_AIPP_NODE
} aclmdlInputAippType;

typedef struct aclmdlIODims {
    char name[128];
    size_t dimCount;
    int64_t dims[128];
} aclmdlIODims;

typedef struct aclAippDims {
    aclmdlIODims srcDims;
    size_t srcSize;
    aclmdlIODims aippOutdims;
    size_t aippOutSize;
} aclAippDims;

typedef struct aclmdlBatch {
    size_t batchCount;
    uint64_t batch[128];
} aclmdlBatch;

typedef struct aclmdlHW {
    size_t hwCount;
    uint64_t hw[128][2];
} aclmdlHW;

typedef struct aclAippInfo {
    aclAippInputFormat inputFormat;
    int32_t srcImageSizeW;
    int32_t srcImageSizeH;
    int8_t cropSwitch;
    int32_t loadStartPosW;
    int32_t loadStartPosH;
    int32_t cropSizeW;
    int32_t cropSizeH;
    int8_t resizeSwitch;
    int32_t resizeOutputW;
    int32_t resizeOutputH;
    int8_t paddingSwitch;
    int32_t leftPaddingSize;
    int32_t rightPaddingSize;
    int32_t topPaddingSize;
    int32_t bottomPaddingSize;
    int8_t cscSwitch;
    int8_t rbuvSwapSwitch;
    int8_t axSwapSwitch;
    int8_t singleLineMode;
    int32_t matrixR0C0;
    int32_t matrixR0C1;
    int32_t matrixR0C2;
    int32_t matrixR1C0;
    int32_t matrixR1C1;
    int32_t matrixR1C2;
    int32_t matrixR2C0;
    int32_t matrixR2C1;
    int32_t matrixR2C2;
    int32_t outputBias0;
    int32_t outputBias1;
    int32_t outputBias2;
    int32_t inputBias0;
    int32_t inputBias1;
    int32_t inputBias2;
    int32_t meanChn0;
    int32_t meanChn1;
    int32_t meanChn2;
    int32_t meanChn3;
    float minChn0;
    float minChn1;
    float minChn2;
    float minChn3;
    float varReciChn0;
    float varReciChn1;
    float varReciChn2;
    float varReciChn3;
    aclFormat srcFormat;
    aclDataType srcDatatype;
    size_t srcDimNum;
    size_t shapeCount;
    aclAippDims outDims[128];
    aclAippExtendInfo *aippExtend;
} aclAippInfo;

typedef struct aclmdlExeOMDesc {
  size_t workSize;
  size_t weightSize;
  size_t modelDescSize;
  size_t kernelSize;
  size_t kernelArgsSize;
  size_t staticTaskSize;
  size_t dynamicTaskSize;
  size_t reserved[9];
} aclmdlExeOMDesc;







 aclmdlDesc *aclmdlCreateDesc();
# 224 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlDestroyDesc(aclmdlDesc *modelDesc);
# 236 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetDesc(aclmdlDesc *modelDesc, uint32_t modelId);
# 248 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetDescFromFile(aclmdlDesc *modelDesc, const char *modelPath);
# 261 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetDescFromMem(aclmdlDesc *modelDesc, const void *model, size_t modelSize);
# 272 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 size_t aclmdlGetNumInputs(aclmdlDesc *modelDesc);
# 283 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 size_t aclmdlGetNumOutputs(aclmdlDesc *modelDesc);
# 296 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 size_t aclmdlGetInputSizeByIndex(aclmdlDesc *modelDesc, size_t index);
# 309 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 size_t aclmdlGetOutputSizeByIndex(aclmdlDesc *modelDesc, size_t index);







 aclmdlExecConfigHandle *aclmdlCreateExecConfigHandle();
# 328 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlDestroyExecConfigHandle(const aclmdlExecConfigHandle *handle);







 aclmdlDataset *aclmdlCreateDataset();
# 347 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlDestroyDataset(const aclmdlDataset *dataset);
# 359 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlAddDatasetBuffer(aclmdlDataset *dataset, aclDataBuffer *dataBuffer);
# 372 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetDatasetTensorDesc(aclmdlDataset *dataset,
                                                        aclTensorDesc *tensorDesc,
                                                        size_t index);
# 386 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclTensorDesc *aclmdlGetDatasetTensorDesc(const aclmdlDataset *dataset, size_t index);
# 396 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 size_t aclmdlGetDatasetNumBuffers(const aclmdlDataset *dataset);
# 408 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclDataBuffer *aclmdlGetDatasetBuffer(const aclmdlDataset *dataset, size_t index);
# 427 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlLoadFromFile(const char *modelPath, uint32_t *modelId);
# 447 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlLoadFromMem(const void *model, size_t modelSize,
                                               uint32_t *modelId);
# 470 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlLoadFromFileWithMem(const char *modelPath,
                                                       uint32_t *modelId, void *workPtr, size_t workSize,
                                                       void *weightPtr, size_t weightSize);
# 495 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlLoadFromMemWithMem(const void *model, size_t modelSize,
                                                      uint32_t *modelId, void *workPtr, size_t workSize,
                                                      void *weightPtr, size_t weightSize);
# 513 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlLoadFromFileWithQ(const char *modelPath, uint32_t *modelId, const uint32_t *inputQ,
                                                     size_t inputQNum, const uint32_t *outputQ, size_t outputQNum);
# 531 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlLoadFromMemWithQ(const void *model, size_t modelSize, uint32_t *modelId,
                                                    const uint32_t *inputQ, size_t inputQNum,
                                                    const uint32_t *outputQ, size_t outputQNum);
# 546 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlExecute(uint32_t modelId, const aclmdlDataset *input, aclmdlDataset *output);
# 561 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlExecuteV2(uint32_t modelId, const aclmdlDataset *input, aclmdlDataset *output,
                                             aclrtStream stream, const aclmdlExecConfigHandle *handle);
# 577 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlExecuteAsyncV2(uint32_t modelId, const aclmdlDataset *input, aclmdlDataset *output,
                                                   aclrtStream stream, const aclmdlExecConfigHandle *handle);
# 594 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlExecuteAsync(uint32_t modelId, const aclmdlDataset *input,
                                                aclmdlDataset *output, aclrtStream stream);
# 606 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlUnload(uint32_t modelId);
# 620 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlQuerySize(const char *fileName, size_t *workSize, size_t *weightSize);
# 633 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlQueryExeOMDesc(const char *fileName, aclmdlExeOMDesc *mdlPartitionSize);
# 651 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlQuerySizeFromMem(const void *model, size_t modelSize, size_t *workSize,
                                                    size_t *weightSize);
# 671 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetDynamicBatchSize(uint32_t modelId, aclmdlDataset *dataset, size_t index,
                                                       uint64_t batchSize);
# 690 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetDynamicHWSize(uint32_t modelId, aclmdlDataset *dataset, size_t index,
                                                    uint64_t height, uint64_t width);
# 708 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetInputDynamicDims(uint32_t modelId, aclmdlDataset *dataset, size_t index,
                                                       const aclmdlIODims *dims);
# 724 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetInputDims(const aclmdlDesc *modelDesc, size_t index, aclmdlIODims *dims);
# 740 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetInputDimsV2(const aclmdlDesc *modelDesc, size_t index, aclmdlIODims *dims);
# 753 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetOutputDims(const aclmdlDesc *modelDesc, size_t index, aclmdlIODims *dims);
# 774 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetCurOutputDims(const aclmdlDesc *modelDesc, size_t index, aclmdlIODims *dims);
# 786 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 const char *aclmdlGetOpAttr(aclmdlDesc *modelDesc, const char *opName, const char *attr);
# 797 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 const char *aclmdlGetInputNameByIndex(const aclmdlDesc *modelDesc, size_t index);
# 808 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 const char *aclmdlGetOutputNameByIndex(const aclmdlDesc *modelDesc, size_t index);
# 819 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclFormat aclmdlGetInputFormat(const aclmdlDesc *modelDesc, size_t index);
# 830 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclFormat aclmdlGetOutputFormat(const aclmdlDesc *modelDesc, size_t index);
# 841 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclDataType aclmdlGetInputDataType(const aclmdlDesc *modelDesc, size_t index);
# 852 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclDataType aclmdlGetOutputDataType(const aclmdlDesc *modelDesc, size_t index);
# 865 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetInputIndexByName(const aclmdlDesc *modelDesc, const char *name, size_t *index);
# 878 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetOutputIndexByName(const aclmdlDesc *modelDesc, const char *name, size_t *index);
# 890 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetDynamicBatch(const aclmdlDesc *modelDesc, aclmdlBatch *batch);
# 903 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetDynamicHW(const aclmdlDesc *modelDesc, size_t index, aclmdlHW *hw);
# 916 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetInputDynamicGearCount(const aclmdlDesc *modelDesc, size_t index,
                                                            size_t *gearCount);
# 931 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetInputDynamicDims(const aclmdlDesc *modelDesc, size_t index, aclmdlIODims *dims,
                                                       size_t gearCount);
# 942 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclmdlAIPP *aclmdlCreateAIPP(uint64_t batchSize);
# 953 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlDestroyAIPP(const aclmdlAIPP *aippParmsSet);
# 965 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetAippDataSize(uint64_t batchSize, size_t *size);
# 979 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPInputFormat(aclmdlAIPP *aippParmsSet, aclAippInputFormat inputFormat);
# 1008 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPCscParams(aclmdlAIPP *aippParmsSet, int8_t cscSwitch,
                                                    int16_t cscMatrixR0C0, int16_t cscMatrixR0C1, int16_t cscMatrixR0C2,
                                                    int16_t cscMatrixR1C0, int16_t cscMatrixR1C1, int16_t cscMatrixR1C2,
                                                    int16_t cscMatrixR2C0, int16_t cscMatrixR2C1, int16_t cscMatrixR2C2,
                                                    uint8_t cscOutputBiasR0, uint8_t cscOutputBiasR1,
                                                    uint8_t cscOutputBiasR2, uint8_t cscInputBiasR0,
                                                    uint8_t cscInputBiasR1, uint8_t cscInputBiasR2);
# 1028 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPRbuvSwapSwitch(aclmdlAIPP *aippParmsSet, int8_t rbuvSwapSwitch);
# 1042 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPAxSwapSwitch(aclmdlAIPP *aippParmsSet, int8_t axSwapSwitch);
# 1057 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPSrcImageSize(aclmdlAIPP *aippParmsSet, int32_t srcImageSizeW,
                                                       int32_t srcImageSizeH);
# 1077 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPScfParams(aclmdlAIPP *aippParmsSet,
                                                    int8_t scfSwitch,
                                                    int32_t scfInputSizeW,
                                                    int32_t scfInputSizeH,
                                                    int32_t scfOutputSizeW,
                                                    int32_t scfOutputSizeH,
                                                    uint64_t batchIndex);
# 1102 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPCropParams(aclmdlAIPP *aippParmsSet,
                                                     int8_t cropSwitch,
                                                     int32_t cropStartPosW,
                                                     int32_t cropStartPosH,
                                                     int32_t cropSizeW,
                                                     int32_t cropSizeH,
                                                     uint64_t batchIndex);
# 1127 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPPaddingParams(aclmdlAIPP *aippParmsSet, int8_t paddingSwitch,
                                                        int32_t paddingSizeTop, int32_t paddingSizeBottom,
                                                        int32_t paddingSizeLeft, int32_t paddingSizeRight,
                                                        uint64_t batchIndex);
# 1148 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPDtcPixelMean(aclmdlAIPP *aippParmsSet,
                                                       int16_t dtcPixelMeanChn0,
                                                       int16_t dtcPixelMeanChn1,
                                                       int16_t dtcPixelMeanChn2,
                                                       int16_t dtcPixelMeanChn3,
                                                       uint64_t batchIndex);
# 1171 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPDtcPixelMin(aclmdlAIPP *aippParmsSet,
                                                      float dtcPixelMinChn0,
                                                      float dtcPixelMinChn1,
                                                      float dtcPixelMinChn2,
                                                      float dtcPixelMinChn3,
                                                      uint64_t batchIndex);
# 1194 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPPixelVarReci(aclmdlAIPP *aippParmsSet,
                                                       float dtcPixelVarReciChn0,
                                                       float dtcPixelVarReciChn1,
                                                       float dtcPixelVarReciChn2,
                                                       float dtcPixelVarReciChn3,
                                                       uint64_t batchIndex);
# 1216 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetInputAIPP(uint32_t modelId,
                                                aclmdlDataset *dataset,
                                                size_t index,
                                                const aclmdlAIPP *aippParmsSet);
# 1236 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetAIPPByInputIndex(uint32_t modelId,
                                                       aclmdlDataset *dataset,
                                                       size_t index,
                                                       const aclmdlAIPP *aippParmsSet);
# 1257 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetAippType(uint32_t modelId,
                                               size_t index,
                                               aclmdlInputAippType *type,
                                               size_t *dynamicAttachedDataIndex);
# 1277 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlGetFirstAippInfo(uint32_t modelId, size_t index, aclAippInfo *aippInfo);
# 1296 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlCreateAndGetOpDesc(uint32_t deviceId, uint32_t streamId,
    uint32_t taskId, char *opName, size_t opNameLen, aclTensorDesc **inputDesc, size_t *numInputs,
    aclTensorDesc **outputDesc, size_t *numOutputs);
# 1307 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlInitDump();
# 1318 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetDump(const char *dumpCfgPath);
# 1327 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlFinalizeDump();
# 1339 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlLoadWithConfig(const aclmdlConfigHandle *handle, uint32_t *modelId);
# 1349 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclmdlConfigHandle *aclmdlCreateConfigHandle();
# 1362 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlDestroyConfigHandle(aclmdlConfigHandle *handle);
# 1376 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetConfigOpt(aclmdlConfigHandle *handle, aclmdlConfigAttr attr,
    const void *attrValue, size_t valueSize);
# 1391 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 aclError aclmdlSetExecConfigOpt(aclmdlExecConfigHandle *handle, aclmdlExecConfigAttr attr,
                                                    const void *attrValue, size_t valueSize);
# 1404 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_mdl.h"
 const char *aclmdlGetTensorRealName(const aclmdlDesc *modelDesc, const char *name);


}
# 17 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl.h" 2


extern "C" {
# 37 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl.h"
 aclError aclInit(const char *configPath);
# 49 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl.h"
 aclError aclFinalize();
# 61 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl.h"
 aclError aclrtGetVersion(int32_t *majorVersion, int32_t *minorVersion, int32_t *patchVersion);
# 70 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl.h"
 const char *aclGetRecentErrMsg();


}
# 2 "tmp.cpp" 2
# 1 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op.h" 1
# 3 "tmp.cpp" 2
# 1 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_rt.h" 1
# 4 "tmp.cpp" 2
# 1 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h" 1
# 17 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h"
extern "C" {


typedef enum aclCompileType {
    ACL_COMPILE_SYS,
    ACL_COMPILE_UNREGISTERED
} aclopCompileType;

typedef enum {
    ACL_PRECISION_MODE,
    ACL_AICORE_NUM,
    ACL_AUTO_TUNE_MODE,
    ACL_OP_SELECT_IMPL_MODE,
    ACL_OPTYPELIST_FOR_IMPLMODE,
    ACL_OP_DEBUG_LEVEL,
    ACL_DEBUG_DIR,
    ACL_OP_COMPILER_CACHE_MODE,
    ACL_OP_COMPILER_CACHE_DIR,
    ACL_OP_PERFORMANCE_MODE,
    ACL_OP_JIT_COMPILE,
    ACL_OP_DETERMINISTIC,
    ACL_CUSTOMIZE_DTYPES,
    ACL_OP_PRECISION_MODE,
    ACL_ALLOW_HF32,
    ACL_PRECISION_MODE_V2,
    ACL_OP_DEBUG_OPTION
} aclCompileOpt;

typedef enum aclCompileFlag {
    ACL_OP_COMPILE_DEFAULT,
    ACL_OP_COMPILE_FUZZ
} aclOpCompileFlag;

typedef struct aclGraphDumpOption aclGraphDumpOption;
# 70 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h"
 aclError aclopCompile(const char *opType,
                                          int numInputs,
                                          const aclTensorDesc *const inputDesc[],
                                          int numOutputs,
                                          const aclTensorDesc *const outputDesc[],
                                          const aclopAttr *attr,
                                          aclopEngineType engineType,
                                          aclopCompileType compileFlag,
                                          const char *opPath);
# 101 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h"
 aclError aclopCompileAndExecute(const char *opType,
    int numInputs, const aclTensorDesc *const inputDesc[], const aclDataBuffer *const inputs[],
    int numOutputs, const aclTensorDesc *const outputDesc[], aclDataBuffer *const outputs[],
    const aclopAttr *attr, aclopEngineType engineType, aclopCompileType compileFlag,
    const char *opPath, aclrtStream stream);
# 129 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h"
 aclError aclopCompileAndExecuteV2(const char *opType,
    int numInputs, aclTensorDesc *inputDesc[], aclDataBuffer *inputs[],
    int numOutputs, aclTensorDesc *outputDesc[], aclDataBuffer *outputs[],
    aclopAttr *attr, aclopEngineType engineType, aclopCompileType compileFlag,
    const char *opPath, aclrtStream stream);
# 145 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h"
 aclError aclSetCompileopt(aclCompileOpt opt, const char *value);
# 155 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h"
 size_t aclGetCompileoptSize(aclCompileOpt opt);
# 168 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h"
 aclError aclGetCompileopt(aclCompileOpt opt, char *value, size_t length);
# 180 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h"
 aclError aclopSetCompileFlag(aclOpCompileFlag flag);
# 202 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h"
 aclError aclGenGraphAndDumpForOp(const char *opType,
    int numInputs, const aclTensorDesc *const inputDesc[], const aclDataBuffer *const inputs[],
    int numOutputs, const aclTensorDesc *const outputDesc[], aclDataBuffer *const outputs[],
    const aclopAttr *attr, aclopEngineType engineType,
    const char *graphDumpPath, const aclGraphDumpOption *graphDumpOpt);
# 217 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h"
 aclGraphDumpOption *aclCreateGraphDumpOpt();
# 230 "/usr/local/Ascend/ascend-toolkit/latest/include/acl/acl_op_compiler.h"
 aclError aclDestroyGraphDumpOpt(const aclGraphDumpOption *graphDumpOpt);


}
# 5 "tmp.cpp" 2
# 1 "../../src/common.h" 1
# 1 "../../src/config.h" 1
# 2 "../../src/common.h" 2
# 6 "tmp.cpp" 2

so_aclAppLog_t so_aclAppLog;
typedef void(*so_aclAppLog_t)(aclLogLevel logLevel, const char* func, const char* file, uint32_t line, const char* fmt, ...);
so_aclCreateDataBuffer_t so_aclCreateDataBuffer;
typedef aclDataBuffer*(*so_aclCreateDataBuffer_t)(void* data, size_t size);
so_aclCreateGraphDumpOpt_t so_aclCreateGraphDumpOpt;
typedef aclGraphDumpOption*(*so_aclCreateGraphDumpOpt_t)();
so_aclCreateTensorDesc_t so_aclCreateTensorDesc;
typedef aclTensorDesc*(*so_aclCreateTensorDesc_t)(aclDataType dataType, int numDims, const int64_t* dims, aclFormat format);
so_aclDataTypeSize_t so_aclDataTypeSize;
typedef size_t(*so_aclDataTypeSize_t)(aclDataType dataType);
so_aclDestroyDataBuffer_t so_aclDestroyDataBuffer;
typedef aclError(*so_aclDestroyDataBuffer_t)(const aclDataBuffer* dataBuffer);
so_aclDestroyGraphDumpOpt_t so_aclDestroyGraphDumpOpt;
typedef aclError(*so_aclDestroyGraphDumpOpt_t)(const aclGraphDumpOption* graphDumpOpt);
so_aclDestroyTensorDesc_t so_aclDestroyTensorDesc;
typedef void(*so_aclDestroyTensorDesc_t)(const aclTensorDesc* desc);
so_aclFinalize_t so_aclFinalize;
typedef aclError(*so_aclFinalize_t)();
so_aclFloat16ToFloat_t so_aclFloat16ToFloat;
typedef float(*so_aclFloat16ToFloat_t)(aclFloat16 value);
so_aclFloatToFloat16_t so_aclFloatToFloat16;
typedef aclFloat16(*so_aclFloatToFloat16_t)(float value);
so_aclGenGraphAndDumpForOp_t so_aclGenGraphAndDumpForOp;
typedef aclError(*so_aclGenGraphAndDumpForOp_t)(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], const aclDataBuffer* const inputs[], int numOutputs, const aclTensorDesc* const outputDesc[], aclDataBuffer* const outputs[], const aclopAttr* attr, aclopEngineType engineType, const char* graphDumpPath, const aclGraphDumpOption* graphDumpOpt);
so_aclGetCannAttribute_t so_aclGetCannAttribute;
typedef aclError(*so_aclGetCannAttribute_t)(aclCannAttr cannAttr, int32_t* value);
so_aclGetCannAttributeList_t so_aclGetCannAttributeList;
typedef aclError(*so_aclGetCannAttributeList_t)(const aclCannAttr** cannAttrList, size_t* num);
so_aclGetCompileopt_t so_aclGetCompileopt;
typedef aclError(*so_aclGetCompileopt_t)(aclCompileOpt opt, char* value, size_t length);
so_aclGetCompileoptSize_t so_aclGetCompileoptSize;
typedef size_t(*so_aclGetCompileoptSize_t)(aclCompileOpt opt);
so_aclGetDataBufferAddr_t so_aclGetDataBufferAddr;
typedef void*(*so_aclGetDataBufferAddr_t)(const aclDataBuffer* dataBuffer);
so_aclGetDataBufferSize_t so_aclGetDataBufferSize;
typedef uint32_t(*so_aclGetDataBufferSize_t)(const aclDataBuffer* dataBuffer);
so_aclGetDataBufferSizeV2_t so_aclGetDataBufferSizeV2;
typedef size_t(*so_aclGetDataBufferSizeV2_t)(const aclDataBuffer* dataBuffer);
so_aclGetDeviceCapability_t so_aclGetDeviceCapability;
typedef aclError(*so_aclGetDeviceCapability_t)(uint32_t deviceId, aclDeviceInfo deviceInfo, int64_t* value);
so_aclGetRecentErrMsg_t so_aclGetRecentErrMsg;
typedef const char*(*so_aclGetRecentErrMsg_t)();
so_aclGetTensorDescAddress_t so_aclGetTensorDescAddress;
typedef void*(*so_aclGetTensorDescAddress_t)(const aclTensorDesc* desc);
so_aclGetTensorDescByIndex_t so_aclGetTensorDescByIndex;
typedef aclTensorDesc*(*so_aclGetTensorDescByIndex_t)(aclTensorDesc* desc, size_t index);
so_aclGetTensorDescDim_t so_aclGetTensorDescDim;
typedef int64_t(*so_aclGetTensorDescDim_t)(const aclTensorDesc* desc, size_t index);
so_aclGetTensorDescDimRange_t so_aclGetTensorDescDimRange;
typedef aclError(*so_aclGetTensorDescDimRange_t)(const aclTensorDesc* desc, size_t index, size_t dimRangeNum, int64_t* dimRange);
so_aclGetTensorDescDimV2_t so_aclGetTensorDescDimV2;
typedef aclError(*so_aclGetTensorDescDimV2_t)(const aclTensorDesc* desc, size_t index, int64_t* dimSize);
so_aclGetTensorDescElementCount_t so_aclGetTensorDescElementCount;
typedef size_t(*so_aclGetTensorDescElementCount_t)(const aclTensorDesc* desc);
so_aclGetTensorDescFormat_t so_aclGetTensorDescFormat;
typedef aclFormat(*so_aclGetTensorDescFormat_t)(const aclTensorDesc* desc);
so_aclGetTensorDescName_t so_aclGetTensorDescName;
typedef const char*(*so_aclGetTensorDescName_t)(aclTensorDesc* desc);
so_aclGetTensorDescNumDims_t so_aclGetTensorDescNumDims;
typedef size_t(*so_aclGetTensorDescNumDims_t)(const aclTensorDesc* desc);
so_aclGetTensorDescSize_t so_aclGetTensorDescSize;
typedef size_t(*so_aclGetTensorDescSize_t)(const aclTensorDesc* desc);
so_aclGetTensorDescType_t so_aclGetTensorDescType;
typedef aclDataType(*so_aclGetTensorDescType_t)(const aclTensorDesc* desc);
so_aclInit_t so_aclInit;
typedef aclError(*so_aclInit_t)(const char* configPath);
aclInitTensor cnt == 0
aclRfft1D cnt == 0
aclRfft1DGetWorkspaceSize cnt == 0
so_aclSetCompileopt_t so_aclSetCompileopt;
typedef aclError(*so_aclSetCompileopt_t)(aclCompileOpt opt, const char* value);
so_aclSetTensorConst_t so_aclSetTensorConst;
typedef aclError(*so_aclSetTensorConst_t)(aclTensorDesc* desc, void* dataBuffer, size_t length);
so_aclSetTensorDescName_t so_aclSetTensorDescName;
typedef void(*so_aclSetTensorDescName_t)(aclTensorDesc* desc, const char* name);
so_aclSetTensorDynamicInput_t so_aclSetTensorDynamicInput;
typedef aclError(*so_aclSetTensorDynamicInput_t)(aclTensorDesc* desc, const char* dynamicInputName);
so_aclSetTensorFormat_t so_aclSetTensorFormat;
typedef aclError(*so_aclSetTensorFormat_t)(aclTensorDesc* desc, aclFormat format);
so_aclSetTensorOriginFormat_t so_aclSetTensorOriginFormat;
typedef aclError(*so_aclSetTensorOriginFormat_t)(aclTensorDesc* desc, aclFormat format);
so_aclSetTensorOriginShape_t so_aclSetTensorOriginShape;
typedef aclError(*so_aclSetTensorOriginShape_t)(aclTensorDesc* desc, int numDims, const int64_t* dims);
so_aclSetTensorPlaceMent_t so_aclSetTensorPlaceMent;
typedef aclError(*so_aclSetTensorPlaceMent_t)(aclTensorDesc* desc, aclMemType memType);
so_aclSetTensorShape_t so_aclSetTensorShape;
typedef aclError(*so_aclSetTensorShape_t)(aclTensorDesc* desc, int numDims, const int64_t* dims);
so_aclSetTensorShapeRange_t so_aclSetTensorShapeRange;
typedef aclError(*so_aclSetTensorShapeRange_t)(aclTensorDesc* desc, size_t dimsCount, int64_t dimsRange[][2]);
so_aclSetTensorStorageFormat_t so_aclSetTensorStorageFormat;
typedef aclError(*so_aclSetTensorStorageFormat_t)(aclTensorDesc* desc, aclFormat format);
so_aclSetTensorStorageShape_t so_aclSetTensorStorageShape;
typedef aclError(*so_aclSetTensorStorageShape_t)(aclTensorDesc* desc, int numDims, const int64_t* dims);
so_aclSetTensorValueRange_t so_aclSetTensorValueRange;
typedef aclError(*so_aclSetTensorValueRange_t)(aclTensorDesc* desc, size_t valueCount, int64_t valueRange[][2]);
aclStft cnt == 0
aclStftGetWorkspaceSize cnt == 0
so_aclTransTensorDescFormat_t so_aclTransTensorDescFormat;
typedef aclError(*so_aclTransTensorDescFormat_t)(const aclTensorDesc* srcDesc, aclFormat dstFormat, aclTensorDesc** dstDesc);
so_aclUpdateDataBuffer_t so_aclUpdateDataBuffer;
typedef aclError(*so_aclUpdateDataBuffer_t)(aclDataBuffer* dataBuffer, void* data, size_t size);
acldumpRegCallback cnt == 0
acldumpUnregCallback cnt == 0
aclgrphProfGraphSubscribe cnt == 0
aclgrphProfGraphUnSubscribe cnt == 0
so_aclmdlAddDatasetBuffer_t so_aclmdlAddDatasetBuffer;
typedef aclError(*so_aclmdlAddDatasetBuffer_t)(aclmdlDataset* dataset, aclDataBuffer* dataBuffer);
so_aclmdlCreateAIPP_t so_aclmdlCreateAIPP;
typedef aclmdlAIPP*(*so_aclmdlCreateAIPP_t)(uint64_t batchSize);
so_aclmdlCreateAndGetOpDesc_t so_aclmdlCreateAndGetOpDesc;
typedef aclError(*so_aclmdlCreateAndGetOpDesc_t)(uint32_t deviceId, uint32_t streamId, uint32_t taskId, char* opName, size_t opNameLen, aclTensorDesc** inputDesc, size_t* numInputs, aclTensorDesc** outputDesc, size_t* numOutputs);
so_aclmdlCreateConfigHandle_t so_aclmdlCreateConfigHandle;
typedef aclmdlConfigHandle*(*so_aclmdlCreateConfigHandle_t)();
so_aclmdlCreateDataset_t so_aclmdlCreateDataset;
typedef aclmdlDataset*(*so_aclmdlCreateDataset_t)();
so_aclmdlCreateDesc_t so_aclmdlCreateDesc;
typedef aclmdlDesc*(*so_aclmdlCreateDesc_t)();
so_aclmdlCreateExecConfigHandle_t so_aclmdlCreateExecConfigHandle;
typedef aclmdlExecConfigHandle*(*so_aclmdlCreateExecConfigHandle_t)();
so_aclmdlDestroyAIPP_t so_aclmdlDestroyAIPP;
typedef aclError(*so_aclmdlDestroyAIPP_t)(const aclmdlAIPP* aippParmsSet);
so_aclmdlDestroyConfigHandle_t so_aclmdlDestroyConfigHandle;
typedef aclError(*so_aclmdlDestroyConfigHandle_t)(aclmdlConfigHandle* handle);
so_aclmdlDestroyDataset_t so_aclmdlDestroyDataset;
typedef aclError(*so_aclmdlDestroyDataset_t)(const aclmdlDataset* dataset);
so_aclmdlDestroyDesc_t so_aclmdlDestroyDesc;
typedef aclError(*so_aclmdlDestroyDesc_t)(aclmdlDesc* modelDesc);
so_aclmdlDestroyExecConfigHandle_t so_aclmdlDestroyExecConfigHandle;
typedef aclError(*so_aclmdlDestroyExecConfigHandle_t)(const aclmdlExecConfigHandle* handle);
so_aclmdlExecute_t so_aclmdlExecute;
typedef aclError(*so_aclmdlExecute_t)(uint32_t modelId, const aclmdlDataset* input, aclmdlDataset* output);
so_aclmdlExecuteAsync_t so_aclmdlExecuteAsync;
typedef aclError(*so_aclmdlExecuteAsync_t)(uint32_t modelId, const aclmdlDataset* input, aclmdlDataset* output, aclrtStream stream);
so_aclmdlExecuteV2_t so_aclmdlExecuteV2;
typedef aclError(*so_aclmdlExecuteV2_t)(uint32_t modelId, const aclmdlDataset* input, aclmdlDataset* output, aclrtStream stream, const aclmdlExecConfigHandle* handle);
so_aclmdlFinalizeDump_t so_aclmdlFinalizeDump;
typedef aclError(*so_aclmdlFinalizeDump_t)();
so_aclmdlGetAippDataSize_t so_aclmdlGetAippDataSize;
typedef aclError(*so_aclmdlGetAippDataSize_t)(uint64_t batchSize, size_t* size);
so_aclmdlGetAippType_t so_aclmdlGetAippType;
typedef aclError(*so_aclmdlGetAippType_t)(uint32_t modelId, size_t index, aclmdlInputAippType* type, size_t* dynamicAttachedDataIndex);
so_aclmdlGetCurOutputDims_t so_aclmdlGetCurOutputDims;
typedef aclError(*so_aclmdlGetCurOutputDims_t)(const aclmdlDesc* modelDesc, size_t index, aclmdlIODims* dims);
so_aclmdlGetDatasetBuffer_t so_aclmdlGetDatasetBuffer;
typedef aclDataBuffer*(*so_aclmdlGetDatasetBuffer_t)(const aclmdlDataset* dataset, size_t index);
so_aclmdlGetDatasetNumBuffers_t so_aclmdlGetDatasetNumBuffers;
typedef size_t(*so_aclmdlGetDatasetNumBuffers_t)(const aclmdlDataset* dataset);
so_aclmdlGetDatasetTensorDesc_t so_aclmdlGetDatasetTensorDesc;
typedef aclTensorDesc*(*so_aclmdlGetDatasetTensorDesc_t)(const aclmdlDataset* dataset, size_t index);
so_aclmdlGetDesc_t so_aclmdlGetDesc;
typedef aclError(*so_aclmdlGetDesc_t)(aclmdlDesc* modelDesc, uint32_t modelId);
so_aclmdlGetDynamicBatch_t so_aclmdlGetDynamicBatch;
typedef aclError(*so_aclmdlGetDynamicBatch_t)(const aclmdlDesc* modelDesc, aclmdlBatch* batch);
so_aclmdlGetDynamicHW_t so_aclmdlGetDynamicHW;
typedef aclError(*so_aclmdlGetDynamicHW_t)(const aclmdlDesc* modelDesc, size_t index, aclmdlHW* hw);
so_aclmdlGetFirstAippInfo_t so_aclmdlGetFirstAippInfo;
typedef aclError(*so_aclmdlGetFirstAippInfo_t)(uint32_t modelId, size_t index, aclAippInfo* aippInfo);
so_aclmdlGetInputDataType_t so_aclmdlGetInputDataType;
typedef aclDataType(*so_aclmdlGetInputDataType_t)(const aclmdlDesc* modelDesc, size_t index);
so_aclmdlGetInputDims_t so_aclmdlGetInputDims;
typedef aclError(*so_aclmdlGetInputDims_t)(const aclmdlDesc* modelDesc, size_t index, aclmdlIODims* dims);
so_aclmdlGetInputDimsV2_t so_aclmdlGetInputDimsV2;
typedef aclError(*so_aclmdlGetInputDimsV2_t)(const aclmdlDesc* modelDesc, size_t index, aclmdlIODims* dims);
so_aclmdlGetInputDynamicDims_t so_aclmdlGetInputDynamicDims;
typedef aclError(*so_aclmdlGetInputDynamicDims_t)(const aclmdlDesc* modelDesc, size_t index, aclmdlIODims* dims, size_t gearCount);
so_aclmdlGetInputDynamicGearCount_t so_aclmdlGetInputDynamicGearCount;
typedef aclError(*so_aclmdlGetInputDynamicGearCount_t)(const aclmdlDesc* modelDesc, size_t index, size_t* gearCount);
so_aclmdlGetInputFormat_t so_aclmdlGetInputFormat;
typedef aclFormat(*so_aclmdlGetInputFormat_t)(const aclmdlDesc* modelDesc, size_t index);
so_aclmdlGetInputIndexByName_t so_aclmdlGetInputIndexByName;
typedef aclError(*so_aclmdlGetInputIndexByName_t)(const aclmdlDesc* modelDesc, const char* name, size_t* index);
so_aclmdlGetInputNameByIndex_t so_aclmdlGetInputNameByIndex;
typedef const char*(*so_aclmdlGetInputNameByIndex_t)(const aclmdlDesc* modelDesc, size_t index);
so_aclmdlGetInputSizeByIndex_t so_aclmdlGetInputSizeByIndex;
typedef size_t(*so_aclmdlGetInputSizeByIndex_t)(aclmdlDesc* modelDesc, size_t index);
so_aclmdlGetNumInputs_t so_aclmdlGetNumInputs;
typedef size_t(*so_aclmdlGetNumInputs_t)(aclmdlDesc* modelDesc);
so_aclmdlGetNumOutputs_t so_aclmdlGetNumOutputs;
typedef size_t(*so_aclmdlGetNumOutputs_t)(aclmdlDesc* modelDesc);
so_aclmdlGetOpAttr_t so_aclmdlGetOpAttr;
typedef const char*(*so_aclmdlGetOpAttr_t)(aclmdlDesc* modelDesc, const char* opName, const char* attr);
so_aclmdlGetOutputDataType_t so_aclmdlGetOutputDataType;
typedef aclDataType(*so_aclmdlGetOutputDataType_t)(const aclmdlDesc* modelDesc, size_t index);
so_aclmdlGetOutputDims_t so_aclmdlGetOutputDims;
typedef aclError(*so_aclmdlGetOutputDims_t)(const aclmdlDesc* modelDesc, size_t index, aclmdlIODims* dims);
so_aclmdlGetOutputFormat_t so_aclmdlGetOutputFormat;
typedef aclFormat(*so_aclmdlGetOutputFormat_t)(const aclmdlDesc* modelDesc, size_t index);
so_aclmdlGetOutputIndexByName_t so_aclmdlGetOutputIndexByName;
typedef aclError(*so_aclmdlGetOutputIndexByName_t)(const aclmdlDesc* modelDesc, const char* name, size_t* index);
so_aclmdlGetOutputNameByIndex_t so_aclmdlGetOutputNameByIndex;
typedef const char*(*so_aclmdlGetOutputNameByIndex_t)(const aclmdlDesc* modelDesc, size_t index);
so_aclmdlGetOutputSizeByIndex_t so_aclmdlGetOutputSizeByIndex;
typedef size_t(*so_aclmdlGetOutputSizeByIndex_t)(aclmdlDesc* modelDesc, size_t index);
so_aclmdlGetTensorRealName_t so_aclmdlGetTensorRealName;
typedef const char*(*so_aclmdlGetTensorRealName_t)(const aclmdlDesc* modelDesc, const char* name);
so_aclmdlInitDump_t so_aclmdlInitDump;
typedef aclError(*so_aclmdlInitDump_t)();
so_aclmdlLoadFromFile_t so_aclmdlLoadFromFile;
typedef aclError(*so_aclmdlLoadFromFile_t)(const char* modelPath, uint32_t* modelId);
so_aclmdlLoadFromFileWithMem_t so_aclmdlLoadFromFileWithMem;
typedef aclError(*so_aclmdlLoadFromFileWithMem_t)(const char* modelPath, uint32_t* modelId, void* workPtr, size_t workSize, void* weightPtr, size_t weightSize);
so_aclmdlLoadFromFileWithQ_t so_aclmdlLoadFromFileWithQ;
typedef aclError(*so_aclmdlLoadFromFileWithQ_t)(const char* modelPath, uint32_t* modelId, const uint32_t* inputQ, size_t inputQNum, const uint32_t* outputQ, size_t outputQNum);
so_aclmdlLoadFromMem_t so_aclmdlLoadFromMem;
typedef aclError(*so_aclmdlLoadFromMem_t)(const void* model, size_t modelSize, uint32_t* modelId);
so_aclmdlLoadFromMemWithMem_t so_aclmdlLoadFromMemWithMem;
typedef aclError(*so_aclmdlLoadFromMemWithMem_t)(const void* model, size_t modelSize, uint32_t* modelId, void* workPtr, size_t workSize, void* weightPtr, size_t weightSize);
so_aclmdlLoadFromMemWithQ_t so_aclmdlLoadFromMemWithQ;
typedef aclError(*so_aclmdlLoadFromMemWithQ_t)(const void* model, size_t modelSize, uint32_t* modelId, const uint32_t* inputQ, size_t inputQNum, const uint32_t* outputQ, size_t outputQNum);
so_aclmdlLoadWithConfig_t so_aclmdlLoadWithConfig;
typedef aclError(*so_aclmdlLoadWithConfig_t)(const aclmdlConfigHandle* handle, uint32_t* modelId);
so_aclmdlQuerySize_t so_aclmdlQuerySize;
typedef aclError(*so_aclmdlQuerySize_t)(const char* fileName, size_t* workSize, size_t* weightSize);
so_aclmdlQuerySizeFromMem_t so_aclmdlQuerySizeFromMem;
typedef aclError(*so_aclmdlQuerySizeFromMem_t)(const void* model, size_t modelSize, size_t* workSize, size_t* weightSize);
so_aclmdlSetAIPPAxSwapSwitch_t so_aclmdlSetAIPPAxSwapSwitch;
typedef aclError(*so_aclmdlSetAIPPAxSwapSwitch_t)(aclmdlAIPP* aippParmsSet, int8_t axSwapSwitch);
so_aclmdlSetAIPPByInputIndex_t so_aclmdlSetAIPPByInputIndex;
typedef aclError(*so_aclmdlSetAIPPByInputIndex_t)(uint32_t modelId, aclmdlDataset* dataset, size_t index, const aclmdlAIPP* aippParmsSet);
so_aclmdlSetAIPPCropParams_t so_aclmdlSetAIPPCropParams;
typedef aclError(*so_aclmdlSetAIPPCropParams_t)(aclmdlAIPP* aippParmsSet, int8_t cropSwitch, int32_t cropStartPosW, int32_t cropStartPosH, int32_t cropSizeW, int32_t cropSizeH, uint64_t batchIndex);
so_aclmdlSetAIPPCscParams_t so_aclmdlSetAIPPCscParams;
typedef aclError(*so_aclmdlSetAIPPCscParams_t)(aclmdlAIPP* aippParmsSet, int8_t cscSwitch, int16_t cscMatrixR0C0, int16_t cscMatrixR0C1, int16_t cscMatrixR0C2, int16_t cscMatrixR1C0, int16_t cscMatrixR1C1, int16_t cscMatrixR1C2, int16_t cscMatrixR2C0, int16_t cscMatrixR2C1, int16_t cscMatrixR2C2, uint8_t cscOutputBiasR0, uint8_t cscOutputBiasR1, uint8_t cscOutputBiasR2, uint8_t cscInputBiasR0, uint8_t cscInputBiasR1, uint8_t cscInputBiasR2);
so_aclmdlSetAIPPDtcPixelMean_t so_aclmdlSetAIPPDtcPixelMean;
typedef aclError(*so_aclmdlSetAIPPDtcPixelMean_t)(aclmdlAIPP* aippParmsSet, int16_t dtcPixelMeanChn0, int16_t dtcPixelMeanChn1, int16_t dtcPixelMeanChn2, int16_t dtcPixelMeanChn3, uint64_t batchIndex);
so_aclmdlSetAIPPDtcPixelMin_t so_aclmdlSetAIPPDtcPixelMin;
typedef aclError(*so_aclmdlSetAIPPDtcPixelMin_t)(aclmdlAIPP* aippParmsSet, float dtcPixelMinChn0, float dtcPixelMinChn1, float dtcPixelMinChn2, float dtcPixelMinChn3, uint64_t batchIndex);
so_aclmdlSetAIPPInputFormat_t so_aclmdlSetAIPPInputFormat;
typedef aclError(*so_aclmdlSetAIPPInputFormat_t)(aclmdlAIPP* aippParmsSet, aclAippInputFormat inputFormat);
so_aclmdlSetAIPPPaddingParams_t so_aclmdlSetAIPPPaddingParams;
typedef aclError(*so_aclmdlSetAIPPPaddingParams_t)(aclmdlAIPP* aippParmsSet, int8_t paddingSwitch, int32_t paddingSizeTop, int32_t paddingSizeBottom, int32_t paddingSizeLeft, int32_t paddingSizeRight, uint64_t batchIndex);
so_aclmdlSetAIPPPixelVarReci_t so_aclmdlSetAIPPPixelVarReci;
typedef aclError(*so_aclmdlSetAIPPPixelVarReci_t)(aclmdlAIPP* aippParmsSet, float dtcPixelVarReciChn0, float dtcPixelVarReciChn1, float dtcPixelVarReciChn2, float dtcPixelVarReciChn3, uint64_t batchIndex);
so_aclmdlSetAIPPRbuvSwapSwitch_t so_aclmdlSetAIPPRbuvSwapSwitch;
typedef aclError(*so_aclmdlSetAIPPRbuvSwapSwitch_t)(aclmdlAIPP* aippParmsSet, int8_t rbuvSwapSwitch);
so_aclmdlSetAIPPScfParams_t so_aclmdlSetAIPPScfParams;
typedef aclError(*so_aclmdlSetAIPPScfParams_t)(aclmdlAIPP* aippParmsSet, int8_t scfSwitch, int32_t scfInputSizeW, int32_t scfInputSizeH, int32_t scfOutputSizeW, int32_t scfOutputSizeH, uint64_t batchIndex);
so_aclmdlSetAIPPSrcImageSize_t so_aclmdlSetAIPPSrcImageSize;
typedef aclError(*so_aclmdlSetAIPPSrcImageSize_t)(aclmdlAIPP* aippParmsSet, int32_t srcImageSizeW, int32_t srcImageSizeH);
so_aclmdlSetConfigOpt_t so_aclmdlSetConfigOpt;
typedef aclError(*so_aclmdlSetConfigOpt_t)(aclmdlConfigHandle* handle, aclmdlConfigAttr attr, const void* attrValue, size_t valueSize);
so_aclmdlSetDatasetTensorDesc_t so_aclmdlSetDatasetTensorDesc;
typedef aclError(*so_aclmdlSetDatasetTensorDesc_t)(aclmdlDataset* dataset, aclTensorDesc* tensorDesc, size_t index);
so_aclmdlSetDump_t so_aclmdlSetDump;
typedef aclError(*so_aclmdlSetDump_t)(const char* dumpCfgPath);
so_aclmdlSetDynamicBatchSize_t so_aclmdlSetDynamicBatchSize;
typedef aclError(*so_aclmdlSetDynamicBatchSize_t)(uint32_t modelId, aclmdlDataset* dataset, size_t index, uint64_t batchSize);
so_aclmdlSetDynamicHWSize_t so_aclmdlSetDynamicHWSize;
typedef aclError(*so_aclmdlSetDynamicHWSize_t)(uint32_t modelId, aclmdlDataset* dataset, size_t index, uint64_t height, uint64_t width);
so_aclmdlSetExecConfigOpt_t so_aclmdlSetExecConfigOpt;
typedef aclError(*so_aclmdlSetExecConfigOpt_t)(aclmdlExecConfigHandle* handle, aclmdlExecConfigAttr attr, const void* attrValue, size_t valueSize);
so_aclmdlSetInputAIPP_t so_aclmdlSetInputAIPP;
typedef aclError(*so_aclmdlSetInputAIPP_t)(uint32_t modelId, aclmdlDataset* dataset, size_t index, const aclmdlAIPP* aippParmsSet);
so_aclmdlSetInputDynamicDims_t so_aclmdlSetInputDynamicDims;
typedef aclError(*so_aclmdlSetInputDynamicDims_t)(uint32_t modelId, aclmdlDataset* dataset, size_t index, const aclmdlIODims* dims);
so_aclmdlUnload_t so_aclmdlUnload;
typedef aclError(*so_aclmdlUnload_t)(uint32_t modelId);
so_aclopCast_t so_aclopCast;
typedef aclError(*so_aclopCast_t)(const aclTensorDesc* srcDesc, const aclDataBuffer* srcBuffer, const aclTensorDesc* dstDesc, aclDataBuffer* dstBuffer, uint8_t truncate, aclrtStream stream);
so_aclopCompile_t so_aclopCompile;
typedef aclError(*so_aclopCompile_t)(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], int numOutputs, const aclTensorDesc* const outputDesc[], const aclopAttr* attr, aclopEngineType engineType, aclopCompileType compileFlag, const char* opPath);
so_aclopCompileAndExecute_t so_aclopCompileAndExecute;
typedef aclError(*so_aclopCompileAndExecute_t)(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], const aclDataBuffer* const inputs[], int numOutputs, const aclTensorDesc* const outputDesc[], aclDataBuffer* const outputs[], const aclopAttr* attr, aclopEngineType engineType, aclopCompileType compileFlag, const char* opPath, aclrtStream stream);
so_aclopCompileAndExecuteV2_t so_aclopCompileAndExecuteV2;
typedef aclError(*so_aclopCompileAndExecuteV2_t)(const char* opType, int numInputs, aclTensorDesc* inputDesc[], aclDataBuffer* inputs[], int numOutputs, aclTensorDesc* outputDesc[], aclDataBuffer* outputs[], aclopAttr* attr, aclopEngineType engineType, aclopCompileType compileFlag, const char* opPath, aclrtStream stream);
so_aclopCreateAttr_t so_aclopCreateAttr;
typedef aclopAttr*(*so_aclopCreateAttr_t)();
so_aclopCreateHandle_t so_aclopCreateHandle;
typedef aclError(*so_aclopCreateHandle_t)(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], int numOutputs, const aclTensorDesc* const outputDesc[], const aclopAttr* opAttr, aclopHandle** handle);
so_aclopCreateHandleForCast_t so_aclopCreateHandleForCast;
typedef aclError(*so_aclopCreateHandleForCast_t)(aclTensorDesc* srcDesc, aclTensorDesc* dstDesc, uint8_t truncate, aclopHandle** handle);
so_aclopCreateKernel_t so_aclopCreateKernel;
typedef aclError(*so_aclopCreateKernel_t)(const char* opType, const char* kernelId, const char* kernelName, void* binData, int binSize, aclopEngineType enginetype, aclDataDeallocator deallocator);
so_aclopDestroyAttr_t so_aclopDestroyAttr;
typedef void(*so_aclopDestroyAttr_t)(const aclopAttr* attr);
so_aclopDestroyHandle_t so_aclopDestroyHandle;
typedef void(*so_aclopDestroyHandle_t)(aclopHandle* handle);
so_aclopExecWithHandle_t so_aclopExecWithHandle;
typedef aclError(*so_aclopExecWithHandle_t)(aclopHandle* handle, int numInputs, const aclDataBuffer* const inputs[], int numOutputs, aclDataBuffer* const outputs[], aclrtStream stream);
so_aclopExecute_t so_aclopExecute;
typedef aclError(*so_aclopExecute_t)(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], const aclDataBuffer* const inputs[], int numOutputs, const aclTensorDesc* const outputDesc[], aclDataBuffer* const outputs[], const aclopAttr* attr, aclrtStream stream);
so_aclopExecuteV2_t so_aclopExecuteV2;
typedef aclError(*so_aclopExecuteV2_t)(const char* opType, int numInputs, aclTensorDesc* inputDesc[], aclDataBuffer* inputs[], int numOutputs, aclTensorDesc* outputDesc[], aclDataBuffer* outputs[], aclopAttr* attr, aclrtStream stream);
so_aclopInferShape_t so_aclopInferShape;
typedef aclError(*so_aclopInferShape_t)(const char* opType, int numInputs, aclTensorDesc* inputDesc[], aclDataBuffer* inputs[], int numOutputs, aclTensorDesc* outputDesc[], aclopAttr* attr);
so_aclopLoad_t so_aclopLoad;
typedef aclError(*so_aclopLoad_t)(const void* model, size_t modelSize);
so_aclopRegisterCompileFunc_t so_aclopRegisterCompileFunc;
typedef aclError(*so_aclopRegisterCompileFunc_t)(const char* opType, aclopCompileFunc func);
so_aclopSetAttrBool_t so_aclopSetAttrBool;
typedef aclError(*so_aclopSetAttrBool_t)(aclopAttr* attr, const char* attrName, uint8_t attrValue);
so_aclopSetAttrDataType_t so_aclopSetAttrDataType;
typedef aclError(*so_aclopSetAttrDataType_t)(aclopAttr* attr, const char* attrName, aclDataType attrValue);
so_aclopSetAttrFloat_t so_aclopSetAttrFloat;
typedef aclError(*so_aclopSetAttrFloat_t)(aclopAttr* attr, const char* attrName, float attrValue);
so_aclopSetAttrInt_t so_aclopSetAttrInt;
typedef aclError(*so_aclopSetAttrInt_t)(aclopAttr* attr, const char* attrName, int64_t attrValue);
so_aclopSetAttrListBool_t so_aclopSetAttrListBool;
typedef aclError(*so_aclopSetAttrListBool_t)(aclopAttr* attr, const char* attrName, int numValues, const uint8_t* values);
so_aclopSetAttrListDataType_t so_aclopSetAttrListDataType;
typedef aclError(*so_aclopSetAttrListDataType_t)(aclopAttr* attr, const char* attrName, int numValues, const aclDataType values[]);
so_aclopSetAttrListFloat_t so_aclopSetAttrListFloat;
typedef aclError(*so_aclopSetAttrListFloat_t)(aclopAttr* attr, const char* attrName, int numValues, const float* values);
so_aclopSetAttrListInt_t so_aclopSetAttrListInt;
typedef aclError(*so_aclopSetAttrListInt_t)(aclopAttr* attr, const char* attrName, int numValues, const int64_t* values);
so_aclopSetAttrListListInt_t so_aclopSetAttrListListInt;
typedef aclError(*so_aclopSetAttrListListInt_t)(aclopAttr* attr, const char* attrName, int numLists, const int* numValues, const int64_t* const values[]);
so_aclopSetAttrListString_t so_aclopSetAttrListString;
typedef aclError(*so_aclopSetAttrListString_t)(aclopAttr* attr, const char* attrName, int numValues, const char** values);
so_aclopSetAttrString_t so_aclopSetAttrString;
typedef aclError(*so_aclopSetAttrString_t)(aclopAttr* attr, const char* attrName, const char* attrValue);
so_aclopSetCompileFlag_t so_aclopSetCompileFlag;
typedef aclError(*so_aclopSetCompileFlag_t)(aclOpCompileFlag flag);
so_aclopSetKernelArgs_t so_aclopSetKernelArgs;
typedef aclError(*so_aclopSetKernelArgs_t)(aclopKernelDesc* kernelDesc, const char* kernelId, uint32_t blockDim, const void* args, uint32_t argSize);
so_aclopSetKernelWorkspaceSizes_t so_aclopSetKernelWorkspaceSizes;
typedef aclError(*so_aclopSetKernelWorkspaceSizes_t)(aclopKernelDesc* kernelDesc, int numWorkspaces, size_t* workspaceSizes);
so_aclopSetModelDir_t so_aclopSetModelDir;
typedef aclError(*so_aclopSetModelDir_t)(const char* modelDir);
so_aclopStartDumpArgs_t so_aclopStartDumpArgs;
typedef aclError(*so_aclopStartDumpArgs_t)(uint32_t dumpType, const char* path);
so_aclopStopDumpArgs_t so_aclopStopDumpArgs;
typedef aclError(*so_aclopStopDumpArgs_t)(uint32_t dumpType);
so_aclopUnregisterCompileFunc_t so_aclopUnregisterCompileFunc;
typedef aclError(*so_aclopUnregisterCompileFunc_t)(const char* opType);
so_aclopUpdateParams_t so_aclopUpdateParams;
typedef aclError(*so_aclopUpdateParams_t)(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], int numOutputs, const aclTensorDesc* const outputDesc[], const aclopAttr* attr);
so_aclprofCreateConfig_t so_aclprofCreateConfig;
typedef aclprofConfig*(*so_aclprofCreateConfig_t)(uint32_t* deviceIdList, uint32_t deviceNums, aclprofAicoreMetrics aicoreMetrics, aclprofAicoreEvents* aicoreEvents, uint64_t dataTypeConfig);
so_aclprofCreateStamp_t so_aclprofCreateStamp;
typedef void*(*so_aclprofCreateStamp_t)();
so_aclprofCreateStepInfo_t so_aclprofCreateStepInfo;
typedef aclprofStepInfo*(*so_aclprofCreateStepInfo_t)();
so_aclprofCreateSubscribeConfig_t so_aclprofCreateSubscribeConfig;
typedef aclprofSubscribeConfig*(*so_aclprofCreateSubscribeConfig_t)(int8_t timeInfoSwitch, aclprofAicoreMetrics aicoreMetrics, void* fd);
so_aclprofDestroyConfig_t so_aclprofDestroyConfig;
typedef aclError(*so_aclprofDestroyConfig_t)(const aclprofConfig* profilerConfig);
so_aclprofDestroyStamp_t so_aclprofDestroyStamp;
typedef void(*so_aclprofDestroyStamp_t)(void* stamp);
so_aclprofDestroyStepInfo_t so_aclprofDestroyStepInfo;
typedef void(*so_aclprofDestroyStepInfo_t)(aclprofStepInfo* stepinfo);
so_aclprofDestroySubscribeConfig_t so_aclprofDestroySubscribeConfig;
typedef aclError(*so_aclprofDestroySubscribeConfig_t)(const aclprofSubscribeConfig* profSubscribeConfig);
so_aclprofFinalize_t so_aclprofFinalize;
typedef aclError(*so_aclprofFinalize_t)();
aclprofGetGraphId cnt == 0
so_aclprofGetModelId_t so_aclprofGetModelId;
typedef size_t(*so_aclprofGetModelId_t)(const void* opInfo, size_t opInfoLen, uint32_t index);
aclprofGetOpAttriValue cnt == 0
so_aclprofGetOpDescSize_t so_aclprofGetOpDescSize;
typedef aclError(*so_aclprofGetOpDescSize_t)(size_t* opDescSize);
so_aclprofGetOpDuration_t so_aclprofGetOpDuration;
typedef uint64_t(*so_aclprofGetOpDuration_t)(const void* opInfo, size_t opInfoLen, uint32_t index);
so_aclprofGetOpEnd_t so_aclprofGetOpEnd;
typedef uint64_t(*so_aclprofGetOpEnd_t)(const void* opInfo, size_t opInfoLen, uint32_t index);
aclprofGetOpFlag cnt == 0
so_aclprofGetOpName_t so_aclprofGetOpName;
typedef aclError(*so_aclprofGetOpName_t)(const void* opInfo, size_t opInfoLen, uint32_t index, char* opName, size_t opNameLen);
so_aclprofGetOpNameLen_t so_aclprofGetOpNameLen;
typedef aclError(*so_aclprofGetOpNameLen_t)(const void* opInfo, size_t opInfoLen, uint32_t index, size_t* opNameLen);
so_aclprofGetOpNum_t so_aclprofGetOpNum;
typedef aclError(*so_aclprofGetOpNum_t)(const void* opInfo, size_t opInfoLen, uint32_t* opNumber);
so_aclprofGetOpStart_t so_aclprofGetOpStart;
typedef uint64_t(*so_aclprofGetOpStart_t)(const void* opInfo, size_t opInfoLen, uint32_t index);
so_aclprofGetOpType_t so_aclprofGetOpType;
typedef aclError(*so_aclprofGetOpType_t)(const void* opInfo, size_t opInfoLen, uint32_t index, char* opType, size_t opTypeLen);
so_aclprofGetOpTypeLen_t so_aclprofGetOpTypeLen;
typedef aclError(*so_aclprofGetOpTypeLen_t)(const void* opInfo, size_t opInfoLen, uint32_t index, size_t* opTypeLen);
so_aclprofGetStepTimestamp_t so_aclprofGetStepTimestamp;
typedef aclError(*so_aclprofGetStepTimestamp_t)(aclprofStepInfo* stepInfo, aclprofStepTag tag, aclrtStream stream);
aclprofGetSupportedFeatures cnt == 0
so_aclprofInit_t so_aclprofInit;
typedef aclError(*so_aclprofInit_t)(const char* profilerResultPath, size_t length);
so_aclprofMark_t so_aclprofMark;
typedef aclError(*so_aclprofMark_t)(void* stamp);
so_aclprofMarkEx_t so_aclprofMarkEx;
typedef aclError(*so_aclprofMarkEx_t)(const char* msg, size_t msgLen, aclrtStream stream);
so_aclprofModelSubscribe_t so_aclprofModelSubscribe;
typedef aclError(*so_aclprofModelSubscribe_t)(uint32_t modelId, const aclprofSubscribeConfig* profSubscribeConfig);
so_aclprofModelUnSubscribe_t so_aclprofModelUnSubscribe;
typedef aclError(*so_aclprofModelUnSubscribe_t)(uint32_t modelId);
so_aclprofPop_t so_aclprofPop;
typedef aclError(*so_aclprofPop_t)();
so_aclprofPush_t so_aclprofPush;
typedef aclError(*so_aclprofPush_t)(void* stamp);
so_aclprofRangeStart_t so_aclprofRangeStart;
typedef aclError(*so_aclprofRangeStart_t)(void* stamp, uint32_t* rangeId);
so_aclprofRangeStop_t so_aclprofRangeStop;
typedef aclError(*so_aclprofRangeStop_t)(uint32_t rangeId);
aclprofSetCategoryName cnt == 0
so_aclprofSetConfig_t so_aclprofSetConfig;
typedef aclError(*so_aclprofSetConfig_t)(aclprofConfigType configType, const char* config, size_t configLength);
aclprofSetStampCategory cnt == 0
aclprofSetStampPayload cnt == 0
so_aclprofSetStampTraceMessage_t so_aclprofSetStampTraceMessage;
typedef aclError(*so_aclprofSetStampTraceMessage_t)(void* stamp, const char* msg, uint32_t msgLen);
so_aclprofStart_t so_aclprofStart;
typedef aclError(*so_aclprofStart_t)(const aclprofConfig* profilerConfig);
so_aclprofStop_t so_aclprofStop;
typedef aclError(*so_aclprofStop_t)(const aclprofConfig* profilerConfig);
so_aclrtAllocatorCreateDesc_t so_aclrtAllocatorCreateDesc;
typedef aclrtAllocatorDesc(*so_aclrtAllocatorCreateDesc_t)();
so_aclrtAllocatorDestroyDesc_t so_aclrtAllocatorDestroyDesc;
typedef aclError(*so_aclrtAllocatorDestroyDesc_t)(aclrtAllocatorDesc allocatorDesc);
so_aclrtAllocatorRegister_t so_aclrtAllocatorRegister;
typedef aclError(*so_aclrtAllocatorRegister_t)(aclrtStream stream, aclrtAllocatorDesc allocatorDesc);
so_aclrtAllocatorSetAllocAdviseFuncToDesc_t so_aclrtAllocatorSetAllocAdviseFuncToDesc;
typedef aclError(*so_aclrtAllocatorSetAllocAdviseFuncToDesc_t)(aclrtAllocatorDesc allocatorDesc, aclrtAllocatorAllocAdviseFunc func);
so_aclrtAllocatorSetAllocFuncToDesc_t so_aclrtAllocatorSetAllocFuncToDesc;
typedef aclError(*so_aclrtAllocatorSetAllocFuncToDesc_t)(aclrtAllocatorDesc allocatorDesc, aclrtAllocatorAllocFunc func);
so_aclrtAllocatorSetFreeFuncToDesc_t so_aclrtAllocatorSetFreeFuncToDesc;
typedef aclError(*so_aclrtAllocatorSetFreeFuncToDesc_t)(aclrtAllocatorDesc allocatorDesc, aclrtAllocatorFreeFunc func);
so_aclrtAllocatorSetGetAddrFromBlockFuncToDesc_t so_aclrtAllocatorSetGetAddrFromBlockFuncToDesc;
typedef aclError(*so_aclrtAllocatorSetGetAddrFromBlockFuncToDesc_t)(aclrtAllocatorDesc allocatorDesc, aclrtAllocatorGetAddrFromBlockFunc func);
so_aclrtAllocatorSetObjToDesc_t so_aclrtAllocatorSetObjToDesc;
typedef aclError(*so_aclrtAllocatorSetObjToDesc_t)(aclrtAllocatorDesc allocatorDesc, aclrtAllocator allocator);
so_aclrtAllocatorUnregister_t so_aclrtAllocatorUnregister;
typedef aclError(*so_aclrtAllocatorUnregister_t)(aclrtStream stream);
so_aclrtBinaryGetFunction_t so_aclrtBinaryGetFunction;
typedef aclError(*so_aclrtBinaryGetFunction_t)(const aclrtBinHandle binHandle, const char* kernelName, aclrtFuncHandle* funcHandle);
so_aclrtBinaryLoad_t so_aclrtBinaryLoad;
typedef aclError(*so_aclrtBinaryLoad_t)(const aclrtBinary binary, aclrtBinHandle* binHandle);
so_aclrtBinaryUnLoad_t so_aclrtBinaryUnLoad;
typedef aclError(*so_aclrtBinaryUnLoad_t)(aclrtBinHandle binHandle);
so_aclrtCreateBinary_t so_aclrtCreateBinary;
typedef aclrtBinary(*so_aclrtCreateBinary_t)(const void* data, size_t dataLen);
so_aclrtCreateContext_t so_aclrtCreateContext;
typedef aclError(*so_aclrtCreateContext_t)(aclrtContext* context, int32_t deviceId);
so_aclrtCreateEvent_t so_aclrtCreateEvent;
typedef aclError(*so_aclrtCreateEvent_t)(aclrtEvent* event);
so_aclrtCreateEventExWithFlag_t so_aclrtCreateEventExWithFlag;
typedef aclError(*so_aclrtCreateEventExWithFlag_t)(aclrtEvent* event, uint32_t flag);
so_aclrtCreateEventWithFlag_t so_aclrtCreateEventWithFlag;
typedef aclError(*so_aclrtCreateEventWithFlag_t)(aclrtEvent* event, uint32_t flag);
so_aclrtCreateGroupInfo_t so_aclrtCreateGroupInfo;
typedef aclrtGroupInfo*(*so_aclrtCreateGroupInfo_t)();
so_aclrtCreateStream_t so_aclrtCreateStream;
typedef aclError(*so_aclrtCreateStream_t)(aclrtStream* stream);
so_aclrtCreateStreamWithConfig_t so_aclrtCreateStreamWithConfig;
typedef aclError(*so_aclrtCreateStreamWithConfig_t)(aclrtStream* stream, uint32_t priority, uint32_t flag);
so_aclrtCtxGetSysParamOpt_t so_aclrtCtxGetSysParamOpt;
typedef aclError(*so_aclrtCtxGetSysParamOpt_t)(aclSysParamOpt opt, int64_t* value);
so_aclrtCtxSetSysParamOpt_t so_aclrtCtxSetSysParamOpt;
typedef aclError(*so_aclrtCtxSetSysParamOpt_t)(aclSysParamOpt opt, int64_t value);
so_aclrtDestroyBinary_t so_aclrtDestroyBinary;
typedef aclError(*so_aclrtDestroyBinary_t)(aclrtBinary binary);
so_aclrtDestroyContext_t so_aclrtDestroyContext;
typedef aclError(*so_aclrtDestroyContext_t)(aclrtContext context);
so_aclrtDestroyEvent_t so_aclrtDestroyEvent;
typedef aclError(*so_aclrtDestroyEvent_t)(aclrtEvent event);
so_aclrtDestroyGroupInfo_t so_aclrtDestroyGroupInfo;
typedef aclError(*so_aclrtDestroyGroupInfo_t)(aclrtGroupInfo* groupInfo);
so_aclrtDestroyStream_t so_aclrtDestroyStream;
typedef aclError(*so_aclrtDestroyStream_t)(aclrtStream stream);
so_aclrtDestroyStreamForce_t so_aclrtDestroyStreamForce;
typedef aclError(*so_aclrtDestroyStreamForce_t)(aclrtStream stream);
so_aclrtDeviceCanAccessPeer_t so_aclrtDeviceCanAccessPeer;
typedef aclError(*so_aclrtDeviceCanAccessPeer_t)(int32_t* canAccessPeer, int32_t deviceId, int32_t peerDeviceId);
so_aclrtDeviceDisablePeerAccess_t so_aclrtDeviceDisablePeerAccess;
typedef aclError(*so_aclrtDeviceDisablePeerAccess_t)(int32_t peerDeviceId);
so_aclrtDeviceEnablePeerAccess_t so_aclrtDeviceEnablePeerAccess;
typedef aclError(*so_aclrtDeviceEnablePeerAccess_t)(int32_t peerDeviceId, uint32_t flags);
so_aclrtDeviceGetBareTgid_t so_aclrtDeviceGetBareTgid;
typedef aclError(*so_aclrtDeviceGetBareTgid_t)(int32_t* pid);
so_aclrtEventElapsedTime_t so_aclrtEventElapsedTime;
typedef aclError(*so_aclrtEventElapsedTime_t)(float* ms, aclrtEvent startEvent, aclrtEvent endEvent);
so_aclrtFree_t so_aclrtFree;
typedef aclError(*so_aclrtFree_t)(void* devPtr);
so_aclrtFreeHost_t so_aclrtFreeHost;
typedef aclError(*so_aclrtFreeHost_t)(void* hostPtr);
so_aclrtFreePhysical_t so_aclrtFreePhysical;
typedef aclError(*so_aclrtFreePhysical_t)(aclrtDrvMemHandle handle);
so_aclrtGetAllGroupInfo_t so_aclrtGetAllGroupInfo;
typedef aclError(*so_aclrtGetAllGroupInfo_t)(aclrtGroupInfo* groupInfo);
so_aclrtGetCurrentContext_t so_aclrtGetCurrentContext;
typedef aclError(*so_aclrtGetCurrentContext_t)(aclrtContext* context);
so_aclrtGetDevice_t so_aclrtGetDevice;
typedef aclError(*so_aclrtGetDevice_t)(int32_t* deviceId);
so_aclrtGetDeviceCount_t so_aclrtGetDeviceCount;
typedef aclError(*so_aclrtGetDeviceCount_t)(uint32_t* count);
so_aclrtGetDeviceIdFromExceptionInfo_t so_aclrtGetDeviceIdFromExceptionInfo;
typedef uint32_t(*so_aclrtGetDeviceIdFromExceptionInfo_t)(const aclrtExceptionInfo* info);
so_aclrtGetDeviceSatMode_t so_aclrtGetDeviceSatMode;
typedef aclError(*so_aclrtGetDeviceSatMode_t)(aclrtFloatOverflowMode* mode);
so_aclrtGetDeviceUtilizationRate_t so_aclrtGetDeviceUtilizationRate;
typedef aclError(*so_aclrtGetDeviceUtilizationRate_t)(int32_t deviceId, aclrtUtilizationInfo* utilizationInfo);
so_aclrtGetErrorCodeFromExceptionInfo_t so_aclrtGetErrorCodeFromExceptionInfo;
typedef uint32_t(*so_aclrtGetErrorCodeFromExceptionInfo_t)(const aclrtExceptionInfo* info);
so_aclrtGetGroupCount_t so_aclrtGetGroupCount;
typedef aclError(*so_aclrtGetGroupCount_t)(uint32_t* count);
so_aclrtGetGroupInfoDetail_t so_aclrtGetGroupInfoDetail;
typedef aclError(*so_aclrtGetGroupInfoDetail_t)(const aclrtGroupInfo* groupInfo, int32_t groupIndex, aclrtGroupAttr attr, void* attrValue, size_t valueLen, size_t* paramRetSize);
so_aclrtGetMemInfo_t so_aclrtGetMemInfo;
typedef aclError(*so_aclrtGetMemInfo_t)(aclrtMemAttr attr, size_t* free, size_t* total);
so_aclrtGetOverflowStatus_t so_aclrtGetOverflowStatus;
typedef aclError(*so_aclrtGetOverflowStatus_t)(void* outputAddr, size_t outputSize, aclrtStream stream);
so_aclrtGetRunMode_t so_aclrtGetRunMode;
typedef aclError(*so_aclrtGetRunMode_t)(aclrtRunMode* runMode);
so_aclrtGetSocName_t so_aclrtGetSocName;
typedef const char*(*so_aclrtGetSocName_t)();
so_aclrtGetStreamIdFromExceptionInfo_t so_aclrtGetStreamIdFromExceptionInfo;
typedef uint32_t(*so_aclrtGetStreamIdFromExceptionInfo_t)(const aclrtExceptionInfo* info);
so_aclrtGetStreamOverflowSwitch_t so_aclrtGetStreamOverflowSwitch;
typedef aclError(*so_aclrtGetStreamOverflowSwitch_t)(aclrtStream stream, uint32_t* flag);
so_aclrtGetTaskIdFromExceptionInfo_t so_aclrtGetTaskIdFromExceptionInfo;
typedef uint32_t(*so_aclrtGetTaskIdFromExceptionInfo_t)(const aclrtExceptionInfo* info);
so_aclrtGetThreadIdFromExceptionInfo_t so_aclrtGetThreadIdFromExceptionInfo;
typedef uint32_t(*so_aclrtGetThreadIdFromExceptionInfo_t)(const aclrtExceptionInfo* info);
so_aclrtGetVersion_t so_aclrtGetVersion;
typedef aclError(*so_aclrtGetVersion_t)(int32_t* majorVersion, int32_t* minorVersion, int32_t* patchVersion);
so_aclrtLaunchCallback_t so_aclrtLaunchCallback;
typedef aclError(*so_aclrtLaunchCallback_t)(aclrtCallback fn, void* userData, aclrtCallbackBlockType blockType, aclrtStream stream);
so_aclrtLaunchKernel_t so_aclrtLaunchKernel;
typedef aclError(*so_aclrtLaunchKernel_t)(aclrtFuncHandle funcHandle, uint32_t blockDim, const void* argsData, size_t argsSize, aclrtStream stream);
so_aclrtMalloc_t so_aclrtMalloc;
typedef aclError(*so_aclrtMalloc_t)(void** devPtr, size_t size, aclrtMemMallocPolicy policy);
so_aclrtMallocAlign32_t so_aclrtMallocAlign32;
typedef aclError(*so_aclrtMallocAlign32_t)(void** devPtr, size_t size, aclrtMemMallocPolicy policy);
so_aclrtMallocCached_t so_aclrtMallocCached;
typedef aclError(*so_aclrtMallocCached_t)(void** devPtr, size_t size, aclrtMemMallocPolicy policy);
so_aclrtMallocHost_t so_aclrtMallocHost;
typedef aclError(*so_aclrtMallocHost_t)(void** hostPtr, size_t size);
so_aclrtMallocPhysical_t so_aclrtMallocPhysical;
typedef aclError(*so_aclrtMallocPhysical_t)(aclrtDrvMemHandle* handle, size_t size, const aclrtPhysicalMemProp* prop, uint64_t flags);
so_aclrtMapMem_t so_aclrtMapMem;
typedef aclError(*so_aclrtMapMem_t)(void* virPtr, size_t size, size_t offset, aclrtDrvMemHandle handle, uint64_t flags);
so_aclrtMemExportToShareableHandle_t so_aclrtMemExportToShareableHandle;
typedef aclError(*so_aclrtMemExportToShareableHandle_t)(aclrtDrvMemHandle handle, aclrtMemHandleType handleType, uint64_t flags, uint64_t* shareableHandle);
so_aclrtMemFlush_t so_aclrtMemFlush;
typedef aclError(*so_aclrtMemFlush_t)(void* devPtr, size_t size);
so_aclrtMemGetAllocationGranularity_t so_aclrtMemGetAllocationGranularity;
typedef aclError(*so_aclrtMemGetAllocationGranularity_t)(aclrtPhysicalMemProp* prop, aclrtMemGranularityOptions option, size_t* granularity);
so_aclrtMemImportFromShareableHandle_t so_aclrtMemImportFromShareableHandle;
typedef aclError(*so_aclrtMemImportFromShareableHandle_t)(uint64_t shareableHandle, int32_t deviceId, aclrtDrvMemHandle* handle);
so_aclrtMemInvalidate_t so_aclrtMemInvalidate;
typedef aclError(*so_aclrtMemInvalidate_t)(void* devPtr, size_t size);
so_aclrtMemSetPidToShareableHandle_t so_aclrtMemSetPidToShareableHandle;
typedef aclError(*so_aclrtMemSetPidToShareableHandle_t)(uint64_t shareableHandle, int32_t* pid, size_t pidNum);
so_aclrtMemcpy_t so_aclrtMemcpy;
typedef aclError(*so_aclrtMemcpy_t)(void* dst, size_t destMax, const void* src, size_t count, aclrtMemcpyKind kind);
so_aclrtMemcpy2d_t so_aclrtMemcpy2d;
typedef aclError(*so_aclrtMemcpy2d_t)(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, aclrtMemcpyKind kind);
so_aclrtMemcpy2dAsync_t so_aclrtMemcpy2dAsync;
typedef aclError(*so_aclrtMemcpy2dAsync_t)(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, aclrtMemcpyKind kind, aclrtStream stream);
so_aclrtMemcpyAsync_t so_aclrtMemcpyAsync;
typedef aclError(*so_aclrtMemcpyAsync_t)(void* dst, size_t destMax, const void* src, size_t count, aclrtMemcpyKind kind, aclrtStream stream);
so_aclrtMemset_t so_aclrtMemset;
typedef aclError(*so_aclrtMemset_t)(void* devPtr, size_t maxCount, int32_t value, size_t count);
so_aclrtMemsetAsync_t so_aclrtMemsetAsync;
typedef aclError(*so_aclrtMemsetAsync_t)(void* devPtr, size_t maxCount, int32_t value, size_t count, aclrtStream stream);
so_aclrtProcessReport_t so_aclrtProcessReport;
typedef aclError(*so_aclrtProcessReport_t)(int32_t timeout);
so_aclrtQueryDeviceStatus_t so_aclrtQueryDeviceStatus;
typedef aclError(*so_aclrtQueryDeviceStatus_t)(int32_t deviceId, aclrtDeviceStatus* deviceStatus);
so_aclrtQueryEvent_t so_aclrtQueryEvent;
typedef aclError(*so_aclrtQueryEvent_t)(aclrtEvent event, aclrtEventStatus* status);
so_aclrtQueryEventStatus_t so_aclrtQueryEventStatus;
typedef aclError(*so_aclrtQueryEventStatus_t)(aclrtEvent event, aclrtEventRecordedStatus* status);
so_aclrtQueryEventWaitStatus_t so_aclrtQueryEventWaitStatus;
typedef aclError(*so_aclrtQueryEventWaitStatus_t)(aclrtEvent event, aclrtEventWaitStatus* status);
so_aclrtRecordEvent_t so_aclrtRecordEvent;
typedef aclError(*so_aclrtRecordEvent_t)(aclrtEvent event, aclrtStream stream);
so_aclrtReleaseMemAddress_t so_aclrtReleaseMemAddress;
typedef aclError(*so_aclrtReleaseMemAddress_t)(void* virPtr);
so_aclrtReserveMemAddress_t so_aclrtReserveMemAddress;
typedef aclError(*so_aclrtReserveMemAddress_t)(void** virPtr, size_t size, size_t alignment, void* expectPtr, uint64_t flags);
aclrtResetD- cnt == 0
so_aclrtSetDevice_t so_aclrtSetDevice;
typedef aclError(*so_aclrtSetDevice_t)(int32_t deviceId);
so_aclrtSetDeviceSatMode_t so_aclrtSetDeviceSatMode;
typedef aclError(*so_aclrtSetDeviceSatMode_t)(aclrtFloatOverflowMode mode);
aclrtSetDeviceWithoutTsdVXX cnt == 0
so_aclrtSetExceptionInfoCallback_t so_aclrtSetExceptionInfoCallback;
typedef aclError(*so_aclrtSetExceptionInfoCallback_t)(aclrtExceptionInfoCallback callback);
so_aclrtSetGroup_t so_aclrtSetGroup;
typedef aclError(*so_aclrtSetGroup_t)(int32_t groupId);
so_aclrtSetOpExecuteTimeOut_t so_aclrtSetOpExecuteTimeOut;
typedef aclError(*so_aclrtSetOpExecuteTimeOut_t)(uint32_t timeout);
so_aclrtSetOpWaitTimeout_t so_aclrtSetOpWaitTimeout;
typedef aclError(*so_aclrtSetOpWaitTimeout_t)(uint32_t timeout);
so_aclrtSetStreamFailureMode_t so_aclrtSetStreamFailureMode;
typedef aclError(*so_aclrtSetStreamFailureMode_t)(aclrtStream stream, uint64_t mode);
so_aclrtSetStreamOverflowSwitch_t so_aclrtSetStreamOverflowSwitch;
typedef aclError(*so_aclrtSetStreamOverflowSwitch_t)(aclrtStream stream, uint32_t flag);
so_aclrtSetTsDevice_t so_aclrtSetTsDevice;
typedef aclError(*so_aclrtSetTsDevice_t)(aclrtTsId tsId);
so_aclrtStreamQuery_t so_aclrtStreamQuery;
typedef aclError(*so_aclrtStreamQuery_t)(aclrtStream stream, aclrtStreamStatus* status);
so_aclrtStreamWaitEvent_t so_aclrtStreamWaitEvent;
typedef aclError(*so_aclrtStreamWaitEvent_t)(aclrtStream stream, aclrtEvent event);
so_aclrtSubscribeReport_t so_aclrtSubscribeReport;
typedef aclError(*so_aclrtSubscribeReport_t)(uint64_t threadId, aclrtStream stream);
so_aclrtSynchronizeDevice_t so_aclrtSynchronizeDevice;
typedef aclError(*so_aclrtSynchronizeDevice_t)();
so_aclrtSynchronizeEvent_t so_aclrtSynchronizeEvent;
typedef aclError(*so_aclrtSynchronizeEvent_t)(aclrtEvent event);
so_aclrtSynchronizeEventWithTimeout_t so_aclrtSynchronizeEventWithTimeout;
typedef aclError(*so_aclrtSynchronizeEventWithTimeout_t)(aclrtEvent event, int32_t timeout);
so_aclrtSynchronizeStream_t so_aclrtSynchronizeStream;
typedef aclError(*so_aclrtSynchronizeStream_t)(aclrtStream stream);
so_aclrtSynchronizeStreamWithTimeout_t so_aclrtSynchronizeStreamWithTimeout;
typedef aclError(*so_aclrtSynchronizeStreamWithTimeout_t)(aclrtStream stream, int32_t timeout);
so_aclrtUnSubscribeReport_t so_aclrtUnSubscribeReport;
typedef aclError(*so_aclrtUnSubscribeReport_t)(uint64_t threadId, aclrtStream stream);
so_aclrtUnmapMem_t so_aclrtUnmapMem;
typedef aclError(*so_aclrtUnmapMem_t)(void* virPtr);
do{ so_aclAppLog = (so_aclAppLog_t)(dlsym(so_handle, "aclAppLog")); assert(so_aclAppLog != 
# 613 "tmp.cpp" 3 4
__null
# 613 "tmp.cpp"
); } while(0);
do{ so_aclCreateDataBuffer = (so_aclCreateDataBuffer_t)(dlsym(so_handle, "aclCreateDataBuffer")); assert(so_aclCreateDataBuffer != 
# 614 "tmp.cpp" 3 4
__null
# 614 "tmp.cpp"
); } while(0);
do{ so_aclCreateGraphDumpOpt = (so_aclCreateGraphDumpOpt_t)(dlsym(so_handle, "aclCreateGraphDumpOpt")); assert(so_aclCreateGraphDumpOpt != 
# 615 "tmp.cpp" 3 4
__null
# 615 "tmp.cpp"
); } while(0);
do{ so_aclCreateTensorDesc = (so_aclCreateTensorDesc_t)(dlsym(so_handle, "aclCreateTensorDesc")); assert(so_aclCreateTensorDesc != 
# 616 "tmp.cpp" 3 4
__null
# 616 "tmp.cpp"
); } while(0);
do{ so_aclDataTypeSize = (so_aclDataTypeSize_t)(dlsym(so_handle, "aclDataTypeSize")); assert(so_aclDataTypeSize != 
# 617 "tmp.cpp" 3 4
__null
# 617 "tmp.cpp"
); } while(0);
do{ so_aclDestroyDataBuffer = (so_aclDestroyDataBuffer_t)(dlsym(so_handle, "aclDestroyDataBuffer")); assert(so_aclDestroyDataBuffer != 
# 618 "tmp.cpp" 3 4
__null
# 618 "tmp.cpp"
); } while(0);
do{ so_aclDestroyGraphDumpOpt = (so_aclDestroyGraphDumpOpt_t)(dlsym(so_handle, "aclDestroyGraphDumpOpt")); assert(so_aclDestroyGraphDumpOpt != 
# 619 "tmp.cpp" 3 4
__null
# 619 "tmp.cpp"
); } while(0);
do{ so_aclDestroyTensorDesc = (so_aclDestroyTensorDesc_t)(dlsym(so_handle, "aclDestroyTensorDesc")); assert(so_aclDestroyTensorDesc != 
# 620 "tmp.cpp" 3 4
__null
# 620 "tmp.cpp"
); } while(0);
do{ so_aclFinalize = (so_aclFinalize_t)(dlsym(so_handle, "aclFinalize")); assert(so_aclFinalize != 
# 621 "tmp.cpp" 3 4
__null
# 621 "tmp.cpp"
); } while(0);
do{ so_aclFloat16ToFloat = (so_aclFloat16ToFloat_t)(dlsym(so_handle, "aclFloat16ToFloat")); assert(so_aclFloat16ToFloat != 
# 622 "tmp.cpp" 3 4
__null
# 622 "tmp.cpp"
); } while(0);
do{ so_aclFloatToFloat16 = (so_aclFloatToFloat16_t)(dlsym(so_handle, "aclFloatToFloat16")); assert(so_aclFloatToFloat16 != 
# 623 "tmp.cpp" 3 4
__null
# 623 "tmp.cpp"
); } while(0);
do{ so_aclGenGraphAndDumpForOp = (so_aclGenGraphAndDumpForOp_t)(dlsym(so_handle, "aclGenGraphAndDumpForOp")); assert(so_aclGenGraphAndDumpForOp != 
# 624 "tmp.cpp" 3 4
__null
# 624 "tmp.cpp"
); } while(0);
do{ so_aclGetCannAttribute = (so_aclGetCannAttribute_t)(dlsym(so_handle, "aclGetCannAttribute")); assert(so_aclGetCannAttribute != 
# 625 "tmp.cpp" 3 4
__null
# 625 "tmp.cpp"
); } while(0);
do{ so_aclGetCannAttributeList = (so_aclGetCannAttributeList_t)(dlsym(so_handle, "aclGetCannAttributeList")); assert(so_aclGetCannAttributeList != 
# 626 "tmp.cpp" 3 4
__null
# 626 "tmp.cpp"
); } while(0);
do{ so_aclGetCompileopt = (so_aclGetCompileopt_t)(dlsym(so_handle, "aclGetCompileopt")); assert(so_aclGetCompileopt != 
# 627 "tmp.cpp" 3 4
__null
# 627 "tmp.cpp"
); } while(0);
do{ so_aclGetCompileoptSize = (so_aclGetCompileoptSize_t)(dlsym(so_handle, "aclGetCompileoptSize")); assert(so_aclGetCompileoptSize != 
# 628 "tmp.cpp" 3 4
__null
# 628 "tmp.cpp"
); } while(0);
do{ so_aclGetDataBufferAddr = (so_aclGetDataBufferAddr_t)(dlsym(so_handle, "aclGetDataBufferAddr")); assert(so_aclGetDataBufferAddr != 
# 629 "tmp.cpp" 3 4
__null
# 629 "tmp.cpp"
); } while(0);
do{ so_aclGetDataBufferSize = (so_aclGetDataBufferSize_t)(dlsym(so_handle, "aclGetDataBufferSize")); assert(so_aclGetDataBufferSize != 
# 630 "tmp.cpp" 3 4
__null
# 630 "tmp.cpp"
); } while(0);
do{ so_aclGetDataBufferSizeV2 = (so_aclGetDataBufferSizeV2_t)(dlsym(so_handle, "aclGetDataBufferSizeV2")); assert(so_aclGetDataBufferSizeV2 != 
# 631 "tmp.cpp" 3 4
__null
# 631 "tmp.cpp"
); } while(0);
do{ so_aclGetDeviceCapability = (so_aclGetDeviceCapability_t)(dlsym(so_handle, "aclGetDeviceCapability")); assert(so_aclGetDeviceCapability != 
# 632 "tmp.cpp" 3 4
__null
# 632 "tmp.cpp"
); } while(0);
do{ so_aclGetRecentErrMsg = (so_aclGetRecentErrMsg_t)(dlsym(so_handle, "aclGetRecentErrMsg")); assert(so_aclGetRecentErrMsg != 
# 633 "tmp.cpp" 3 4
__null
# 633 "tmp.cpp"
); } while(0);
do{ so_aclGetTensorDescAddress = (so_aclGetTensorDescAddress_t)(dlsym(so_handle, "aclGetTensorDescAddress")); assert(so_aclGetTensorDescAddress != 
# 634 "tmp.cpp" 3 4
__null
# 634 "tmp.cpp"
); } while(0);
do{ so_aclGetTensorDescByIndex = (so_aclGetTensorDescByIndex_t)(dlsym(so_handle, "aclGetTensorDescByIndex")); assert(so_aclGetTensorDescByIndex != 
# 635 "tmp.cpp" 3 4
__null
# 635 "tmp.cpp"
); } while(0);
do{ so_aclGetTensorDescDim = (so_aclGetTensorDescDim_t)(dlsym(so_handle, "aclGetTensorDescDim")); assert(so_aclGetTensorDescDim != 
# 636 "tmp.cpp" 3 4
__null
# 636 "tmp.cpp"
); } while(0);
do{ so_aclGetTensorDescDimRange = (so_aclGetTensorDescDimRange_t)(dlsym(so_handle, "aclGetTensorDescDimRange")); assert(so_aclGetTensorDescDimRange != 
# 637 "tmp.cpp" 3 4
__null
# 637 "tmp.cpp"
); } while(0);
do{ so_aclGetTensorDescDimV2 = (so_aclGetTensorDescDimV2_t)(dlsym(so_handle, "aclGetTensorDescDimV2")); assert(so_aclGetTensorDescDimV2 != 
# 638 "tmp.cpp" 3 4
__null
# 638 "tmp.cpp"
); } while(0);
do{ so_aclGetTensorDescElementCount = (so_aclGetTensorDescElementCount_t)(dlsym(so_handle, "aclGetTensorDescElementCount")); assert(so_aclGetTensorDescElementCount != 
# 639 "tmp.cpp" 3 4
__null
# 639 "tmp.cpp"
); } while(0);
do{ so_aclGetTensorDescFormat = (so_aclGetTensorDescFormat_t)(dlsym(so_handle, "aclGetTensorDescFormat")); assert(so_aclGetTensorDescFormat != 
# 640 "tmp.cpp" 3 4
__null
# 640 "tmp.cpp"
); } while(0);
do{ so_aclGetTensorDescName = (so_aclGetTensorDescName_t)(dlsym(so_handle, "aclGetTensorDescName")); assert(so_aclGetTensorDescName != 
# 641 "tmp.cpp" 3 4
__null
# 641 "tmp.cpp"
); } while(0);
do{ so_aclGetTensorDescNumDims = (so_aclGetTensorDescNumDims_t)(dlsym(so_handle, "aclGetTensorDescNumDims")); assert(so_aclGetTensorDescNumDims != 
# 642 "tmp.cpp" 3 4
__null
# 642 "tmp.cpp"
); } while(0);
do{ so_aclGetTensorDescSize = (so_aclGetTensorDescSize_t)(dlsym(so_handle, "aclGetTensorDescSize")); assert(so_aclGetTensorDescSize != 
# 643 "tmp.cpp" 3 4
__null
# 643 "tmp.cpp"
); } while(0);
do{ so_aclGetTensorDescType = (so_aclGetTensorDescType_t)(dlsym(so_handle, "aclGetTensorDescType")); assert(so_aclGetTensorDescType != 
# 644 "tmp.cpp" 3 4
__null
# 644 "tmp.cpp"
); } while(0);
do{ so_aclInit = (so_aclInit_t)(dlsym(so_handle, "aclInit")); assert(so_aclInit != 
# 645 "tmp.cpp" 3 4
__null
# 645 "tmp.cpp"
); } while(0);
do{ so_aclSetCompileopt = (so_aclSetCompileopt_t)(dlsym(so_handle, "aclSetCompileopt")); assert(so_aclSetCompileopt != 
# 646 "tmp.cpp" 3 4
__null
# 646 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorConst = (so_aclSetTensorConst_t)(dlsym(so_handle, "aclSetTensorConst")); assert(so_aclSetTensorConst != 
# 647 "tmp.cpp" 3 4
__null
# 647 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorDescName = (so_aclSetTensorDescName_t)(dlsym(so_handle, "aclSetTensorDescName")); assert(so_aclSetTensorDescName != 
# 648 "tmp.cpp" 3 4
__null
# 648 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorDynamicInput = (so_aclSetTensorDynamicInput_t)(dlsym(so_handle, "aclSetTensorDynamicInput")); assert(so_aclSetTensorDynamicInput != 
# 649 "tmp.cpp" 3 4
__null
# 649 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorFormat = (so_aclSetTensorFormat_t)(dlsym(so_handle, "aclSetTensorFormat")); assert(so_aclSetTensorFormat != 
# 650 "tmp.cpp" 3 4
__null
# 650 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorOriginFormat = (so_aclSetTensorOriginFormat_t)(dlsym(so_handle, "aclSetTensorOriginFormat")); assert(so_aclSetTensorOriginFormat != 
# 651 "tmp.cpp" 3 4
__null
# 651 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorOriginShape = (so_aclSetTensorOriginShape_t)(dlsym(so_handle, "aclSetTensorOriginShape")); assert(so_aclSetTensorOriginShape != 
# 652 "tmp.cpp" 3 4
__null
# 652 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorPlaceMent = (so_aclSetTensorPlaceMent_t)(dlsym(so_handle, "aclSetTensorPlaceMent")); assert(so_aclSetTensorPlaceMent != 
# 653 "tmp.cpp" 3 4
__null
# 653 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorShape = (so_aclSetTensorShape_t)(dlsym(so_handle, "aclSetTensorShape")); assert(so_aclSetTensorShape != 
# 654 "tmp.cpp" 3 4
__null
# 654 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorShapeRange = (so_aclSetTensorShapeRange_t)(dlsym(so_handle, "aclSetTensorShapeRange")); assert(so_aclSetTensorShapeRange != 
# 655 "tmp.cpp" 3 4
__null
# 655 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorStorageFormat = (so_aclSetTensorStorageFormat_t)(dlsym(so_handle, "aclSetTensorStorageFormat")); assert(so_aclSetTensorStorageFormat != 
# 656 "tmp.cpp" 3 4
__null
# 656 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorStorageShape = (so_aclSetTensorStorageShape_t)(dlsym(so_handle, "aclSetTensorStorageShape")); assert(so_aclSetTensorStorageShape != 
# 657 "tmp.cpp" 3 4
__null
# 657 "tmp.cpp"
); } while(0);
do{ so_aclSetTensorValueRange = (so_aclSetTensorValueRange_t)(dlsym(so_handle, "aclSetTensorValueRange")); assert(so_aclSetTensorValueRange != 
# 658 "tmp.cpp" 3 4
__null
# 658 "tmp.cpp"
); } while(0);
do{ so_aclTransTensorDescFormat = (so_aclTransTensorDescFormat_t)(dlsym(so_handle, "aclTransTensorDescFormat")); assert(so_aclTransTensorDescFormat != 
# 659 "tmp.cpp" 3 4
__null
# 659 "tmp.cpp"
); } while(0);
do{ so_aclUpdateDataBuffer = (so_aclUpdateDataBuffer_t)(dlsym(so_handle, "aclUpdateDataBuffer")); assert(so_aclUpdateDataBuffer != 
# 660 "tmp.cpp" 3 4
__null
# 660 "tmp.cpp"
); } while(0);
do{ so_aclmdlAddDatasetBuffer = (so_aclmdlAddDatasetBuffer_t)(dlsym(so_handle, "aclmdlAddDatasetBuffer")); assert(so_aclmdlAddDatasetBuffer != 
# 661 "tmp.cpp" 3 4
__null
# 661 "tmp.cpp"
); } while(0);
do{ so_aclmdlCreateAIPP = (so_aclmdlCreateAIPP_t)(dlsym(so_handle, "aclmdlCreateAIPP")); assert(so_aclmdlCreateAIPP != 
# 662 "tmp.cpp" 3 4
__null
# 662 "tmp.cpp"
); } while(0);
do{ so_aclmdlCreateAndGetOpDesc = (so_aclmdlCreateAndGetOpDesc_t)(dlsym(so_handle, "aclmdlCreateAndGetOpDesc")); assert(so_aclmdlCreateAndGetOpDesc != 
# 663 "tmp.cpp" 3 4
__null
# 663 "tmp.cpp"
); } while(0);
do{ so_aclmdlCreateConfigHandle = (so_aclmdlCreateConfigHandle_t)(dlsym(so_handle, "aclmdlCreateConfigHandle")); assert(so_aclmdlCreateConfigHandle != 
# 664 "tmp.cpp" 3 4
__null
# 664 "tmp.cpp"
); } while(0);
do{ so_aclmdlCreateDataset = (so_aclmdlCreateDataset_t)(dlsym(so_handle, "aclmdlCreateDataset")); assert(so_aclmdlCreateDataset != 
# 665 "tmp.cpp" 3 4
__null
# 665 "tmp.cpp"
); } while(0);
do{ so_aclmdlCreateDesc = (so_aclmdlCreateDesc_t)(dlsym(so_handle, "aclmdlCreateDesc")); assert(so_aclmdlCreateDesc != 
# 666 "tmp.cpp" 3 4
__null
# 666 "tmp.cpp"
); } while(0);
do{ so_aclmdlCreateExecConfigHandle = (so_aclmdlCreateExecConfigHandle_t)(dlsym(so_handle, "aclmdlCreateExecConfigHandle")); assert(so_aclmdlCreateExecConfigHandle != 
# 667 "tmp.cpp" 3 4
__null
# 667 "tmp.cpp"
); } while(0);
do{ so_aclmdlDestroyAIPP = (so_aclmdlDestroyAIPP_t)(dlsym(so_handle, "aclmdlDestroyAIPP")); assert(so_aclmdlDestroyAIPP != 
# 668 "tmp.cpp" 3 4
__null
# 668 "tmp.cpp"
); } while(0);
do{ so_aclmdlDestroyConfigHandle = (so_aclmdlDestroyConfigHandle_t)(dlsym(so_handle, "aclmdlDestroyConfigHandle")); assert(so_aclmdlDestroyConfigHandle != 
# 669 "tmp.cpp" 3 4
__null
# 669 "tmp.cpp"
); } while(0);
do{ so_aclmdlDestroyDataset = (so_aclmdlDestroyDataset_t)(dlsym(so_handle, "aclmdlDestroyDataset")); assert(so_aclmdlDestroyDataset != 
# 670 "tmp.cpp" 3 4
__null
# 670 "tmp.cpp"
); } while(0);
do{ so_aclmdlDestroyDesc = (so_aclmdlDestroyDesc_t)(dlsym(so_handle, "aclmdlDestroyDesc")); assert(so_aclmdlDestroyDesc != 
# 671 "tmp.cpp" 3 4
__null
# 671 "tmp.cpp"
); } while(0);
do{ so_aclmdlDestroyExecConfigHandle = (so_aclmdlDestroyExecConfigHandle_t)(dlsym(so_handle, "aclmdlDestroyExecConfigHandle")); assert(so_aclmdlDestroyExecConfigHandle != 
# 672 "tmp.cpp" 3 4
__null
# 672 "tmp.cpp"
); } while(0);
do{ so_aclmdlExecute = (so_aclmdlExecute_t)(dlsym(so_handle, "aclmdlExecute")); assert(so_aclmdlExecute != 
# 673 "tmp.cpp" 3 4
__null
# 673 "tmp.cpp"
); } while(0);
do{ so_aclmdlExecuteAsync = (so_aclmdlExecuteAsync_t)(dlsym(so_handle, "aclmdlExecuteAsync")); assert(so_aclmdlExecuteAsync != 
# 674 "tmp.cpp" 3 4
__null
# 674 "tmp.cpp"
); } while(0);
do{ so_aclmdlExecuteV2 = (so_aclmdlExecuteV2_t)(dlsym(so_handle, "aclmdlExecuteV2")); assert(so_aclmdlExecuteV2 != 
# 675 "tmp.cpp" 3 4
__null
# 675 "tmp.cpp"
); } while(0);
do{ so_aclmdlFinalizeDump = (so_aclmdlFinalizeDump_t)(dlsym(so_handle, "aclmdlFinalizeDump")); assert(so_aclmdlFinalizeDump != 
# 676 "tmp.cpp" 3 4
__null
# 676 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetAippDataSize = (so_aclmdlGetAippDataSize_t)(dlsym(so_handle, "aclmdlGetAippDataSize")); assert(so_aclmdlGetAippDataSize != 
# 677 "tmp.cpp" 3 4
__null
# 677 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetAippType = (so_aclmdlGetAippType_t)(dlsym(so_handle, "aclmdlGetAippType")); assert(so_aclmdlGetAippType != 
# 678 "tmp.cpp" 3 4
__null
# 678 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetCurOutputDims = (so_aclmdlGetCurOutputDims_t)(dlsym(so_handle, "aclmdlGetCurOutputDims")); assert(so_aclmdlGetCurOutputDims != 
# 679 "tmp.cpp" 3 4
__null
# 679 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetDatasetBuffer = (so_aclmdlGetDatasetBuffer_t)(dlsym(so_handle, "aclmdlGetDatasetBuffer")); assert(so_aclmdlGetDatasetBuffer != 
# 680 "tmp.cpp" 3 4
__null
# 680 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetDatasetNumBuffers = (so_aclmdlGetDatasetNumBuffers_t)(dlsym(so_handle, "aclmdlGetDatasetNumBuffers")); assert(so_aclmdlGetDatasetNumBuffers != 
# 681 "tmp.cpp" 3 4
__null
# 681 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetDatasetTensorDesc = (so_aclmdlGetDatasetTensorDesc_t)(dlsym(so_handle, "aclmdlGetDatasetTensorDesc")); assert(so_aclmdlGetDatasetTensorDesc != 
# 682 "tmp.cpp" 3 4
__null
# 682 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetDesc = (so_aclmdlGetDesc_t)(dlsym(so_handle, "aclmdlGetDesc")); assert(so_aclmdlGetDesc != 
# 683 "tmp.cpp" 3 4
__null
# 683 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetDynamicBatch = (so_aclmdlGetDynamicBatch_t)(dlsym(so_handle, "aclmdlGetDynamicBatch")); assert(so_aclmdlGetDynamicBatch != 
# 684 "tmp.cpp" 3 4
__null
# 684 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetDynamicHW = (so_aclmdlGetDynamicHW_t)(dlsym(so_handle, "aclmdlGetDynamicHW")); assert(so_aclmdlGetDynamicHW != 
# 685 "tmp.cpp" 3 4
__null
# 685 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetFirstAippInfo = (so_aclmdlGetFirstAippInfo_t)(dlsym(so_handle, "aclmdlGetFirstAippInfo")); assert(so_aclmdlGetFirstAippInfo != 
# 686 "tmp.cpp" 3 4
__null
# 686 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetInputDataType = (so_aclmdlGetInputDataType_t)(dlsym(so_handle, "aclmdlGetInputDataType")); assert(so_aclmdlGetInputDataType != 
# 687 "tmp.cpp" 3 4
__null
# 687 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetInputDims = (so_aclmdlGetInputDims_t)(dlsym(so_handle, "aclmdlGetInputDims")); assert(so_aclmdlGetInputDims != 
# 688 "tmp.cpp" 3 4
__null
# 688 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetInputDimsV2 = (so_aclmdlGetInputDimsV2_t)(dlsym(so_handle, "aclmdlGetInputDimsV2")); assert(so_aclmdlGetInputDimsV2 != 
# 689 "tmp.cpp" 3 4
__null
# 689 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetInputDynamicDims = (so_aclmdlGetInputDynamicDims_t)(dlsym(so_handle, "aclmdlGetInputDynamicDims")); assert(so_aclmdlGetInputDynamicDims != 
# 690 "tmp.cpp" 3 4
__null
# 690 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetInputDynamicGearCount = (so_aclmdlGetInputDynamicGearCount_t)(dlsym(so_handle, "aclmdlGetInputDynamicGearCount")); assert(so_aclmdlGetInputDynamicGearCount != 
# 691 "tmp.cpp" 3 4
__null
# 691 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetInputFormat = (so_aclmdlGetInputFormat_t)(dlsym(so_handle, "aclmdlGetInputFormat")); assert(so_aclmdlGetInputFormat != 
# 692 "tmp.cpp" 3 4
__null
# 692 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetInputIndexByName = (so_aclmdlGetInputIndexByName_t)(dlsym(so_handle, "aclmdlGetInputIndexByName")); assert(so_aclmdlGetInputIndexByName != 
# 693 "tmp.cpp" 3 4
__null
# 693 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetInputNameByIndex = (so_aclmdlGetInputNameByIndex_t)(dlsym(so_handle, "aclmdlGetInputNameByIndex")); assert(so_aclmdlGetInputNameByIndex != 
# 694 "tmp.cpp" 3 4
__null
# 694 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetInputSizeByIndex = (so_aclmdlGetInputSizeByIndex_t)(dlsym(so_handle, "aclmdlGetInputSizeByIndex")); assert(so_aclmdlGetInputSizeByIndex != 
# 695 "tmp.cpp" 3 4
__null
# 695 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetNumInputs = (so_aclmdlGetNumInputs_t)(dlsym(so_handle, "aclmdlGetNumInputs")); assert(so_aclmdlGetNumInputs != 
# 696 "tmp.cpp" 3 4
__null
# 696 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetNumOutputs = (so_aclmdlGetNumOutputs_t)(dlsym(so_handle, "aclmdlGetNumOutputs")); assert(so_aclmdlGetNumOutputs != 
# 697 "tmp.cpp" 3 4
__null
# 697 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetOpAttr = (so_aclmdlGetOpAttr_t)(dlsym(so_handle, "aclmdlGetOpAttr")); assert(so_aclmdlGetOpAttr != 
# 698 "tmp.cpp" 3 4
__null
# 698 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetOutputDataType = (so_aclmdlGetOutputDataType_t)(dlsym(so_handle, "aclmdlGetOutputDataType")); assert(so_aclmdlGetOutputDataType != 
# 699 "tmp.cpp" 3 4
__null
# 699 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetOutputDims = (so_aclmdlGetOutputDims_t)(dlsym(so_handle, "aclmdlGetOutputDims")); assert(so_aclmdlGetOutputDims != 
# 700 "tmp.cpp" 3 4
__null
# 700 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetOutputFormat = (so_aclmdlGetOutputFormat_t)(dlsym(so_handle, "aclmdlGetOutputFormat")); assert(so_aclmdlGetOutputFormat != 
# 701 "tmp.cpp" 3 4
__null
# 701 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetOutputIndexByName = (so_aclmdlGetOutputIndexByName_t)(dlsym(so_handle, "aclmdlGetOutputIndexByName")); assert(so_aclmdlGetOutputIndexByName != 
# 702 "tmp.cpp" 3 4
__null
# 702 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetOutputNameByIndex = (so_aclmdlGetOutputNameByIndex_t)(dlsym(so_handle, "aclmdlGetOutputNameByIndex")); assert(so_aclmdlGetOutputNameByIndex != 
# 703 "tmp.cpp" 3 4
__null
# 703 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetOutputSizeByIndex = (so_aclmdlGetOutputSizeByIndex_t)(dlsym(so_handle, "aclmdlGetOutputSizeByIndex")); assert(so_aclmdlGetOutputSizeByIndex != 
# 704 "tmp.cpp" 3 4
__null
# 704 "tmp.cpp"
); } while(0);
do{ so_aclmdlGetTensorRealName = (so_aclmdlGetTensorRealName_t)(dlsym(so_handle, "aclmdlGetTensorRealName")); assert(so_aclmdlGetTensorRealName != 
# 705 "tmp.cpp" 3 4
__null
# 705 "tmp.cpp"
); } while(0);
do{ so_aclmdlInitDump = (so_aclmdlInitDump_t)(dlsym(so_handle, "aclmdlInitDump")); assert(so_aclmdlInitDump != 
# 706 "tmp.cpp" 3 4
__null
# 706 "tmp.cpp"
); } while(0);
do{ so_aclmdlLoadFromFile = (so_aclmdlLoadFromFile_t)(dlsym(so_handle, "aclmdlLoadFromFile")); assert(so_aclmdlLoadFromFile != 
# 707 "tmp.cpp" 3 4
__null
# 707 "tmp.cpp"
); } while(0);
do{ so_aclmdlLoadFromFileWithMem = (so_aclmdlLoadFromFileWithMem_t)(dlsym(so_handle, "aclmdlLoadFromFileWithMem")); assert(so_aclmdlLoadFromFileWithMem != 
# 708 "tmp.cpp" 3 4
__null
# 708 "tmp.cpp"
); } while(0);
do{ so_aclmdlLoadFromFileWithQ = (so_aclmdlLoadFromFileWithQ_t)(dlsym(so_handle, "aclmdlLoadFromFileWithQ")); assert(so_aclmdlLoadFromFileWithQ != 
# 709 "tmp.cpp" 3 4
__null
# 709 "tmp.cpp"
); } while(0);
do{ so_aclmdlLoadFromMem = (so_aclmdlLoadFromMem_t)(dlsym(so_handle, "aclmdlLoadFromMem")); assert(so_aclmdlLoadFromMem != 
# 710 "tmp.cpp" 3 4
__null
# 710 "tmp.cpp"
); } while(0);
do{ so_aclmdlLoadFromMemWithMem = (so_aclmdlLoadFromMemWithMem_t)(dlsym(so_handle, "aclmdlLoadFromMemWithMem")); assert(so_aclmdlLoadFromMemWithMem != 
# 711 "tmp.cpp" 3 4
__null
# 711 "tmp.cpp"
); } while(0);
do{ so_aclmdlLoadFromMemWithQ = (so_aclmdlLoadFromMemWithQ_t)(dlsym(so_handle, "aclmdlLoadFromMemWithQ")); assert(so_aclmdlLoadFromMemWithQ != 
# 712 "tmp.cpp" 3 4
__null
# 712 "tmp.cpp"
); } while(0);
do{ so_aclmdlLoadWithConfig = (so_aclmdlLoadWithConfig_t)(dlsym(so_handle, "aclmdlLoadWithConfig")); assert(so_aclmdlLoadWithConfig != 
# 713 "tmp.cpp" 3 4
__null
# 713 "tmp.cpp"
); } while(0);
do{ so_aclmdlQuerySize = (so_aclmdlQuerySize_t)(dlsym(so_handle, "aclmdlQuerySize")); assert(so_aclmdlQuerySize != 
# 714 "tmp.cpp" 3 4
__null
# 714 "tmp.cpp"
); } while(0);
do{ so_aclmdlQuerySizeFromMem = (so_aclmdlQuerySizeFromMem_t)(dlsym(so_handle, "aclmdlQuerySizeFromMem")); assert(so_aclmdlQuerySizeFromMem != 
# 715 "tmp.cpp" 3 4
__null
# 715 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPAxSwapSwitch = (so_aclmdlSetAIPPAxSwapSwitch_t)(dlsym(so_handle, "aclmdlSetAIPPAxSwapSwitch")); assert(so_aclmdlSetAIPPAxSwapSwitch != 
# 716 "tmp.cpp" 3 4
__null
# 716 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPByInputIndex = (so_aclmdlSetAIPPByInputIndex_t)(dlsym(so_handle, "aclmdlSetAIPPByInputIndex")); assert(so_aclmdlSetAIPPByInputIndex != 
# 717 "tmp.cpp" 3 4
__null
# 717 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPCropParams = (so_aclmdlSetAIPPCropParams_t)(dlsym(so_handle, "aclmdlSetAIPPCropParams")); assert(so_aclmdlSetAIPPCropParams != 
# 718 "tmp.cpp" 3 4
__null
# 718 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPCscParams = (so_aclmdlSetAIPPCscParams_t)(dlsym(so_handle, "aclmdlSetAIPPCscParams")); assert(so_aclmdlSetAIPPCscParams != 
# 719 "tmp.cpp" 3 4
__null
# 719 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPDtcPixelMean = (so_aclmdlSetAIPPDtcPixelMean_t)(dlsym(so_handle, "aclmdlSetAIPPDtcPixelMean")); assert(so_aclmdlSetAIPPDtcPixelMean != 
# 720 "tmp.cpp" 3 4
__null
# 720 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPDtcPixelMin = (so_aclmdlSetAIPPDtcPixelMin_t)(dlsym(so_handle, "aclmdlSetAIPPDtcPixelMin")); assert(so_aclmdlSetAIPPDtcPixelMin != 
# 721 "tmp.cpp" 3 4
__null
# 721 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPInputFormat = (so_aclmdlSetAIPPInputFormat_t)(dlsym(so_handle, "aclmdlSetAIPPInputFormat")); assert(so_aclmdlSetAIPPInputFormat != 
# 722 "tmp.cpp" 3 4
__null
# 722 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPPaddingParams = (so_aclmdlSetAIPPPaddingParams_t)(dlsym(so_handle, "aclmdlSetAIPPPaddingParams")); assert(so_aclmdlSetAIPPPaddingParams != 
# 723 "tmp.cpp" 3 4
__null
# 723 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPPixelVarReci = (so_aclmdlSetAIPPPixelVarReci_t)(dlsym(so_handle, "aclmdlSetAIPPPixelVarReci")); assert(so_aclmdlSetAIPPPixelVarReci != 
# 724 "tmp.cpp" 3 4
__null
# 724 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPRbuvSwapSwitch = (so_aclmdlSetAIPPRbuvSwapSwitch_t)(dlsym(so_handle, "aclmdlSetAIPPRbuvSwapSwitch")); assert(so_aclmdlSetAIPPRbuvSwapSwitch != 
# 725 "tmp.cpp" 3 4
__null
# 725 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPScfParams = (so_aclmdlSetAIPPScfParams_t)(dlsym(so_handle, "aclmdlSetAIPPScfParams")); assert(so_aclmdlSetAIPPScfParams != 
# 726 "tmp.cpp" 3 4
__null
# 726 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetAIPPSrcImageSize = (so_aclmdlSetAIPPSrcImageSize_t)(dlsym(so_handle, "aclmdlSetAIPPSrcImageSize")); assert(so_aclmdlSetAIPPSrcImageSize != 
# 727 "tmp.cpp" 3 4
__null
# 727 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetConfigOpt = (so_aclmdlSetConfigOpt_t)(dlsym(so_handle, "aclmdlSetConfigOpt")); assert(so_aclmdlSetConfigOpt != 
# 728 "tmp.cpp" 3 4
__null
# 728 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetDatasetTensorDesc = (so_aclmdlSetDatasetTensorDesc_t)(dlsym(so_handle, "aclmdlSetDatasetTensorDesc")); assert(so_aclmdlSetDatasetTensorDesc != 
# 729 "tmp.cpp" 3 4
__null
# 729 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetDump = (so_aclmdlSetDump_t)(dlsym(so_handle, "aclmdlSetDump")); assert(so_aclmdlSetDump != 
# 730 "tmp.cpp" 3 4
__null
# 730 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetDynamicBatchSize = (so_aclmdlSetDynamicBatchSize_t)(dlsym(so_handle, "aclmdlSetDynamicBatchSize")); assert(so_aclmdlSetDynamicBatchSize != 
# 731 "tmp.cpp" 3 4
__null
# 731 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetDynamicHWSize = (so_aclmdlSetDynamicHWSize_t)(dlsym(so_handle, "aclmdlSetDynamicHWSize")); assert(so_aclmdlSetDynamicHWSize != 
# 732 "tmp.cpp" 3 4
__null
# 732 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetExecConfigOpt = (so_aclmdlSetExecConfigOpt_t)(dlsym(so_handle, "aclmdlSetExecConfigOpt")); assert(so_aclmdlSetExecConfigOpt != 
# 733 "tmp.cpp" 3 4
__null
# 733 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetInputAIPP = (so_aclmdlSetInputAIPP_t)(dlsym(so_handle, "aclmdlSetInputAIPP")); assert(so_aclmdlSetInputAIPP != 
# 734 "tmp.cpp" 3 4
__null
# 734 "tmp.cpp"
); } while(0);
do{ so_aclmdlSetInputDynamicDims = (so_aclmdlSetInputDynamicDims_t)(dlsym(so_handle, "aclmdlSetInputDynamicDims")); assert(so_aclmdlSetInputDynamicDims != 
# 735 "tmp.cpp" 3 4
__null
# 735 "tmp.cpp"
); } while(0);
do{ so_aclmdlUnload = (so_aclmdlUnload_t)(dlsym(so_handle, "aclmdlUnload")); assert(so_aclmdlUnload != 
# 736 "tmp.cpp" 3 4
__null
# 736 "tmp.cpp"
); } while(0);
do{ so_aclopCast = (so_aclopCast_t)(dlsym(so_handle, "aclopCast")); assert(so_aclopCast != 
# 737 "tmp.cpp" 3 4
__null
# 737 "tmp.cpp"
); } while(0);
do{ so_aclopCompile = (so_aclopCompile_t)(dlsym(so_handle, "aclopCompile")); assert(so_aclopCompile != 
# 738 "tmp.cpp" 3 4
__null
# 738 "tmp.cpp"
); } while(0);
do{ so_aclopCompileAndExecute = (so_aclopCompileAndExecute_t)(dlsym(so_handle, "aclopCompileAndExecute")); assert(so_aclopCompileAndExecute != 
# 739 "tmp.cpp" 3 4
__null
# 739 "tmp.cpp"
); } while(0);
do{ so_aclopCompileAndExecuteV2 = (so_aclopCompileAndExecuteV2_t)(dlsym(so_handle, "aclopCompileAndExecuteV2")); assert(so_aclopCompileAndExecuteV2 != 
# 740 "tmp.cpp" 3 4
__null
# 740 "tmp.cpp"
); } while(0);
do{ so_aclopCreateAttr = (so_aclopCreateAttr_t)(dlsym(so_handle, "aclopCreateAttr")); assert(so_aclopCreateAttr != 
# 741 "tmp.cpp" 3 4
__null
# 741 "tmp.cpp"
); } while(0);
do{ so_aclopCreateHandle = (so_aclopCreateHandle_t)(dlsym(so_handle, "aclopCreateHandle")); assert(so_aclopCreateHandle != 
# 742 "tmp.cpp" 3 4
__null
# 742 "tmp.cpp"
); } while(0);
do{ so_aclopCreateHandleForCast = (so_aclopCreateHandleForCast_t)(dlsym(so_handle, "aclopCreateHandleForCast")); assert(so_aclopCreateHandleForCast != 
# 743 "tmp.cpp" 3 4
__null
# 743 "tmp.cpp"
); } while(0);
do{ so_aclopCreateKernel = (so_aclopCreateKernel_t)(dlsym(so_handle, "aclopCreateKernel")); assert(so_aclopCreateKernel != 
# 744 "tmp.cpp" 3 4
__null
# 744 "tmp.cpp"
); } while(0);
do{ so_aclopDestroyAttr = (so_aclopDestroyAttr_t)(dlsym(so_handle, "aclopDestroyAttr")); assert(so_aclopDestroyAttr != 
# 745 "tmp.cpp" 3 4
__null
# 745 "tmp.cpp"
); } while(0);
do{ so_aclopDestroyHandle = (so_aclopDestroyHandle_t)(dlsym(so_handle, "aclopDestroyHandle")); assert(so_aclopDestroyHandle != 
# 746 "tmp.cpp" 3 4
__null
# 746 "tmp.cpp"
); } while(0);
do{ so_aclopExecWithHandle = (so_aclopExecWithHandle_t)(dlsym(so_handle, "aclopExecWithHandle")); assert(so_aclopExecWithHandle != 
# 747 "tmp.cpp" 3 4
__null
# 747 "tmp.cpp"
); } while(0);
do{ so_aclopExecute = (so_aclopExecute_t)(dlsym(so_handle, "aclopExecute")); assert(so_aclopExecute != 
# 748 "tmp.cpp" 3 4
__null
# 748 "tmp.cpp"
); } while(0);
do{ so_aclopExecuteV2 = (so_aclopExecuteV2_t)(dlsym(so_handle, "aclopExecuteV2")); assert(so_aclopExecuteV2 != 
# 749 "tmp.cpp" 3 4
__null
# 749 "tmp.cpp"
); } while(0);
do{ so_aclopInferShape = (so_aclopInferShape_t)(dlsym(so_handle, "aclopInferShape")); assert(so_aclopInferShape != 
# 750 "tmp.cpp" 3 4
__null
# 750 "tmp.cpp"
); } while(0);
do{ so_aclopLoad = (so_aclopLoad_t)(dlsym(so_handle, "aclopLoad")); assert(so_aclopLoad != 
# 751 "tmp.cpp" 3 4
__null
# 751 "tmp.cpp"
); } while(0);
do{ so_aclopRegisterCompileFunc = (so_aclopRegisterCompileFunc_t)(dlsym(so_handle, "aclopRegisterCompileFunc")); assert(so_aclopRegisterCompileFunc != 
# 752 "tmp.cpp" 3 4
__null
# 752 "tmp.cpp"
); } while(0);
do{ so_aclopSetAttrBool = (so_aclopSetAttrBool_t)(dlsym(so_handle, "aclopSetAttrBool")); assert(so_aclopSetAttrBool != 
# 753 "tmp.cpp" 3 4
__null
# 753 "tmp.cpp"
); } while(0);
do{ so_aclopSetAttrDataType = (so_aclopSetAttrDataType_t)(dlsym(so_handle, "aclopSetAttrDataType")); assert(so_aclopSetAttrDataType != 
# 754 "tmp.cpp" 3 4
__null
# 754 "tmp.cpp"
); } while(0);
do{ so_aclopSetAttrFloat = (so_aclopSetAttrFloat_t)(dlsym(so_handle, "aclopSetAttrFloat")); assert(so_aclopSetAttrFloat != 
# 755 "tmp.cpp" 3 4
__null
# 755 "tmp.cpp"
); } while(0);
do{ so_aclopSetAttrInt = (so_aclopSetAttrInt_t)(dlsym(so_handle, "aclopSetAttrInt")); assert(so_aclopSetAttrInt != 
# 756 "tmp.cpp" 3 4
__null
# 756 "tmp.cpp"
); } while(0);
do{ so_aclopSetAttrListBool = (so_aclopSetAttrListBool_t)(dlsym(so_handle, "aclopSetAttrListBool")); assert(so_aclopSetAttrListBool != 
# 757 "tmp.cpp" 3 4
__null
# 757 "tmp.cpp"
); } while(0);
do{ so_aclopSetAttrListDataType = (so_aclopSetAttrListDataType_t)(dlsym(so_handle, "aclopSetAttrListDataType")); assert(so_aclopSetAttrListDataType != 
# 758 "tmp.cpp" 3 4
__null
# 758 "tmp.cpp"
); } while(0);
do{ so_aclopSetAttrListFloat = (so_aclopSetAttrListFloat_t)(dlsym(so_handle, "aclopSetAttrListFloat")); assert(so_aclopSetAttrListFloat != 
# 759 "tmp.cpp" 3 4
__null
# 759 "tmp.cpp"
); } while(0);
do{ so_aclopSetAttrListInt = (so_aclopSetAttrListInt_t)(dlsym(so_handle, "aclopSetAttrListInt")); assert(so_aclopSetAttrListInt != 
# 760 "tmp.cpp" 3 4
__null
# 760 "tmp.cpp"
); } while(0);
do{ so_aclopSetAttrListListInt = (so_aclopSetAttrListListInt_t)(dlsym(so_handle, "aclopSetAttrListListInt")); assert(so_aclopSetAttrListListInt != 
# 761 "tmp.cpp" 3 4
__null
# 761 "tmp.cpp"
); } while(0);
do{ so_aclopSetAttrListString = (so_aclopSetAttrListString_t)(dlsym(so_handle, "aclopSetAttrListString")); assert(so_aclopSetAttrListString != 
# 762 "tmp.cpp" 3 4
__null
# 762 "tmp.cpp"
); } while(0);
do{ so_aclopSetAttrString = (so_aclopSetAttrString_t)(dlsym(so_handle, "aclopSetAttrString")); assert(so_aclopSetAttrString != 
# 763 "tmp.cpp" 3 4
__null
# 763 "tmp.cpp"
); } while(0);
do{ so_aclopSetCompileFlag = (so_aclopSetCompileFlag_t)(dlsym(so_handle, "aclopSetCompileFlag")); assert(so_aclopSetCompileFlag != 
# 764 "tmp.cpp" 3 4
__null
# 764 "tmp.cpp"
); } while(0);
do{ so_aclopSetKernelArgs = (so_aclopSetKernelArgs_t)(dlsym(so_handle, "aclopSetKernelArgs")); assert(so_aclopSetKernelArgs != 
# 765 "tmp.cpp" 3 4
__null
# 765 "tmp.cpp"
); } while(0);
do{ so_aclopSetKernelWorkspaceSizes = (so_aclopSetKernelWorkspaceSizes_t)(dlsym(so_handle, "aclopSetKernelWorkspaceSizes")); assert(so_aclopSetKernelWorkspaceSizes != 
# 766 "tmp.cpp" 3 4
__null
# 766 "tmp.cpp"
); } while(0);
do{ so_aclopSetModelDir = (so_aclopSetModelDir_t)(dlsym(so_handle, "aclopSetModelDir")); assert(so_aclopSetModelDir != 
# 767 "tmp.cpp" 3 4
__null
# 767 "tmp.cpp"
); } while(0);
do{ so_aclopStartDumpArgs = (so_aclopStartDumpArgs_t)(dlsym(so_handle, "aclopStartDumpArgs")); assert(so_aclopStartDumpArgs != 
# 768 "tmp.cpp" 3 4
__null
# 768 "tmp.cpp"
); } while(0);
do{ so_aclopStopDumpArgs = (so_aclopStopDumpArgs_t)(dlsym(so_handle, "aclopStopDumpArgs")); assert(so_aclopStopDumpArgs != 
# 769 "tmp.cpp" 3 4
__null
# 769 "tmp.cpp"
); } while(0);
do{ so_aclopUnregisterCompileFunc = (so_aclopUnregisterCompileFunc_t)(dlsym(so_handle, "aclopUnregisterCompileFunc")); assert(so_aclopUnregisterCompileFunc != 
# 770 "tmp.cpp" 3 4
__null
# 770 "tmp.cpp"
); } while(0);
do{ so_aclopUpdateParams = (so_aclopUpdateParams_t)(dlsym(so_handle, "aclopUpdateParams")); assert(so_aclopUpdateParams != 
# 771 "tmp.cpp" 3 4
__null
# 771 "tmp.cpp"
); } while(0);
do{ so_aclprofCreateConfig = (so_aclprofCreateConfig_t)(dlsym(so_handle, "aclprofCreateConfig")); assert(so_aclprofCreateConfig != 
# 772 "tmp.cpp" 3 4
__null
# 772 "tmp.cpp"
); } while(0);
do{ so_aclprofCreateStamp = (so_aclprofCreateStamp_t)(dlsym(so_handle, "aclprofCreateStamp")); assert(so_aclprofCreateStamp != 
# 773 "tmp.cpp" 3 4
__null
# 773 "tmp.cpp"
); } while(0);
do{ so_aclprofCreateStepInfo = (so_aclprofCreateStepInfo_t)(dlsym(so_handle, "aclprofCreateStepInfo")); assert(so_aclprofCreateStepInfo != 
# 774 "tmp.cpp" 3 4
__null
# 774 "tmp.cpp"
); } while(0);
do{ so_aclprofCreateSubscribeConfig = (so_aclprofCreateSubscribeConfig_t)(dlsym(so_handle, "aclprofCreateSubscribeConfig")); assert(so_aclprofCreateSubscribeConfig != 
# 775 "tmp.cpp" 3 4
__null
# 775 "tmp.cpp"
); } while(0);
do{ so_aclprofDestroyConfig = (so_aclprofDestroyConfig_t)(dlsym(so_handle, "aclprofDestroyConfig")); assert(so_aclprofDestroyConfig != 
# 776 "tmp.cpp" 3 4
__null
# 776 "tmp.cpp"
); } while(0);
do{ so_aclprofDestroyStamp = (so_aclprofDestroyStamp_t)(dlsym(so_handle, "aclprofDestroyStamp")); assert(so_aclprofDestroyStamp != 
# 777 "tmp.cpp" 3 4
__null
# 777 "tmp.cpp"
); } while(0);
do{ so_aclprofDestroyStepInfo = (so_aclprofDestroyStepInfo_t)(dlsym(so_handle, "aclprofDestroyStepInfo")); assert(so_aclprofDestroyStepInfo != 
# 778 "tmp.cpp" 3 4
__null
# 778 "tmp.cpp"
); } while(0);
do{ so_aclprofDestroySubscribeConfig = (so_aclprofDestroySubscribeConfig_t)(dlsym(so_handle, "aclprofDestroySubscribeConfig")); assert(so_aclprofDestroySubscribeConfig != 
# 779 "tmp.cpp" 3 4
__null
# 779 "tmp.cpp"
); } while(0);
do{ so_aclprofFinalize = (so_aclprofFinalize_t)(dlsym(so_handle, "aclprofFinalize")); assert(so_aclprofFinalize != 
# 780 "tmp.cpp" 3 4
__null
# 780 "tmp.cpp"
); } while(0);
do{ so_aclprofGetModelId = (so_aclprofGetModelId_t)(dlsym(so_handle, "aclprofGetModelId")); assert(so_aclprofGetModelId != 
# 781 "tmp.cpp" 3 4
__null
# 781 "tmp.cpp"
); } while(0);
do{ so_aclprofGetOpDescSize = (so_aclprofGetOpDescSize_t)(dlsym(so_handle, "aclprofGetOpDescSize")); assert(so_aclprofGetOpDescSize != 
# 782 "tmp.cpp" 3 4
__null
# 782 "tmp.cpp"
); } while(0);
do{ so_aclprofGetOpDuration = (so_aclprofGetOpDuration_t)(dlsym(so_handle, "aclprofGetOpDuration")); assert(so_aclprofGetOpDuration != 
# 783 "tmp.cpp" 3 4
__null
# 783 "tmp.cpp"
); } while(0);
do{ so_aclprofGetOpEnd = (so_aclprofGetOpEnd_t)(dlsym(so_handle, "aclprofGetOpEnd")); assert(so_aclprofGetOpEnd != 
# 784 "tmp.cpp" 3 4
__null
# 784 "tmp.cpp"
); } while(0);
do{ so_aclprofGetOpName = (so_aclprofGetOpName_t)(dlsym(so_handle, "aclprofGetOpName")); assert(so_aclprofGetOpName != 
# 785 "tmp.cpp" 3 4
__null
# 785 "tmp.cpp"
); } while(0);
do{ so_aclprofGetOpNameLen = (so_aclprofGetOpNameLen_t)(dlsym(so_handle, "aclprofGetOpNameLen")); assert(so_aclprofGetOpNameLen != 
# 786 "tmp.cpp" 3 4
__null
# 786 "tmp.cpp"
); } while(0);
do{ so_aclprofGetOpNum = (so_aclprofGetOpNum_t)(dlsym(so_handle, "aclprofGetOpNum")); assert(so_aclprofGetOpNum != 
# 787 "tmp.cpp" 3 4
__null
# 787 "tmp.cpp"
); } while(0);
do{ so_aclprofGetOpStart = (so_aclprofGetOpStart_t)(dlsym(so_handle, "aclprofGetOpStart")); assert(so_aclprofGetOpStart != 
# 788 "tmp.cpp" 3 4
__null
# 788 "tmp.cpp"
); } while(0);
do{ so_aclprofGetOpType = (so_aclprofGetOpType_t)(dlsym(so_handle, "aclprofGetOpType")); assert(so_aclprofGetOpType != 
# 789 "tmp.cpp" 3 4
__null
# 789 "tmp.cpp"
); } while(0);
do{ so_aclprofGetOpTypeLen = (so_aclprofGetOpTypeLen_t)(dlsym(so_handle, "aclprofGetOpTypeLen")); assert(so_aclprofGetOpTypeLen != 
# 790 "tmp.cpp" 3 4
__null
# 790 "tmp.cpp"
); } while(0);
do{ so_aclprofGetStepTimestamp = (so_aclprofGetStepTimestamp_t)(dlsym(so_handle, "aclprofGetStepTimestamp")); assert(so_aclprofGetStepTimestamp != 
# 791 "tmp.cpp" 3 4
__null
# 791 "tmp.cpp"
); } while(0);
do{ so_aclprofInit = (so_aclprofInit_t)(dlsym(so_handle, "aclprofInit")); assert(so_aclprofInit != 
# 792 "tmp.cpp" 3 4
__null
# 792 "tmp.cpp"
); } while(0);
do{ so_aclprofMark = (so_aclprofMark_t)(dlsym(so_handle, "aclprofMark")); assert(so_aclprofMark != 
# 793 "tmp.cpp" 3 4
__null
# 793 "tmp.cpp"
); } while(0);
do{ so_aclprofMarkEx = (so_aclprofMarkEx_t)(dlsym(so_handle, "aclprofMarkEx")); assert(so_aclprofMarkEx != 
# 794 "tmp.cpp" 3 4
__null
# 794 "tmp.cpp"
); } while(0);
do{ so_aclprofModelSubscribe = (so_aclprofModelSubscribe_t)(dlsym(so_handle, "aclprofModelSubscribe")); assert(so_aclprofModelSubscribe != 
# 795 "tmp.cpp" 3 4
__null
# 795 "tmp.cpp"
); } while(0);
do{ so_aclprofModelUnSubscribe = (so_aclprofModelUnSubscribe_t)(dlsym(so_handle, "aclprofModelUnSubscribe")); assert(so_aclprofModelUnSubscribe != 
# 796 "tmp.cpp" 3 4
__null
# 796 "tmp.cpp"
); } while(0);
do{ so_aclprofPop = (so_aclprofPop_t)(dlsym(so_handle, "aclprofPop")); assert(so_aclprofPop != 
# 797 "tmp.cpp" 3 4
__null
# 797 "tmp.cpp"
); } while(0);
do{ so_aclprofPush = (so_aclprofPush_t)(dlsym(so_handle, "aclprofPush")); assert(so_aclprofPush != 
# 798 "tmp.cpp" 3 4
__null
# 798 "tmp.cpp"
); } while(0);
do{ so_aclprofRangeStart = (so_aclprofRangeStart_t)(dlsym(so_handle, "aclprofRangeStart")); assert(so_aclprofRangeStart != 
# 799 "tmp.cpp" 3 4
__null
# 799 "tmp.cpp"
); } while(0);
do{ so_aclprofRangeStop = (so_aclprofRangeStop_t)(dlsym(so_handle, "aclprofRangeStop")); assert(so_aclprofRangeStop != 
# 800 "tmp.cpp" 3 4
__null
# 800 "tmp.cpp"
); } while(0);
do{ so_aclprofSetConfig = (so_aclprofSetConfig_t)(dlsym(so_handle, "aclprofSetConfig")); assert(so_aclprofSetConfig != 
# 801 "tmp.cpp" 3 4
__null
# 801 "tmp.cpp"
); } while(0);
do{ so_aclprofSetStampTraceMessage = (so_aclprofSetStampTraceMessage_t)(dlsym(so_handle, "aclprofSetStampTraceMessage")); assert(so_aclprofSetStampTraceMessage != 
# 802 "tmp.cpp" 3 4
__null
# 802 "tmp.cpp"
); } while(0);
do{ so_aclprofStart = (so_aclprofStart_t)(dlsym(so_handle, "aclprofStart")); assert(so_aclprofStart != 
# 803 "tmp.cpp" 3 4
__null
# 803 "tmp.cpp"
); } while(0);
do{ so_aclprofStop = (so_aclprofStop_t)(dlsym(so_handle, "aclprofStop")); assert(so_aclprofStop != 
# 804 "tmp.cpp" 3 4
__null
# 804 "tmp.cpp"
); } while(0);
do{ so_aclrtAllocatorCreateDesc = (so_aclrtAllocatorCreateDesc_t)(dlsym(so_handle, "aclrtAllocatorCreateDesc")); assert(so_aclrtAllocatorCreateDesc != 
# 805 "tmp.cpp" 3 4
__null
# 805 "tmp.cpp"
); } while(0);
do{ so_aclrtAllocatorDestroyDesc = (so_aclrtAllocatorDestroyDesc_t)(dlsym(so_handle, "aclrtAllocatorDestroyDesc")); assert(so_aclrtAllocatorDestroyDesc != 
# 806 "tmp.cpp" 3 4
__null
# 806 "tmp.cpp"
); } while(0);
do{ so_aclrtAllocatorRegister = (so_aclrtAllocatorRegister_t)(dlsym(so_handle, "aclrtAllocatorRegister")); assert(so_aclrtAllocatorRegister != 
# 807 "tmp.cpp" 3 4
__null
# 807 "tmp.cpp"
); } while(0);
do{ so_aclrtAllocatorSetAllocAdviseFuncToDesc = (so_aclrtAllocatorSetAllocAdviseFuncToDesc_t)(dlsym(so_handle, "aclrtAllocatorSetAllocAdviseFuncToDesc")); assert(so_aclrtAllocatorSetAllocAdviseFuncToDesc != 
# 808 "tmp.cpp" 3 4
__null
# 808 "tmp.cpp"
); } while(0);
do{ so_aclrtAllocatorSetAllocFuncToDesc = (so_aclrtAllocatorSetAllocFuncToDesc_t)(dlsym(so_handle, "aclrtAllocatorSetAllocFuncToDesc")); assert(so_aclrtAllocatorSetAllocFuncToDesc != 
# 809 "tmp.cpp" 3 4
__null
# 809 "tmp.cpp"
); } while(0);
do{ so_aclrtAllocatorSetFreeFuncToDesc = (so_aclrtAllocatorSetFreeFuncToDesc_t)(dlsym(so_handle, "aclrtAllocatorSetFreeFuncToDesc")); assert(so_aclrtAllocatorSetFreeFuncToDesc != 
# 810 "tmp.cpp" 3 4
__null
# 810 "tmp.cpp"
); } while(0);
do{ so_aclrtAllocatorSetGetAddrFromBlockFuncToDesc = (so_aclrtAllocatorSetGetAddrFromBlockFuncToDesc_t)(dlsym(so_handle, "aclrtAllocatorSetGetAddrFromBlockFuncToDesc")); assert(so_aclrtAllocatorSetGetAddrFromBlockFuncToDesc != 
# 811 "tmp.cpp" 3 4
__null
# 811 "tmp.cpp"
); } while(0);
do{ so_aclrtAllocatorSetObjToDesc = (so_aclrtAllocatorSetObjToDesc_t)(dlsym(so_handle, "aclrtAllocatorSetObjToDesc")); assert(so_aclrtAllocatorSetObjToDesc != 
# 812 "tmp.cpp" 3 4
__null
# 812 "tmp.cpp"
); } while(0);
do{ so_aclrtAllocatorUnregister = (so_aclrtAllocatorUnregister_t)(dlsym(so_handle, "aclrtAllocatorUnregister")); assert(so_aclrtAllocatorUnregister != 
# 813 "tmp.cpp" 3 4
__null
# 813 "tmp.cpp"
); } while(0);
do{ so_aclrtBinaryGetFunction = (so_aclrtBinaryGetFunction_t)(dlsym(so_handle, "aclrtBinaryGetFunction")); assert(so_aclrtBinaryGetFunction != 
# 814 "tmp.cpp" 3 4
__null
# 814 "tmp.cpp"
); } while(0);
do{ so_aclrtBinaryLoad = (so_aclrtBinaryLoad_t)(dlsym(so_handle, "aclrtBinaryLoad")); assert(so_aclrtBinaryLoad != 
# 815 "tmp.cpp" 3 4
__null
# 815 "tmp.cpp"
); } while(0);
do{ so_aclrtBinaryUnLoad = (so_aclrtBinaryUnLoad_t)(dlsym(so_handle, "aclrtBinaryUnLoad")); assert(so_aclrtBinaryUnLoad != 
# 816 "tmp.cpp" 3 4
__null
# 816 "tmp.cpp"
); } while(0);
do{ so_aclrtCreateBinary = (so_aclrtCreateBinary_t)(dlsym(so_handle, "aclrtCreateBinary")); assert(so_aclrtCreateBinary != 
# 817 "tmp.cpp" 3 4
__null
# 817 "tmp.cpp"
); } while(0);
do{ so_aclrtCreateContext = (so_aclrtCreateContext_t)(dlsym(so_handle, "aclrtCreateContext")); assert(so_aclrtCreateContext != 
# 818 "tmp.cpp" 3 4
__null
# 818 "tmp.cpp"
); } while(0);
do{ so_aclrtCreateEvent = (so_aclrtCreateEvent_t)(dlsym(so_handle, "aclrtCreateEvent")); assert(so_aclrtCreateEvent != 
# 819 "tmp.cpp" 3 4
__null
# 819 "tmp.cpp"
); } while(0);
do{ so_aclrtCreateEventExWithFlag = (so_aclrtCreateEventExWithFlag_t)(dlsym(so_handle, "aclrtCreateEventExWithFlag")); assert(so_aclrtCreateEventExWithFlag != 
# 820 "tmp.cpp" 3 4
__null
# 820 "tmp.cpp"
); } while(0);
do{ so_aclrtCreateEventWithFlag = (so_aclrtCreateEventWithFlag_t)(dlsym(so_handle, "aclrtCreateEventWithFlag")); assert(so_aclrtCreateEventWithFlag != 
# 821 "tmp.cpp" 3 4
__null
# 821 "tmp.cpp"
); } while(0);
do{ so_aclrtCreateGroupInfo = (so_aclrtCreateGroupInfo_t)(dlsym(so_handle, "aclrtCreateGroupInfo")); assert(so_aclrtCreateGroupInfo != 
# 822 "tmp.cpp" 3 4
__null
# 822 "tmp.cpp"
); } while(0);
do{ so_aclrtCreateStream = (so_aclrtCreateStream_t)(dlsym(so_handle, "aclrtCreateStream")); assert(so_aclrtCreateStream != 
# 823 "tmp.cpp" 3 4
__null
# 823 "tmp.cpp"
); } while(0);
do{ so_aclrtCreateStreamWithConfig = (so_aclrtCreateStreamWithConfig_t)(dlsym(so_handle, "aclrtCreateStreamWithConfig")); assert(so_aclrtCreateStreamWithConfig != 
# 824 "tmp.cpp" 3 4
__null
# 824 "tmp.cpp"
); } while(0);
do{ so_aclrtCtxGetSysParamOpt = (so_aclrtCtxGetSysParamOpt_t)(dlsym(so_handle, "aclrtCtxGetSysParamOpt")); assert(so_aclrtCtxGetSysParamOpt != 
# 825 "tmp.cpp" 3 4
__null
# 825 "tmp.cpp"
); } while(0);
do{ so_aclrtCtxSetSysParamOpt = (so_aclrtCtxSetSysParamOpt_t)(dlsym(so_handle, "aclrtCtxSetSysParamOpt")); assert(so_aclrtCtxSetSysParamOpt != 
# 826 "tmp.cpp" 3 4
__null
# 826 "tmp.cpp"
); } while(0);
do{ so_aclrtDestroyBinary = (so_aclrtDestroyBinary_t)(dlsym(so_handle, "aclrtDestroyBinary")); assert(so_aclrtDestroyBinary != 
# 827 "tmp.cpp" 3 4
__null
# 827 "tmp.cpp"
); } while(0);
do{ so_aclrtDestroyContext = (so_aclrtDestroyContext_t)(dlsym(so_handle, "aclrtDestroyContext")); assert(so_aclrtDestroyContext != 
# 828 "tmp.cpp" 3 4
__null
# 828 "tmp.cpp"
); } while(0);
do{ so_aclrtDestroyEvent = (so_aclrtDestroyEvent_t)(dlsym(so_handle, "aclrtDestroyEvent")); assert(so_aclrtDestroyEvent != 
# 829 "tmp.cpp" 3 4
__null
# 829 "tmp.cpp"
); } while(0);
do{ so_aclrtDestroyGroupInfo = (so_aclrtDestroyGroupInfo_t)(dlsym(so_handle, "aclrtDestroyGroupInfo")); assert(so_aclrtDestroyGroupInfo != 
# 830 "tmp.cpp" 3 4
__null
# 830 "tmp.cpp"
); } while(0);
do{ so_aclrtDestroyStream = (so_aclrtDestroyStream_t)(dlsym(so_handle, "aclrtDestroyStream")); assert(so_aclrtDestroyStream != 
# 831 "tmp.cpp" 3 4
__null
# 831 "tmp.cpp"
); } while(0);
do{ so_aclrtDestroyStreamForce = (so_aclrtDestroyStreamForce_t)(dlsym(so_handle, "aclrtDestroyStreamForce")); assert(so_aclrtDestroyStreamForce != 
# 832 "tmp.cpp" 3 4
__null
# 832 "tmp.cpp"
); } while(0);
do{ so_aclrtDeviceCanAccessPeer = (so_aclrtDeviceCanAccessPeer_t)(dlsym(so_handle, "aclrtDeviceCanAccessPeer")); assert(so_aclrtDeviceCanAccessPeer != 
# 833 "tmp.cpp" 3 4
__null
# 833 "tmp.cpp"
); } while(0);
do{ so_aclrtDeviceDisablePeerAccess = (so_aclrtDeviceDisablePeerAccess_t)(dlsym(so_handle, "aclrtDeviceDisablePeerAccess")); assert(so_aclrtDeviceDisablePeerAccess != 
# 834 "tmp.cpp" 3 4
__null
# 834 "tmp.cpp"
); } while(0);
do{ so_aclrtDeviceEnablePeerAccess = (so_aclrtDeviceEnablePeerAccess_t)(dlsym(so_handle, "aclrtDeviceEnablePeerAccess")); assert(so_aclrtDeviceEnablePeerAccess != 
# 835 "tmp.cpp" 3 4
__null
# 835 "tmp.cpp"
); } while(0);
do{ so_aclrtDeviceGetBareTgid = (so_aclrtDeviceGetBareTgid_t)(dlsym(so_handle, "aclrtDeviceGetBareTgid")); assert(so_aclrtDeviceGetBareTgid != 
# 836 "tmp.cpp" 3 4
__null
# 836 "tmp.cpp"
); } while(0);
do{ so_aclrtEventElapsedTime = (so_aclrtEventElapsedTime_t)(dlsym(so_handle, "aclrtEventElapsedTime")); assert(so_aclrtEventElapsedTime != 
# 837 "tmp.cpp" 3 4
__null
# 837 "tmp.cpp"
); } while(0);
do{ so_aclrtFree = (so_aclrtFree_t)(dlsym(so_handle, "aclrtFree")); assert(so_aclrtFree != 
# 838 "tmp.cpp" 3 4
__null
# 838 "tmp.cpp"
); } while(0);
do{ so_aclrtFreeHost = (so_aclrtFreeHost_t)(dlsym(so_handle, "aclrtFreeHost")); assert(so_aclrtFreeHost != 
# 839 "tmp.cpp" 3 4
__null
# 839 "tmp.cpp"
); } while(0);
do{ so_aclrtFreePhysical = (so_aclrtFreePhysical_t)(dlsym(so_handle, "aclrtFreePhysical")); assert(so_aclrtFreePhysical != 
# 840 "tmp.cpp" 3 4
__null
# 840 "tmp.cpp"
); } while(0);
do{ so_aclrtGetAllGroupInfo = (so_aclrtGetAllGroupInfo_t)(dlsym(so_handle, "aclrtGetAllGroupInfo")); assert(so_aclrtGetAllGroupInfo != 
# 841 "tmp.cpp" 3 4
__null
# 841 "tmp.cpp"
); } while(0);
do{ so_aclrtGetCurrentContext = (so_aclrtGetCurrentContext_t)(dlsym(so_handle, "aclrtGetCurrentContext")); assert(so_aclrtGetCurrentContext != 
# 842 "tmp.cpp" 3 4
__null
# 842 "tmp.cpp"
); } while(0);
do{ so_aclrtGetDevice = (so_aclrtGetDevice_t)(dlsym(so_handle, "aclrtGetDevice")); assert(so_aclrtGetDevice != 
# 843 "tmp.cpp" 3 4
__null
# 843 "tmp.cpp"
); } while(0);
do{ so_aclrtGetDeviceCount = (so_aclrtGetDeviceCount_t)(dlsym(so_handle, "aclrtGetDeviceCount")); assert(so_aclrtGetDeviceCount != 
# 844 "tmp.cpp" 3 4
__null
# 844 "tmp.cpp"
); } while(0);
do{ so_aclrtGetDeviceIdFromExceptionInfo = (so_aclrtGetDeviceIdFromExceptionInfo_t)(dlsym(so_handle, "aclrtGetDeviceIdFromExceptionInfo")); assert(so_aclrtGetDeviceIdFromExceptionInfo != 
# 845 "tmp.cpp" 3 4
__null
# 845 "tmp.cpp"
); } while(0);
do{ so_aclrtGetDeviceSatMode = (so_aclrtGetDeviceSatMode_t)(dlsym(so_handle, "aclrtGetDeviceSatMode")); assert(so_aclrtGetDeviceSatMode != 
# 846 "tmp.cpp" 3 4
__null
# 846 "tmp.cpp"
); } while(0);
do{ so_aclrtGetDeviceUtilizationRate = (so_aclrtGetDeviceUtilizationRate_t)(dlsym(so_handle, "aclrtGetDeviceUtilizationRate")); assert(so_aclrtGetDeviceUtilizationRate != 
# 847 "tmp.cpp" 3 4
__null
# 847 "tmp.cpp"
); } while(0);
do{ so_aclrtGetErrorCodeFromExceptionInfo = (so_aclrtGetErrorCodeFromExceptionInfo_t)(dlsym(so_handle, "aclrtGetErrorCodeFromExceptionInfo")); assert(so_aclrtGetErrorCodeFromExceptionInfo != 
# 848 "tmp.cpp" 3 4
__null
# 848 "tmp.cpp"
); } while(0);
do{ so_aclrtGetGroupCount = (so_aclrtGetGroupCount_t)(dlsym(so_handle, "aclrtGetGroupCount")); assert(so_aclrtGetGroupCount != 
# 849 "tmp.cpp" 3 4
__null
# 849 "tmp.cpp"
); } while(0);
do{ so_aclrtGetGroupInfoDetail = (so_aclrtGetGroupInfoDetail_t)(dlsym(so_handle, "aclrtGetGroupInfoDetail")); assert(so_aclrtGetGroupInfoDetail != 
# 850 "tmp.cpp" 3 4
__null
# 850 "tmp.cpp"
); } while(0);
do{ so_aclrtGetMemInfo = (so_aclrtGetMemInfo_t)(dlsym(so_handle, "aclrtGetMemInfo")); assert(so_aclrtGetMemInfo != 
# 851 "tmp.cpp" 3 4
__null
# 851 "tmp.cpp"
); } while(0);
do{ so_aclrtGetOverflowStatus = (so_aclrtGetOverflowStatus_t)(dlsym(so_handle, "aclrtGetOverflowStatus")); assert(so_aclrtGetOverflowStatus != 
# 852 "tmp.cpp" 3 4
__null
# 852 "tmp.cpp"
); } while(0);
do{ so_aclrtGetRunMode = (so_aclrtGetRunMode_t)(dlsym(so_handle, "aclrtGetRunMode")); assert(so_aclrtGetRunMode != 
# 853 "tmp.cpp" 3 4
__null
# 853 "tmp.cpp"
); } while(0);
do{ so_aclrtGetSocName = (so_aclrtGetSocName_t)(dlsym(so_handle, "aclrtGetSocName")); assert(so_aclrtGetSocName != 
# 854 "tmp.cpp" 3 4
__null
# 854 "tmp.cpp"
); } while(0);
do{ so_aclrtGetStreamIdFromExceptionInfo = (so_aclrtGetStreamIdFromExceptionInfo_t)(dlsym(so_handle, "aclrtGetStreamIdFromExceptionInfo")); assert(so_aclrtGetStreamIdFromExceptionInfo != 
# 855 "tmp.cpp" 3 4
__null
# 855 "tmp.cpp"
); } while(0);
do{ so_aclrtGetStreamOverflowSwitch = (so_aclrtGetStreamOverflowSwitch_t)(dlsym(so_handle, "aclrtGetStreamOverflowSwitch")); assert(so_aclrtGetStreamOverflowSwitch != 
# 856 "tmp.cpp" 3 4
__null
# 856 "tmp.cpp"
); } while(0);
do{ so_aclrtGetTaskIdFromExceptionInfo = (so_aclrtGetTaskIdFromExceptionInfo_t)(dlsym(so_handle, "aclrtGetTaskIdFromExceptionInfo")); assert(so_aclrtGetTaskIdFromExceptionInfo != 
# 857 "tmp.cpp" 3 4
__null
# 857 "tmp.cpp"
); } while(0);
do{ so_aclrtGetThreadIdFromExceptionInfo = (so_aclrtGetThreadIdFromExceptionInfo_t)(dlsym(so_handle, "aclrtGetThreadIdFromExceptionInfo")); assert(so_aclrtGetThreadIdFromExceptionInfo != 
# 858 "tmp.cpp" 3 4
__null
# 858 "tmp.cpp"
); } while(0);
do{ so_aclrtGetVersion = (so_aclrtGetVersion_t)(dlsym(so_handle, "aclrtGetVersion")); assert(so_aclrtGetVersion != 
# 859 "tmp.cpp" 3 4
__null
# 859 "tmp.cpp"
); } while(0);
do{ so_aclrtLaunchCallback = (so_aclrtLaunchCallback_t)(dlsym(so_handle, "aclrtLaunchCallback")); assert(so_aclrtLaunchCallback != 
# 860 "tmp.cpp" 3 4
__null
# 860 "tmp.cpp"
); } while(0);
do{ so_aclrtLaunchKernel = (so_aclrtLaunchKernel_t)(dlsym(so_handle, "aclrtLaunchKernel")); assert(so_aclrtLaunchKernel != 
# 861 "tmp.cpp" 3 4
__null
# 861 "tmp.cpp"
); } while(0);
do{ so_aclrtMalloc = (so_aclrtMalloc_t)(dlsym(so_handle, "aclrtMalloc")); assert(so_aclrtMalloc != 
# 862 "tmp.cpp" 3 4
__null
# 862 "tmp.cpp"
); } while(0);
do{ so_aclrtMallocAlign32 = (so_aclrtMallocAlign32_t)(dlsym(so_handle, "aclrtMallocAlign32")); assert(so_aclrtMallocAlign32 != 
# 863 "tmp.cpp" 3 4
__null
# 863 "tmp.cpp"
); } while(0);
do{ so_aclrtMallocCached = (so_aclrtMallocCached_t)(dlsym(so_handle, "aclrtMallocCached")); assert(so_aclrtMallocCached != 
# 864 "tmp.cpp" 3 4
__null
# 864 "tmp.cpp"
); } while(0);
do{ so_aclrtMallocHost = (so_aclrtMallocHost_t)(dlsym(so_handle, "aclrtMallocHost")); assert(so_aclrtMallocHost != 
# 865 "tmp.cpp" 3 4
__null
# 865 "tmp.cpp"
); } while(0);
do{ so_aclrtMallocPhysical = (so_aclrtMallocPhysical_t)(dlsym(so_handle, "aclrtMallocPhysical")); assert(so_aclrtMallocPhysical != 
# 866 "tmp.cpp" 3 4
__null
# 866 "tmp.cpp"
); } while(0);
do{ so_aclrtMapMem = (so_aclrtMapMem_t)(dlsym(so_handle, "aclrtMapMem")); assert(so_aclrtMapMem != 
# 867 "tmp.cpp" 3 4
__null
# 867 "tmp.cpp"
); } while(0);
do{ so_aclrtMemExportToShareableHandle = (so_aclrtMemExportToShareableHandle_t)(dlsym(so_handle, "aclrtMemExportToShareableHandle")); assert(so_aclrtMemExportToShareableHandle != 
# 868 "tmp.cpp" 3 4
__null
# 868 "tmp.cpp"
); } while(0);
do{ so_aclrtMemFlush = (so_aclrtMemFlush_t)(dlsym(so_handle, "aclrtMemFlush")); assert(so_aclrtMemFlush != 
# 869 "tmp.cpp" 3 4
__null
# 869 "tmp.cpp"
); } while(0);
do{ so_aclrtMemGetAllocationGranularity = (so_aclrtMemGetAllocationGranularity_t)(dlsym(so_handle, "aclrtMemGetAllocationGranularity")); assert(so_aclrtMemGetAllocationGranularity != 
# 870 "tmp.cpp" 3 4
__null
# 870 "tmp.cpp"
); } while(0);
do{ so_aclrtMemImportFromShareableHandle = (so_aclrtMemImportFromShareableHandle_t)(dlsym(so_handle, "aclrtMemImportFromShareableHandle")); assert(so_aclrtMemImportFromShareableHandle != 
# 871 "tmp.cpp" 3 4
__null
# 871 "tmp.cpp"
); } while(0);
do{ so_aclrtMemInvalidate = (so_aclrtMemInvalidate_t)(dlsym(so_handle, "aclrtMemInvalidate")); assert(so_aclrtMemInvalidate != 
# 872 "tmp.cpp" 3 4
__null
# 872 "tmp.cpp"
); } while(0);
do{ so_aclrtMemSetPidToShareableHandle = (so_aclrtMemSetPidToShareableHandle_t)(dlsym(so_handle, "aclrtMemSetPidToShareableHandle")); assert(so_aclrtMemSetPidToShareableHandle != 
# 873 "tmp.cpp" 3 4
__null
# 873 "tmp.cpp"
); } while(0);
do{ so_aclrtMemcpy = (so_aclrtMemcpy_t)(dlsym(so_handle, "aclrtMemcpy")); assert(so_aclrtMemcpy != 
# 874 "tmp.cpp" 3 4
__null
# 874 "tmp.cpp"
); } while(0);
do{ so_aclrtMemcpy2d = (so_aclrtMemcpy2d_t)(dlsym(so_handle, "aclrtMemcpy2d")); assert(so_aclrtMemcpy2d != 
# 875 "tmp.cpp" 3 4
__null
# 875 "tmp.cpp"
); } while(0);
do{ so_aclrtMemcpy2dAsync = (so_aclrtMemcpy2dAsync_t)(dlsym(so_handle, "aclrtMemcpy2dAsync")); assert(so_aclrtMemcpy2dAsync != 
# 876 "tmp.cpp" 3 4
__null
# 876 "tmp.cpp"
); } while(0);
do{ so_aclrtMemcpyAsync = (so_aclrtMemcpyAsync_t)(dlsym(so_handle, "aclrtMemcpyAsync")); assert(so_aclrtMemcpyAsync != 
# 877 "tmp.cpp" 3 4
__null
# 877 "tmp.cpp"
); } while(0);
do{ so_aclrtMemset = (so_aclrtMemset_t)(dlsym(so_handle, "aclrtMemset")); assert(so_aclrtMemset != 
# 878 "tmp.cpp" 3 4
__null
# 878 "tmp.cpp"
); } while(0);
do{ so_aclrtMemsetAsync = (so_aclrtMemsetAsync_t)(dlsym(so_handle, "aclrtMemsetAsync")); assert(so_aclrtMemsetAsync != 
# 879 "tmp.cpp" 3 4
__null
# 879 "tmp.cpp"
); } while(0);
do{ so_aclrtProcessReport = (so_aclrtProcessReport_t)(dlsym(so_handle, "aclrtProcessReport")); assert(so_aclrtProcessReport != 
# 880 "tmp.cpp" 3 4
__null
# 880 "tmp.cpp"
); } while(0);
do{ so_aclrtQueryDeviceStatus = (so_aclrtQueryDeviceStatus_t)(dlsym(so_handle, "aclrtQueryDeviceStatus")); assert(so_aclrtQueryDeviceStatus != 
# 881 "tmp.cpp" 3 4
__null
# 881 "tmp.cpp"
); } while(0);
do{ so_aclrtQueryEvent = (so_aclrtQueryEvent_t)(dlsym(so_handle, "aclrtQueryEvent")); assert(so_aclrtQueryEvent != 
# 882 "tmp.cpp" 3 4
__null
# 882 "tmp.cpp"
); } while(0);
do{ so_aclrtQueryEventStatus = (so_aclrtQueryEventStatus_t)(dlsym(so_handle, "aclrtQueryEventStatus")); assert(so_aclrtQueryEventStatus != 
# 883 "tmp.cpp" 3 4
__null
# 883 "tmp.cpp"
); } while(0);
do{ so_aclrtQueryEventWaitStatus = (so_aclrtQueryEventWaitStatus_t)(dlsym(so_handle, "aclrtQueryEventWaitStatus")); assert(so_aclrtQueryEventWaitStatus != 
# 884 "tmp.cpp" 3 4
__null
# 884 "tmp.cpp"
); } while(0);
do{ so_aclrtRecordEvent = (so_aclrtRecordEvent_t)(dlsym(so_handle, "aclrtRecordEvent")); assert(so_aclrtRecordEvent != 
# 885 "tmp.cpp" 3 4
__null
# 885 "tmp.cpp"
); } while(0);
do{ so_aclrtReleaseMemAddress = (so_aclrtReleaseMemAddress_t)(dlsym(so_handle, "aclrtReleaseMemAddress")); assert(so_aclrtReleaseMemAddress != 
# 886 "tmp.cpp" 3 4
__null
# 886 "tmp.cpp"
); } while(0);
do{ so_aclrtReserveMemAddress = (so_aclrtReserveMemAddress_t)(dlsym(so_handle, "aclrtReserveMemAddress")); assert(so_aclrtReserveMemAddress != 
# 887 "tmp.cpp" 3 4
__null
# 887 "tmp.cpp"
); } while(0);
do{ so_aclrtSetDevice = (so_aclrtSetDevice_t)(dlsym(so_handle, "aclrtSetDevice")); assert(so_aclrtSetDevice != 
# 888 "tmp.cpp" 3 4
__null
# 888 "tmp.cpp"
); } while(0);
do{ so_aclrtSetDeviceSatMode = (so_aclrtSetDeviceSatMode_t)(dlsym(so_handle, "aclrtSetDeviceSatMode")); assert(so_aclrtSetDeviceSatMode != 
# 889 "tmp.cpp" 3 4
__null
# 889 "tmp.cpp"
); } while(0);
do{ so_aclrtSetExceptionInfoCallback = (so_aclrtSetExceptionInfoCallback_t)(dlsym(so_handle, "aclrtSetExceptionInfoCallback")); assert(so_aclrtSetExceptionInfoCallback != 
# 890 "tmp.cpp" 3 4
__null
# 890 "tmp.cpp"
); } while(0);
do{ so_aclrtSetGroup = (so_aclrtSetGroup_t)(dlsym(so_handle, "aclrtSetGroup")); assert(so_aclrtSetGroup != 
# 891 "tmp.cpp" 3 4
__null
# 891 "tmp.cpp"
); } while(0);
do{ so_aclrtSetOpExecuteTimeOut = (so_aclrtSetOpExecuteTimeOut_t)(dlsym(so_handle, "aclrtSetOpExecuteTimeOut")); assert(so_aclrtSetOpExecuteTimeOut != 
# 892 "tmp.cpp" 3 4
__null
# 892 "tmp.cpp"
); } while(0);
do{ so_aclrtSetOpWaitTimeout = (so_aclrtSetOpWaitTimeout_t)(dlsym(so_handle, "aclrtSetOpWaitTimeout")); assert(so_aclrtSetOpWaitTimeout != 
# 893 "tmp.cpp" 3 4
__null
# 893 "tmp.cpp"
); } while(0);
do{ so_aclrtSetStreamFailureMode = (so_aclrtSetStreamFailureMode_t)(dlsym(so_handle, "aclrtSetStreamFailureMode")); assert(so_aclrtSetStreamFailureMode != 
# 894 "tmp.cpp" 3 4
__null
# 894 "tmp.cpp"
); } while(0);
do{ so_aclrtSetStreamOverflowSwitch = (so_aclrtSetStreamOverflowSwitch_t)(dlsym(so_handle, "aclrtSetStreamOverflowSwitch")); assert(so_aclrtSetStreamOverflowSwitch != 
# 895 "tmp.cpp" 3 4
__null
# 895 "tmp.cpp"
); } while(0);
do{ so_aclrtSetTsDevice = (so_aclrtSetTsDevice_t)(dlsym(so_handle, "aclrtSetTsDevice")); assert(so_aclrtSetTsDevice != 
# 896 "tmp.cpp" 3 4
__null
# 896 "tmp.cpp"
); } while(0);
do{ so_aclrtStreamQuery = (so_aclrtStreamQuery_t)(dlsym(so_handle, "aclrtStreamQuery")); assert(so_aclrtStreamQuery != 
# 897 "tmp.cpp" 3 4
__null
# 897 "tmp.cpp"
); } while(0);
do{ so_aclrtStreamWaitEvent = (so_aclrtStreamWaitEvent_t)(dlsym(so_handle, "aclrtStreamWaitEvent")); assert(so_aclrtStreamWaitEvent != 
# 898 "tmp.cpp" 3 4
__null
# 898 "tmp.cpp"
); } while(0);
do{ so_aclrtSubscribeReport = (so_aclrtSubscribeReport_t)(dlsym(so_handle, "aclrtSubscribeReport")); assert(so_aclrtSubscribeReport != 
# 899 "tmp.cpp" 3 4
__null
# 899 "tmp.cpp"
); } while(0);
do{ so_aclrtSynchronizeDevice = (so_aclrtSynchronizeDevice_t)(dlsym(so_handle, "aclrtSynchronizeDevice")); assert(so_aclrtSynchronizeDevice != 
# 900 "tmp.cpp" 3 4
__null
# 900 "tmp.cpp"
); } while(0);
do{ so_aclrtSynchronizeEvent = (so_aclrtSynchronizeEvent_t)(dlsym(so_handle, "aclrtSynchronizeEvent")); assert(so_aclrtSynchronizeEvent != 
# 901 "tmp.cpp" 3 4
__null
# 901 "tmp.cpp"
); } while(0);
do{ so_aclrtSynchronizeEventWithTimeout = (so_aclrtSynchronizeEventWithTimeout_t)(dlsym(so_handle, "aclrtSynchronizeEventWithTimeout")); assert(so_aclrtSynchronizeEventWithTimeout != 
# 902 "tmp.cpp" 3 4
__null
# 902 "tmp.cpp"
); } while(0);
do{ so_aclrtSynchronizeStream = (so_aclrtSynchronizeStream_t)(dlsym(so_handle, "aclrtSynchronizeStream")); assert(so_aclrtSynchronizeStream != 
# 903 "tmp.cpp" 3 4
__null
# 903 "tmp.cpp"
); } while(0);
do{ so_aclrtSynchronizeStreamWithTimeout = (so_aclrtSynchronizeStreamWithTimeout_t)(dlsym(so_handle, "aclrtSynchronizeStreamWithTimeout")); assert(so_aclrtSynchronizeStreamWithTimeout != 
# 904 "tmp.cpp" 3 4
__null
# 904 "tmp.cpp"
); } while(0);
do{ so_aclrtUnSubscribeReport = (so_aclrtUnSubscribeReport_t)(dlsym(so_handle, "aclrtUnSubscribeReport")); assert(so_aclrtUnSubscribeReport != 
# 905 "tmp.cpp" 3 4
__null
# 905 "tmp.cpp"
); } while(0);
do{ so_aclrtUnmapMem = (so_aclrtUnmapMem_t)(dlsym(so_handle, "aclrtUnmapMem")); assert(so_aclrtUnmapMem != 
# 906 "tmp.cpp" 3 4
__null
# 906 "tmp.cpp"
); } while(0);
void aclAppLog(aclLogLevel logLevel, const char* func, const char* file, uint32_t line, const char* fmt, ...){
    begin_func("aclAppLog");



        so_aclAppLog(logLevel, func, file, line, fmt, ...);


        end_func("func");

    return ;
}
aclDataBuffer* aclCreateDataBuffer(void* data, size_t size){
    begin_func("aclCreateDataBuffer");



        aclDataBuffer* result;
        result = so_aclCreateDataBuffer(data, size);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,927,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclGraphDumpOption* aclCreateGraphDumpOpt(){
    begin_func("aclCreateGraphDumpOpt");



        aclGraphDumpOption* result;
        result = so_aclCreateGraphDumpOpt();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,943,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclTensorDesc* aclCreateTensorDesc(aclDataType dataType, int numDims, const int64_t* dims, aclFormat format){
    begin_func("aclCreateTensorDesc");



        aclTensorDesc* result;
        result = so_aclCreateTensorDesc(dataType, numDims, dims, format);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,959,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclDataTypeSize(aclDataType dataType){
    begin_func("aclDataTypeSize");



        size_t result;
        result = so_aclDataTypeSize(dataType);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,975,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclDestroyDataBuffer(const aclDataBuffer* dataBuffer){
    begin_func("aclDestroyDataBuffer");



        aclError result;
        result = so_aclDestroyDataBuffer(dataBuffer);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,991,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclDestroyGraphDumpOpt(const aclGraphDumpOption* graphDumpOpt){
    begin_func("aclDestroyGraphDumpOpt");



        aclError result;
        result = so_aclDestroyGraphDumpOpt(graphDumpOpt);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1007,__func__,result); } } while(0);



        end_func("func");

    return result;
}
void aclDestroyTensorDesc(const aclTensorDesc* desc){
    begin_func("aclDestroyTensorDesc");



        so_aclDestroyTensorDesc(desc);


        end_func("func");

    return ;
}
aclError aclFinalize(){
    begin_func("aclFinalize");



        aclError result;
        result = so_aclFinalize();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1035,__func__,result); } } while(0);



        end_func("func");

    return result;
}
float aclFloat16ToFloat(aclFloat16 value){
    begin_func("aclFloat16ToFloat");



        float result;
        result = so_aclFloat16ToFloat(value);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1051,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclFloat16 aclFloatToFloat16(float value){
    begin_func("aclFloatToFloat16");



        aclFloat16 result;
        result = so_aclFloatToFloat16(value);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1067,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclGenGraphAndDumpForOp(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], const aclDataBuffer* const inputs[], int numOutputs, const aclTensorDesc* const outputDesc[], aclDataBuffer* const outputs[], const aclopAttr* attr, aclopEngineType engineType, const char* graphDumpPath, const aclGraphDumpOption* graphDumpOpt){
    begin_func("aclGenGraphAndDumpForOp");



        aclError result;
        result = so_aclGenGraphAndDumpForOp(opType, numInputs, inputDesc, inputs, numOutputs, outputDesc, outputs, attr, engineType, graphDumpPath, graphDumpOpt);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1083,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclGetCannAttribute(aclCannAttr cannAttr, int32_t* value){
    begin_func("aclGetCannAttribute");



        aclError result;
        result = so_aclGetCannAttribute(cannAttr, value);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1099,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclGetCannAttributeList(const aclCannAttr** cannAttrList, size_t* num){
    begin_func("aclGetCannAttributeList");



        aclError result;
        result = so_aclGetCannAttributeList(cannAttrList, num);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1115,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclGetCompileopt(aclCompileOpt opt, char* value, size_t length){
    begin_func("aclGetCompileopt");



        aclError result;
        result = so_aclGetCompileopt(opt, value, length);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1131,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclGetCompileoptSize(aclCompileOpt opt){
    begin_func("aclGetCompileoptSize");



        size_t result;
        result = so_aclGetCompileoptSize(opt);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1147,__func__,result); } } while(0);



        end_func("func");

    return result;
}
void* aclGetDataBufferAddr(const aclDataBuffer* dataBuffer){
    begin_func("aclGetDataBufferAddr");



        void* result;
        result = so_aclGetDataBufferAddr(dataBuffer);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1163,__func__,result); } } while(0);



        end_func("func");

    return result;
}
uint32_t aclGetDataBufferSize(const aclDataBuffer* dataBuffer){
    begin_func("aclGetDataBufferSize");



        uint32_t result;
        result = so_aclGetDataBufferSize(dataBuffer);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1179,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclGetDataBufferSizeV2(const aclDataBuffer* dataBuffer){
    begin_func("aclGetDataBufferSizeV2");



        size_t result;
        result = so_aclGetDataBufferSizeV2(dataBuffer);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1195,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclGetDeviceCapability(uint32_t deviceId, aclDeviceInfo deviceInfo, int64_t* value){
    begin_func("aclGetDeviceCapability");



        aclError result;
        result = so_aclGetDeviceCapability(deviceId, deviceInfo, value);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1211,__func__,result); } } while(0);



        end_func("func");

    return result;
}
const char* aclGetRecentErrMsg(){
    begin_func("aclGetRecentErrMsg");



        const char* result;
        result = so_aclGetRecentErrMsg();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1227,__func__,result); } } while(0);



        end_func("func");

    return result;
}
void* aclGetTensorDescAddress(const aclTensorDesc* desc){
    begin_func("aclGetTensorDescAddress");



        void* result;
        result = so_aclGetTensorDescAddress(desc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1243,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclTensorDesc* aclGetTensorDescByIndex(aclTensorDesc* desc, size_t index){
    begin_func("aclGetTensorDescByIndex");



        aclTensorDesc* result;
        result = so_aclGetTensorDescByIndex(desc, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1259,__func__,result); } } while(0);



        end_func("func");

    return result;
}
int64_t aclGetTensorDescDim(const aclTensorDesc* desc, size_t index){
    begin_func("aclGetTensorDescDim");



        int64_t result;
        result = so_aclGetTensorDescDim(desc, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1275,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclGetTensorDescDimRange(const aclTensorDesc* desc, size_t index, size_t dimRangeNum, int64_t* dimRange){
    begin_func("aclGetTensorDescDimRange");



        aclError result;
        result = so_aclGetTensorDescDimRange(desc, index, dimRangeNum, dimRange);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1291,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclGetTensorDescDimV2(const aclTensorDesc* desc, size_t index, int64_t* dimSize){
    begin_func("aclGetTensorDescDimV2");



        aclError result;
        result = so_aclGetTensorDescDimV2(desc, index, dimSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1307,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclGetTensorDescElementCount(const aclTensorDesc* desc){
    begin_func("aclGetTensorDescElementCount");



        size_t result;
        result = so_aclGetTensorDescElementCount(desc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1323,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclFormat aclGetTensorDescFormat(const aclTensorDesc* desc){
    begin_func("aclGetTensorDescFormat");



        aclFormat result;
        result = so_aclGetTensorDescFormat(desc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1339,__func__,result); } } while(0);



        end_func("func");

    return result;
}
const char* aclGetTensorDescName(aclTensorDesc* desc){
    begin_func("aclGetTensorDescName");



        const char* result;
        result = so_aclGetTensorDescName(desc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1355,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclGetTensorDescNumDims(const aclTensorDesc* desc){
    begin_func("aclGetTensorDescNumDims");



        size_t result;
        result = so_aclGetTensorDescNumDims(desc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1371,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclGetTensorDescSize(const aclTensorDesc* desc){
    begin_func("aclGetTensorDescSize");



        size_t result;
        result = so_aclGetTensorDescSize(desc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1387,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclDataType aclGetTensorDescType(const aclTensorDesc* desc){
    begin_func("aclGetTensorDescType");



        aclDataType result;
        result = so_aclGetTensorDescType(desc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1403,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclInit(const char* configPath){
    begin_func("aclInit");



        aclError result;
        result = so_aclInit(configPath);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1419,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclSetCompileopt(aclCompileOpt opt, const char* value){
    begin_func("aclSetCompileopt");



        aclError result;
        result = so_aclSetCompileopt(opt, value);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1435,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclSetTensorConst(aclTensorDesc* desc, void* dataBuffer, size_t length){
    begin_func("aclSetTensorConst");



        aclError result;
        result = so_aclSetTensorConst(desc, dataBuffer, length);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1451,__func__,result); } } while(0);



        end_func("func");

    return result;
}
void aclSetTensorDescName(aclTensorDesc* desc, const char* name){
    begin_func("aclSetTensorDescName");



        so_aclSetTensorDescName(desc, name);


        end_func("func");

    return ;
}
aclError aclSetTensorDynamicInput(aclTensorDesc* desc, const char* dynamicInputName){
    begin_func("aclSetTensorDynamicInput");



        aclError result;
        result = so_aclSetTensorDynamicInput(desc, dynamicInputName);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1479,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclSetTensorFormat(aclTensorDesc* desc, aclFormat format){
    begin_func("aclSetTensorFormat");



        aclError result;
        result = so_aclSetTensorFormat(desc, format);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1495,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclSetTensorOriginFormat(aclTensorDesc* desc, aclFormat format){
    begin_func("aclSetTensorOriginFormat");



        aclError result;
        result = so_aclSetTensorOriginFormat(desc, format);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1511,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclSetTensorOriginShape(aclTensorDesc* desc, int numDims, const int64_t* dims){
    begin_func("aclSetTensorOriginShape");



        aclError result;
        result = so_aclSetTensorOriginShape(desc, numDims, dims);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1527,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclSetTensorPlaceMent(aclTensorDesc* desc, aclMemType memType){
    begin_func("aclSetTensorPlaceMent");



        aclError result;
        result = so_aclSetTensorPlaceMent(desc, memType);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1543,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclSetTensorShape(aclTensorDesc* desc, int numDims, const int64_t* dims){
    begin_func("aclSetTensorShape");



        aclError result;
        result = so_aclSetTensorShape(desc, numDims, dims);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1559,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclSetTensorShapeRange(aclTensorDesc* desc, size_t dimsCount, int64_t dimsRange[][2]){
    begin_func("aclSetTensorShapeRange");



        aclError result;
        result = so_aclSetTensorShapeRange(desc, dimsCount, dimsRange);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1575,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclSetTensorStorageFormat(aclTensorDesc* desc, aclFormat format){
    begin_func("aclSetTensorStorageFormat");



        aclError result;
        result = so_aclSetTensorStorageFormat(desc, format);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1591,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclSetTensorStorageShape(aclTensorDesc* desc, int numDims, const int64_t* dims){
    begin_func("aclSetTensorStorageShape");



        aclError result;
        result = so_aclSetTensorStorageShape(desc, numDims, dims);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1607,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclSetTensorValueRange(aclTensorDesc* desc, size_t valueCount, int64_t valueRange[][2]){
    begin_func("aclSetTensorValueRange");



        aclError result;
        result = so_aclSetTensorValueRange(desc, valueCount, valueRange);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1623,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclTransTensorDescFormat(const aclTensorDesc* srcDesc, aclFormat dstFormat, aclTensorDesc** dstDesc){
    begin_func("aclTransTensorDescFormat");



        aclError result;
        result = so_aclTransTensorDescFormat(srcDesc, dstFormat, dstDesc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1639,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclUpdateDataBuffer(aclDataBuffer* dataBuffer, void* data, size_t size){
    begin_func("aclUpdateDataBuffer");



        aclError result;
        result = so_aclUpdateDataBuffer(dataBuffer, data, size);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1655,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlAddDatasetBuffer(aclmdlDataset* dataset, aclDataBuffer* dataBuffer){
    begin_func("aclmdlAddDatasetBuffer");



        aclError result;
        result = so_aclmdlAddDatasetBuffer(dataset, dataBuffer);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1671,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclmdlAIPP* aclmdlCreateAIPP(uint64_t batchSize){
    begin_func("aclmdlCreateAIPP");



        aclmdlAIPP* result;
        result = so_aclmdlCreateAIPP(batchSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1687,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlCreateAndGetOpDesc(uint32_t deviceId, uint32_t streamId, uint32_t taskId, char* opName, size_t opNameLen, aclTensorDesc** inputDesc, size_t* numInputs, aclTensorDesc** outputDesc, size_t* numOutputs){
    begin_func("aclmdlCreateAndGetOpDesc");



        aclError result;
        result = so_aclmdlCreateAndGetOpDesc(deviceId, streamId, taskId, opName, opNameLen, inputDesc, numInputs, outputDesc, numOutputs);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1703,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclmdlConfigHandle* aclmdlCreateConfigHandle(){
    begin_func("aclmdlCreateConfigHandle");



        aclmdlConfigHandle* result;
        result = so_aclmdlCreateConfigHandle();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1719,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclmdlDataset* aclmdlCreateDataset(){
    begin_func("aclmdlCreateDataset");



        aclmdlDataset* result;
        result = so_aclmdlCreateDataset();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1735,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclmdlDesc* aclmdlCreateDesc(){
    begin_func("aclmdlCreateDesc");



        aclmdlDesc* result;
        result = so_aclmdlCreateDesc();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1751,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclmdlExecConfigHandle* aclmdlCreateExecConfigHandle(){
    begin_func("aclmdlCreateExecConfigHandle");



        aclmdlExecConfigHandle* result;
        result = so_aclmdlCreateExecConfigHandle();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1767,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlDestroyAIPP(const aclmdlAIPP* aippParmsSet){
    begin_func("aclmdlDestroyAIPP");



        aclError result;
        result = so_aclmdlDestroyAIPP(aippParmsSet);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1783,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlDestroyConfigHandle(aclmdlConfigHandle* handle){
    begin_func("aclmdlDestroyConfigHandle");



        aclError result;
        result = so_aclmdlDestroyConfigHandle(handle);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1799,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlDestroyDataset(const aclmdlDataset* dataset){
    begin_func("aclmdlDestroyDataset");



        aclError result;
        result = so_aclmdlDestroyDataset(dataset);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1815,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlDestroyDesc(aclmdlDesc* modelDesc){
    begin_func("aclmdlDestroyDesc");



        aclError result;
        result = so_aclmdlDestroyDesc(modelDesc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1831,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlDestroyExecConfigHandle(const aclmdlExecConfigHandle* handle){
    begin_func("aclmdlDestroyExecConfigHandle");



        aclError result;
        result = so_aclmdlDestroyExecConfigHandle(handle);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1847,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlExecute(uint32_t modelId, const aclmdlDataset* input, aclmdlDataset* output){
    begin_func("aclmdlExecute");



        aclError result;
        result = so_aclmdlExecute(modelId, input, output);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1863,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlExecuteAsync(uint32_t modelId, const aclmdlDataset* input, aclmdlDataset* output, aclrtStream stream){
    begin_func("aclmdlExecuteAsync");



        aclError result;
        result = so_aclmdlExecuteAsync(modelId, input, output, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1879,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlExecuteV2(uint32_t modelId, const aclmdlDataset* input, aclmdlDataset* output, aclrtStream stream, const aclmdlExecConfigHandle* handle){
    begin_func("aclmdlExecuteV2");



        aclError result;
        result = so_aclmdlExecuteV2(modelId, input, output, stream, handle);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1895,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlFinalizeDump(){
    begin_func("aclmdlFinalizeDump");



        aclError result;
        result = so_aclmdlFinalizeDump();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1911,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetAippDataSize(uint64_t batchSize, size_t* size){
    begin_func("aclmdlGetAippDataSize");



        aclError result;
        result = so_aclmdlGetAippDataSize(batchSize, size);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1927,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetAippType(uint32_t modelId, size_t index, aclmdlInputAippType* type, size_t* dynamicAttachedDataIndex){
    begin_func("aclmdlGetAippType");



        aclError result;
        result = so_aclmdlGetAippType(modelId, index, type, dynamicAttachedDataIndex);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1943,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetCurOutputDims(const aclmdlDesc* modelDesc, size_t index, aclmdlIODims* dims){
    begin_func("aclmdlGetCurOutputDims");



        aclError result;
        result = so_aclmdlGetCurOutputDims(modelDesc, index, dims);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1959,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclDataBuffer* aclmdlGetDatasetBuffer(const aclmdlDataset* dataset, size_t index){
    begin_func("aclmdlGetDatasetBuffer");



        aclDataBuffer* result;
        result = so_aclmdlGetDatasetBuffer(dataset, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1975,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclmdlGetDatasetNumBuffers(const aclmdlDataset* dataset){
    begin_func("aclmdlGetDatasetNumBuffers");



        size_t result;
        result = so_aclmdlGetDatasetNumBuffers(dataset);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,1991,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclTensorDesc* aclmdlGetDatasetTensorDesc(const aclmdlDataset* dataset, size_t index){
    begin_func("aclmdlGetDatasetTensorDesc");



        aclTensorDesc* result;
        result = so_aclmdlGetDatasetTensorDesc(dataset, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2007,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetDesc(aclmdlDesc* modelDesc, uint32_t modelId){
    begin_func("aclmdlGetDesc");



        aclError result;
        result = so_aclmdlGetDesc(modelDesc, modelId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2023,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetDynamicBatch(const aclmdlDesc* modelDesc, aclmdlBatch* batch){
    begin_func("aclmdlGetDynamicBatch");



        aclError result;
        result = so_aclmdlGetDynamicBatch(modelDesc, batch);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2039,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetDynamicHW(const aclmdlDesc* modelDesc, size_t index, aclmdlHW* hw){
    begin_func("aclmdlGetDynamicHW");



        aclError result;
        result = so_aclmdlGetDynamicHW(modelDesc, index, hw);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2055,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetFirstAippInfo(uint32_t modelId, size_t index, aclAippInfo* aippInfo){
    begin_func("aclmdlGetFirstAippInfo");



        aclError result;
        result = so_aclmdlGetFirstAippInfo(modelId, index, aippInfo);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2071,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclDataType aclmdlGetInputDataType(const aclmdlDesc* modelDesc, size_t index){
    begin_func("aclmdlGetInputDataType");



        aclDataType result;
        result = so_aclmdlGetInputDataType(modelDesc, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2087,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetInputDims(const aclmdlDesc* modelDesc, size_t index, aclmdlIODims* dims){
    begin_func("aclmdlGetInputDims");



        aclError result;
        result = so_aclmdlGetInputDims(modelDesc, index, dims);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2103,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetInputDimsV2(const aclmdlDesc* modelDesc, size_t index, aclmdlIODims* dims){
    begin_func("aclmdlGetInputDimsV2");



        aclError result;
        result = so_aclmdlGetInputDimsV2(modelDesc, index, dims);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2119,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetInputDynamicDims(const aclmdlDesc* modelDesc, size_t index, aclmdlIODims* dims, size_t gearCount){
    begin_func("aclmdlGetInputDynamicDims");



        aclError result;
        result = so_aclmdlGetInputDynamicDims(modelDesc, index, dims, gearCount);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2135,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetInputDynamicGearCount(const aclmdlDesc* modelDesc, size_t index, size_t* gearCount){
    begin_func("aclmdlGetInputDynamicGearCount");



        aclError result;
        result = so_aclmdlGetInputDynamicGearCount(modelDesc, index, gearCount);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2151,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclFormat aclmdlGetInputFormat(const aclmdlDesc* modelDesc, size_t index){
    begin_func("aclmdlGetInputFormat");



        aclFormat result;
        result = so_aclmdlGetInputFormat(modelDesc, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2167,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetInputIndexByName(const aclmdlDesc* modelDesc, const char* name, size_t* index){
    begin_func("aclmdlGetInputIndexByName");



        aclError result;
        result = so_aclmdlGetInputIndexByName(modelDesc, name, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2183,__func__,result); } } while(0);



        end_func("func");

    return result;
}
const char* aclmdlGetInputNameByIndex(const aclmdlDesc* modelDesc, size_t index){
    begin_func("aclmdlGetInputNameByIndex");



        const char* result;
        result = so_aclmdlGetInputNameByIndex(modelDesc, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2199,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclmdlGetInputSizeByIndex(aclmdlDesc* modelDesc, size_t index){
    begin_func("aclmdlGetInputSizeByIndex");



        size_t result;
        result = so_aclmdlGetInputSizeByIndex(modelDesc, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2215,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclmdlGetNumInputs(aclmdlDesc* modelDesc){
    begin_func("aclmdlGetNumInputs");



        size_t result;
        result = so_aclmdlGetNumInputs(modelDesc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2231,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclmdlGetNumOutputs(aclmdlDesc* modelDesc){
    begin_func("aclmdlGetNumOutputs");



        size_t result;
        result = so_aclmdlGetNumOutputs(modelDesc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2247,__func__,result); } } while(0);



        end_func("func");

    return result;
}
const char* aclmdlGetOpAttr(aclmdlDesc* modelDesc, const char* opName, const char* attr){
    begin_func("aclmdlGetOpAttr");



        const char* result;
        result = so_aclmdlGetOpAttr(modelDesc, opName, attr);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2263,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclDataType aclmdlGetOutputDataType(const aclmdlDesc* modelDesc, size_t index){
    begin_func("aclmdlGetOutputDataType");



        aclDataType result;
        result = so_aclmdlGetOutputDataType(modelDesc, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2279,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetOutputDims(const aclmdlDesc* modelDesc, size_t index, aclmdlIODims* dims){
    begin_func("aclmdlGetOutputDims");



        aclError result;
        result = so_aclmdlGetOutputDims(modelDesc, index, dims);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2295,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclFormat aclmdlGetOutputFormat(const aclmdlDesc* modelDesc, size_t index){
    begin_func("aclmdlGetOutputFormat");



        aclFormat result;
        result = so_aclmdlGetOutputFormat(modelDesc, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2311,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlGetOutputIndexByName(const aclmdlDesc* modelDesc, const char* name, size_t* index){
    begin_func("aclmdlGetOutputIndexByName");



        aclError result;
        result = so_aclmdlGetOutputIndexByName(modelDesc, name, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2327,__func__,result); } } while(0);



        end_func("func");

    return result;
}
const char* aclmdlGetOutputNameByIndex(const aclmdlDesc* modelDesc, size_t index){
    begin_func("aclmdlGetOutputNameByIndex");



        const char* result;
        result = so_aclmdlGetOutputNameByIndex(modelDesc, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2343,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclmdlGetOutputSizeByIndex(aclmdlDesc* modelDesc, size_t index){
    begin_func("aclmdlGetOutputSizeByIndex");



        size_t result;
        result = so_aclmdlGetOutputSizeByIndex(modelDesc, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2359,__func__,result); } } while(0);



        end_func("func");

    return result;
}
const char* aclmdlGetTensorRealName(const aclmdlDesc* modelDesc, const char* name){
    begin_func("aclmdlGetTensorRealName");



        const char* result;
        result = so_aclmdlGetTensorRealName(modelDesc, name);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2375,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlInitDump(){
    begin_func("aclmdlInitDump");



        aclError result;
        result = so_aclmdlInitDump();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2391,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlLoadFromFile(const char* modelPath, uint32_t* modelId){
    begin_func("aclmdlLoadFromFile");



        aclError result;
        result = so_aclmdlLoadFromFile(modelPath, modelId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2407,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlLoadFromFileWithMem(const char* modelPath, uint32_t* modelId, void* workPtr, size_t workSize, void* weightPtr, size_t weightSize){
    begin_func("aclmdlLoadFromFileWithMem");



        aclError result;
        result = so_aclmdlLoadFromFileWithMem(modelPath, modelId, workPtr, workSize, weightPtr, weightSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2423,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlLoadFromFileWithQ(const char* modelPath, uint32_t* modelId, const uint32_t* inputQ, size_t inputQNum, const uint32_t* outputQ, size_t outputQNum){
    begin_func("aclmdlLoadFromFileWithQ");



        aclError result;
        result = so_aclmdlLoadFromFileWithQ(modelPath, modelId, inputQ, inputQNum, outputQ, outputQNum);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2439,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlLoadFromMem(const void* model, size_t modelSize, uint32_t* modelId){
    begin_func("aclmdlLoadFromMem");



        aclError result;
        result = so_aclmdlLoadFromMem(model, modelSize, modelId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2455,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlLoadFromMemWithMem(const void* model, size_t modelSize, uint32_t* modelId, void* workPtr, size_t workSize, void* weightPtr, size_t weightSize){
    begin_func("aclmdlLoadFromMemWithMem");



        aclError result;
        result = so_aclmdlLoadFromMemWithMem(model, modelSize, modelId, workPtr, workSize, weightPtr, weightSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2471,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlLoadFromMemWithQ(const void* model, size_t modelSize, uint32_t* modelId, const uint32_t* inputQ, size_t inputQNum, const uint32_t* outputQ, size_t outputQNum){
    begin_func("aclmdlLoadFromMemWithQ");



        aclError result;
        result = so_aclmdlLoadFromMemWithQ(model, modelSize, modelId, inputQ, inputQNum, outputQ, outputQNum);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2487,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlLoadWithConfig(const aclmdlConfigHandle* handle, uint32_t* modelId){
    begin_func("aclmdlLoadWithConfig");



        aclError result;
        result = so_aclmdlLoadWithConfig(handle, modelId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2503,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlQuerySize(const char* fileName, size_t* workSize, size_t* weightSize){
    begin_func("aclmdlQuerySize");



        aclError result;
        result = so_aclmdlQuerySize(fileName, workSize, weightSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2519,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlQuerySizeFromMem(const void* model, size_t modelSize, size_t* workSize, size_t* weightSize){
    begin_func("aclmdlQuerySizeFromMem");



        aclError result;
        result = so_aclmdlQuerySizeFromMem(model, modelSize, workSize, weightSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2535,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPAxSwapSwitch(aclmdlAIPP* aippParmsSet, int8_t axSwapSwitch){
    begin_func("aclmdlSetAIPPAxSwapSwitch");



        aclError result;
        result = so_aclmdlSetAIPPAxSwapSwitch(aippParmsSet, axSwapSwitch);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2551,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPByInputIndex(uint32_t modelId, aclmdlDataset* dataset, size_t index, const aclmdlAIPP* aippParmsSet){
    begin_func("aclmdlSetAIPPByInputIndex");



        aclError result;
        result = so_aclmdlSetAIPPByInputIndex(modelId, dataset, index, aippParmsSet);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2567,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPCropParams(aclmdlAIPP* aippParmsSet, int8_t cropSwitch, int32_t cropStartPosW, int32_t cropStartPosH, int32_t cropSizeW, int32_t cropSizeH, uint64_t batchIndex){
    begin_func("aclmdlSetAIPPCropParams");



        aclError result;
        result = so_aclmdlSetAIPPCropParams(aippParmsSet, cropSwitch, cropStartPosW, cropStartPosH, cropSizeW, cropSizeH, batchIndex);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2583,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPCscParams(aclmdlAIPP* aippParmsSet, int8_t cscSwitch, int16_t cscMatrixR0C0, int16_t cscMatrixR0C1, int16_t cscMatrixR0C2, int16_t cscMatrixR1C0, int16_t cscMatrixR1C1, int16_t cscMatrixR1C2, int16_t cscMatrixR2C0, int16_t cscMatrixR2C1, int16_t cscMatrixR2C2, uint8_t cscOutputBiasR0, uint8_t cscOutputBiasR1, uint8_t cscOutputBiasR2, uint8_t cscInputBiasR0, uint8_t cscInputBiasR1, uint8_t cscInputBiasR2){
    begin_func("aclmdlSetAIPPCscParams");



        aclError result;
        result = so_aclmdlSetAIPPCscParams(aippParmsSet, cscSwitch, cscMatrixR0C0, cscMatrixR0C1, cscMatrixR0C2, cscMatrixR1C0, cscMatrixR1C1, cscMatrixR1C2, cscMatrixR2C0, cscMatrixR2C1, cscMatrixR2C2, cscOutputBiasR0, cscOutputBiasR1, cscOutputBiasR2, cscInputBiasR0, cscInputBiasR1, cscInputBiasR2);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2599,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPDtcPixelMean(aclmdlAIPP* aippParmsSet, int16_t dtcPixelMeanChn0, int16_t dtcPixelMeanChn1, int16_t dtcPixelMeanChn2, int16_t dtcPixelMeanChn3, uint64_t batchIndex){
    begin_func("aclmdlSetAIPPDtcPixelMean");



        aclError result;
        result = so_aclmdlSetAIPPDtcPixelMean(aippParmsSet, dtcPixelMeanChn0, dtcPixelMeanChn1, dtcPixelMeanChn2, dtcPixelMeanChn3, batchIndex);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2615,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPDtcPixelMin(aclmdlAIPP* aippParmsSet, float dtcPixelMinChn0, float dtcPixelMinChn1, float dtcPixelMinChn2, float dtcPixelMinChn3, uint64_t batchIndex){
    begin_func("aclmdlSetAIPPDtcPixelMin");



        aclError result;
        result = so_aclmdlSetAIPPDtcPixelMin(aippParmsSet, dtcPixelMinChn0, dtcPixelMinChn1, dtcPixelMinChn2, dtcPixelMinChn3, batchIndex);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2631,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPInputFormat(aclmdlAIPP* aippParmsSet, aclAippInputFormat inputFormat){
    begin_func("aclmdlSetAIPPInputFormat");



        aclError result;
        result = so_aclmdlSetAIPPInputFormat(aippParmsSet, inputFormat);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2647,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPPaddingParams(aclmdlAIPP* aippParmsSet, int8_t paddingSwitch, int32_t paddingSizeTop, int32_t paddingSizeBottom, int32_t paddingSizeLeft, int32_t paddingSizeRight, uint64_t batchIndex){
    begin_func("aclmdlSetAIPPPaddingParams");



        aclError result;
        result = so_aclmdlSetAIPPPaddingParams(aippParmsSet, paddingSwitch, paddingSizeTop, paddingSizeBottom, paddingSizeLeft, paddingSizeRight, batchIndex);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2663,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPPixelVarReci(aclmdlAIPP* aippParmsSet, float dtcPixelVarReciChn0, float dtcPixelVarReciChn1, float dtcPixelVarReciChn2, float dtcPixelVarReciChn3, uint64_t batchIndex){
    begin_func("aclmdlSetAIPPPixelVarReci");



        aclError result;
        result = so_aclmdlSetAIPPPixelVarReci(aippParmsSet, dtcPixelVarReciChn0, dtcPixelVarReciChn1, dtcPixelVarReciChn2, dtcPixelVarReciChn3, batchIndex);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2679,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPRbuvSwapSwitch(aclmdlAIPP* aippParmsSet, int8_t rbuvSwapSwitch){
    begin_func("aclmdlSetAIPPRbuvSwapSwitch");



        aclError result;
        result = so_aclmdlSetAIPPRbuvSwapSwitch(aippParmsSet, rbuvSwapSwitch);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2695,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPScfParams(aclmdlAIPP* aippParmsSet, int8_t scfSwitch, int32_t scfInputSizeW, int32_t scfInputSizeH, int32_t scfOutputSizeW, int32_t scfOutputSizeH, uint64_t batchIndex){
    begin_func("aclmdlSetAIPPScfParams");



        aclError result;
        result = so_aclmdlSetAIPPScfParams(aippParmsSet, scfSwitch, scfInputSizeW, scfInputSizeH, scfOutputSizeW, scfOutputSizeH, batchIndex);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2711,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetAIPPSrcImageSize(aclmdlAIPP* aippParmsSet, int32_t srcImageSizeW, int32_t srcImageSizeH){
    begin_func("aclmdlSetAIPPSrcImageSize");



        aclError result;
        result = so_aclmdlSetAIPPSrcImageSize(aippParmsSet, srcImageSizeW, srcImageSizeH);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2727,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetConfigOpt(aclmdlConfigHandle* handle, aclmdlConfigAttr attr, const void* attrValue, size_t valueSize){
    begin_func("aclmdlSetConfigOpt");



        aclError result;
        result = so_aclmdlSetConfigOpt(handle, attr, attrValue, valueSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2743,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetDatasetTensorDesc(aclmdlDataset* dataset, aclTensorDesc* tensorDesc, size_t index){
    begin_func("aclmdlSetDatasetTensorDesc");



        aclError result;
        result = so_aclmdlSetDatasetTensorDesc(dataset, tensorDesc, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2759,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetDump(const char* dumpCfgPath){
    begin_func("aclmdlSetDump");



        aclError result;
        result = so_aclmdlSetDump(dumpCfgPath);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2775,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetDynamicBatchSize(uint32_t modelId, aclmdlDataset* dataset, size_t index, uint64_t batchSize){
    begin_func("aclmdlSetDynamicBatchSize");



        aclError result;
        result = so_aclmdlSetDynamicBatchSize(modelId, dataset, index, batchSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2791,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetDynamicHWSize(uint32_t modelId, aclmdlDataset* dataset, size_t index, uint64_t height, uint64_t width){
    begin_func("aclmdlSetDynamicHWSize");



        aclError result;
        result = so_aclmdlSetDynamicHWSize(modelId, dataset, index, height, width);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2807,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetExecConfigOpt(aclmdlExecConfigHandle* handle, aclmdlExecConfigAttr attr, const void* attrValue, size_t valueSize){
    begin_func("aclmdlSetExecConfigOpt");



        aclError result;
        result = so_aclmdlSetExecConfigOpt(handle, attr, attrValue, valueSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2823,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetInputAIPP(uint32_t modelId, aclmdlDataset* dataset, size_t index, const aclmdlAIPP* aippParmsSet){
    begin_func("aclmdlSetInputAIPP");



        aclError result;
        result = so_aclmdlSetInputAIPP(modelId, dataset, index, aippParmsSet);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2839,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlSetInputDynamicDims(uint32_t modelId, aclmdlDataset* dataset, size_t index, const aclmdlIODims* dims){
    begin_func("aclmdlSetInputDynamicDims");



        aclError result;
        result = so_aclmdlSetInputDynamicDims(modelId, dataset, index, dims);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2855,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclmdlUnload(uint32_t modelId){
    begin_func("aclmdlUnload");



        aclError result;
        result = so_aclmdlUnload(modelId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2871,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopCast(const aclTensorDesc* srcDesc, const aclDataBuffer* srcBuffer, const aclTensorDesc* dstDesc, aclDataBuffer* dstBuffer, uint8_t truncate, aclrtStream stream){
    begin_func("aclopCast");



        aclError result;
        result = so_aclopCast(srcDesc, srcBuffer, dstDesc, dstBuffer, truncate, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2887,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopCompile(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], int numOutputs, const aclTensorDesc* const outputDesc[], const aclopAttr* attr, aclopEngineType engineType, aclopCompileType compileFlag, const char* opPath){
    begin_func("aclopCompile");



        aclError result;
        result = so_aclopCompile(opType, numInputs, inputDesc, numOutputs, outputDesc, attr, engineType, compileFlag, opPath);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2903,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopCompileAndExecute(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], const aclDataBuffer* const inputs[], int numOutputs, const aclTensorDesc* const outputDesc[], aclDataBuffer* const outputs[], const aclopAttr* attr, aclopEngineType engineType, aclopCompileType compileFlag, const char* opPath, aclrtStream stream){
    begin_func("aclopCompileAndExecute");



        aclError result;
        result = so_aclopCompileAndExecute(opType, numInputs, inputDesc, inputs, numOutputs, outputDesc, outputs, attr, engineType, compileFlag, opPath, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2919,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopCompileAndExecuteV2(const char* opType, int numInputs, aclTensorDesc* inputDesc[], aclDataBuffer* inputs[], int numOutputs, aclTensorDesc* outputDesc[], aclDataBuffer* outputs[], aclopAttr* attr, aclopEngineType engineType, aclopCompileType compileFlag, const char* opPath, aclrtStream stream){
    begin_func("aclopCompileAndExecuteV2");



        aclError result;
        result = so_aclopCompileAndExecuteV2(opType, numInputs, inputDesc, inputs, numOutputs, outputDesc, outputs, attr, engineType, compileFlag, opPath, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2935,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclopAttr* aclopCreateAttr(){
    begin_func("aclopCreateAttr");



        aclopAttr* result;
        result = so_aclopCreateAttr();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2951,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopCreateHandle(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], int numOutputs, const aclTensorDesc* const outputDesc[], const aclopAttr* opAttr, aclopHandle** handle){
    begin_func("aclopCreateHandle");



        aclError result;
        result = so_aclopCreateHandle(opType, numInputs, inputDesc, numOutputs, outputDesc, opAttr, handle);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2967,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopCreateHandleForCast(aclTensorDesc* srcDesc, aclTensorDesc* dstDesc, uint8_t truncate, aclopHandle** handle){
    begin_func("aclopCreateHandleForCast");



        aclError result;
        result = so_aclopCreateHandleForCast(srcDesc, dstDesc, truncate, handle);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2983,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopCreateKernel(const char* opType, const char* kernelId, const char* kernelName, void* binData, int binSize, aclopEngineType enginetype, aclDataDeallocator deallocator){
    begin_func("aclopCreateKernel");



        aclError result;
        result = so_aclopCreateKernel(opType, kernelId, kernelName, binData, binSize, enginetype, deallocator);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,2999,__func__,result); } } while(0);



        end_func("func");

    return result;
}
void aclopDestroyAttr(const aclopAttr* attr){
    begin_func("aclopDestroyAttr");



        so_aclopDestroyAttr(attr);


        end_func("func");

    return ;
}
void aclopDestroyHandle(aclopHandle* handle){
    begin_func("aclopDestroyHandle");



        so_aclopDestroyHandle(handle);


        end_func("func");

    return ;
}
aclError aclopExecWithHandle(aclopHandle* handle, int numInputs, const aclDataBuffer* const inputs[], int numOutputs, aclDataBuffer* const outputs[], aclrtStream stream){
    begin_func("aclopExecWithHandle");



        aclError result;
        result = so_aclopExecWithHandle(handle, numInputs, inputs, numOutputs, outputs, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3039,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopExecute(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], const aclDataBuffer* const inputs[], int numOutputs, const aclTensorDesc* const outputDesc[], aclDataBuffer* const outputs[], const aclopAttr* attr, aclrtStream stream){
    begin_func("aclopExecute");



        aclError result;
        result = so_aclopExecute(opType, numInputs, inputDesc, inputs, numOutputs, outputDesc, outputs, attr, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3055,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopExecuteV2(const char* opType, int numInputs, aclTensorDesc* inputDesc[], aclDataBuffer* inputs[], int numOutputs, aclTensorDesc* outputDesc[], aclDataBuffer* outputs[], aclopAttr* attr, aclrtStream stream){
    begin_func("aclopExecuteV2");



        aclError result;
        result = so_aclopExecuteV2(opType, numInputs, inputDesc, inputs, numOutputs, outputDesc, outputs, attr, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3071,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopInferShape(const char* opType, int numInputs, aclTensorDesc* inputDesc[], aclDataBuffer* inputs[], int numOutputs, aclTensorDesc* outputDesc[], aclopAttr* attr){
    begin_func("aclopInferShape");



        aclError result;
        result = so_aclopInferShape(opType, numInputs, inputDesc, inputs, numOutputs, outputDesc, attr);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3087,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopLoad(const void* model, size_t modelSize){
    begin_func("aclopLoad");



        aclError result;
        result = so_aclopLoad(model, modelSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3103,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopRegisterCompileFunc(const char* opType, aclopCompileFunc func){
    begin_func("aclopRegisterCompileFunc");



        aclError result;
        result = so_aclopRegisterCompileFunc(opType, func);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3119,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetAttrBool(aclopAttr* attr, const char* attrName, uint8_t attrValue){
    begin_func("aclopSetAttrBool");



        aclError result;
        result = so_aclopSetAttrBool(attr, attrName, attrValue);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3135,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetAttrDataType(aclopAttr* attr, const char* attrName, aclDataType attrValue){
    begin_func("aclopSetAttrDataType");



        aclError result;
        result = so_aclopSetAttrDataType(attr, attrName, attrValue);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3151,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetAttrFloat(aclopAttr* attr, const char* attrName, float attrValue){
    begin_func("aclopSetAttrFloat");



        aclError result;
        result = so_aclopSetAttrFloat(attr, attrName, attrValue);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3167,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetAttrInt(aclopAttr* attr, const char* attrName, int64_t attrValue){
    begin_func("aclopSetAttrInt");



        aclError result;
        result = so_aclopSetAttrInt(attr, attrName, attrValue);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3183,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetAttrListBool(aclopAttr* attr, const char* attrName, int numValues, const uint8_t* values){
    begin_func("aclopSetAttrListBool");



        aclError result;
        result = so_aclopSetAttrListBool(attr, attrName, numValues, values);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3199,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetAttrListDataType(aclopAttr* attr, const char* attrName, int numValues, const aclDataType values[]){
    begin_func("aclopSetAttrListDataType");



        aclError result;
        result = so_aclopSetAttrListDataType(attr, attrName, numValues, values);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3215,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetAttrListFloat(aclopAttr* attr, const char* attrName, int numValues, const float* values){
    begin_func("aclopSetAttrListFloat");



        aclError result;
        result = so_aclopSetAttrListFloat(attr, attrName, numValues, values);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3231,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetAttrListInt(aclopAttr* attr, const char* attrName, int numValues, const int64_t* values){
    begin_func("aclopSetAttrListInt");



        aclError result;
        result = so_aclopSetAttrListInt(attr, attrName, numValues, values);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3247,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetAttrListListInt(aclopAttr* attr, const char* attrName, int numLists, const int* numValues, const int64_t* const values[]){
    begin_func("aclopSetAttrListListInt");



        aclError result;
        result = so_aclopSetAttrListListInt(attr, attrName, numLists, numValues, values);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3263,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetAttrListString(aclopAttr* attr, const char* attrName, int numValues, const char** values){
    begin_func("aclopSetAttrListString");



        aclError result;
        result = so_aclopSetAttrListString(attr, attrName, numValues, values);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3279,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetAttrString(aclopAttr* attr, const char* attrName, const char* attrValue){
    begin_func("aclopSetAttrString");



        aclError result;
        result = so_aclopSetAttrString(attr, attrName, attrValue);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3295,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetCompileFlag(aclOpCompileFlag flag){
    begin_func("aclopSetCompileFlag");



        aclError result;
        result = so_aclopSetCompileFlag(flag);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3311,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetKernelArgs(aclopKernelDesc* kernelDesc, const char* kernelId, uint32_t blockDim, const void* args, uint32_t argSize){
    begin_func("aclopSetKernelArgs");



        aclError result;
        result = so_aclopSetKernelArgs(kernelDesc, kernelId, blockDim, args, argSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3327,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetKernelWorkspaceSizes(aclopKernelDesc* kernelDesc, int numWorkspaces, size_t* workspaceSizes){
    begin_func("aclopSetKernelWorkspaceSizes");



        aclError result;
        result = so_aclopSetKernelWorkspaceSizes(kernelDesc, numWorkspaces, workspaceSizes);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3343,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopSetModelDir(const char* modelDir){
    begin_func("aclopSetModelDir");



        aclError result;
        result = so_aclopSetModelDir(modelDir);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3359,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopStartDumpArgs(uint32_t dumpType, const char* path){
    begin_func("aclopStartDumpArgs");



        aclError result;
        result = so_aclopStartDumpArgs(dumpType, path);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3375,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopStopDumpArgs(uint32_t dumpType){
    begin_func("aclopStopDumpArgs");



        aclError result;
        result = so_aclopStopDumpArgs(dumpType);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3391,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopUnregisterCompileFunc(const char* opType){
    begin_func("aclopUnregisterCompileFunc");



        aclError result;
        result = so_aclopUnregisterCompileFunc(opType);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3407,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclopUpdateParams(const char* opType, int numInputs, const aclTensorDesc* const inputDesc[], int numOutputs, const aclTensorDesc* const outputDesc[], const aclopAttr* attr){
    begin_func("aclopUpdateParams");



        aclError result;
        result = so_aclopUpdateParams(opType, numInputs, inputDesc, numOutputs, outputDesc, attr);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3423,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclprofConfig* aclprofCreateConfig(uint32_t* deviceIdList, uint32_t deviceNums, aclprofAicoreMetrics aicoreMetrics, aclprofAicoreEvents* aicoreEvents, uint64_t dataTypeConfig){
    begin_func("aclprofCreateConfig");



        aclprofConfig* result;
        result = so_aclprofCreateConfig(deviceIdList, deviceNums, aicoreMetrics, aicoreEvents, dataTypeConfig);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3439,__func__,result); } } while(0);



        end_func("func");

    return result;
}
void* aclprofCreateStamp(void){
    begin_func("aclprofCreateStamp");



        void* result;
        result = so_aclprofCreateStamp(void);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3455,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclprofStepInfo* aclprofCreateStepInfo(void){
    begin_func("aclprofCreateStepInfo");



        aclprofStepInfo* result;
        result = so_aclprofCreateStepInfo(void);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3471,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclprofSubscribeConfig* aclprofCreateSubscribeConfig(int8_t timeInfoSwitch, aclprofAicoreMetrics aicoreMetrics, void* fd){
    begin_func("aclprofCreateSubscribeConfig");



        aclprofSubscribeConfig* result;
        result = so_aclprofCreateSubscribeConfig(timeInfoSwitch, aicoreMetrics, fd);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3487,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofDestroyConfig(const aclprofConfig* profilerConfig){
    begin_func("aclprofDestroyConfig");



        aclError result;
        result = so_aclprofDestroyConfig(profilerConfig);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3503,__func__,result); } } while(0);



        end_func("func");

    return result;
}
void aclprofDestroyStamp(void* stamp){
    begin_func("aclprofDestroyStamp");



        so_aclprofDestroyStamp(stamp);


        end_func("func");

    return ;
}
void aclprofDestroyStepInfo(aclprofStepInfo* stepinfo){
    begin_func("aclprofDestroyStepInfo");



        so_aclprofDestroyStepInfo(stepinfo);


        end_func("func");

    return ;
}
aclError aclprofDestroySubscribeConfig(const aclprofSubscribeConfig* profSubscribeConfig){
    begin_func("aclprofDestroySubscribeConfig");



        aclError result;
        result = so_aclprofDestroySubscribeConfig(profSubscribeConfig);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3543,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofFinalize(){
    begin_func("aclprofFinalize");



        aclError result;
        result = so_aclprofFinalize();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3559,__func__,result); } } while(0);



        end_func("func");

    return result;
}
size_t aclprofGetModelId(const void* opInfo, size_t opInfoLen, uint32_t index){
    begin_func("aclprofGetModelId");



        size_t result;
        result = so_aclprofGetModelId(opInfo, opInfoLen, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3575,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofGetOpDescSize(size_t* opDescSize){
    begin_func("aclprofGetOpDescSize");



        aclError result;
        result = so_aclprofGetOpDescSize(opDescSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3591,__func__,result); } } while(0);



        end_func("func");

    return result;
}
uint64_t aclprofGetOpDuration(const void* opInfo, size_t opInfoLen, uint32_t index){
    begin_func("aclprofGetOpDuration");



        uint64_t result;
        result = so_aclprofGetOpDuration(opInfo, opInfoLen, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3607,__func__,result); } } while(0);



        end_func("func");

    return result;
}
uint64_t aclprofGetOpEnd(const void* opInfo, size_t opInfoLen, uint32_t index){
    begin_func("aclprofGetOpEnd");



        uint64_t result;
        result = so_aclprofGetOpEnd(opInfo, opInfoLen, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3623,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofGetOpName(const void* opInfo, size_t opInfoLen, uint32_t index, char* opName, size_t opNameLen){
    begin_func("aclprofGetOpName");



        aclError result;
        result = so_aclprofGetOpName(opInfo, opInfoLen, index, opName, opNameLen);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3639,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofGetOpNameLen(const void* opInfo, size_t opInfoLen, uint32_t index, size_t* opNameLen){
    begin_func("aclprofGetOpNameLen");



        aclError result;
        result = so_aclprofGetOpNameLen(opInfo, opInfoLen, index, opNameLen);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3655,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofGetOpNum(const void* opInfo, size_t opInfoLen, uint32_t* opNumber){
    begin_func("aclprofGetOpNum");



        aclError result;
        result = so_aclprofGetOpNum(opInfo, opInfoLen, opNumber);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3671,__func__,result); } } while(0);



        end_func("func");

    return result;
}
uint64_t aclprofGetOpStart(const void* opInfo, size_t opInfoLen, uint32_t index){
    begin_func("aclprofGetOpStart");



        uint64_t result;
        result = so_aclprofGetOpStart(opInfo, opInfoLen, index);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3687,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofGetOpType(const void* opInfo, size_t opInfoLen, uint32_t index, char* opType, size_t opTypeLen){
    begin_func("aclprofGetOpType");



        aclError result;
        result = so_aclprofGetOpType(opInfo, opInfoLen, index, opType, opTypeLen);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3703,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofGetOpTypeLen(const void* opInfo, size_t opInfoLen, uint32_t index, size_t* opTypeLen){
    begin_func("aclprofGetOpTypeLen");



        aclError result;
        result = so_aclprofGetOpTypeLen(opInfo, opInfoLen, index, opTypeLen);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3719,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofGetStepTimestamp(aclprofStepInfo* stepInfo, aclprofStepTag tag, aclrtStream stream){
    begin_func("aclprofGetStepTimestamp");



        aclError result;
        result = so_aclprofGetStepTimestamp(stepInfo, tag, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3735,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofInit(const char* profilerResultPath, size_t length){
    begin_func("aclprofInit");



        aclError result;
        result = so_aclprofInit(profilerResultPath, length);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3751,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofMark(void* stamp){
    begin_func("aclprofMark");



        aclError result;
        result = so_aclprofMark(stamp);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3767,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofMarkEx(const char* msg, size_t msgLen, aclrtStream stream){
    begin_func("aclprofMarkEx");



        aclError result;
        result = so_aclprofMarkEx(msg, msgLen, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3783,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofModelSubscribe(uint32_t modelId, const aclprofSubscribeConfig* profSubscribeConfig){
    begin_func("aclprofModelSubscribe");



        aclError result;
        result = so_aclprofModelSubscribe(modelId, profSubscribeConfig);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3799,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofModelUnSubscribe(uint32_t modelId){
    begin_func("aclprofModelUnSubscribe");



        aclError result;
        result = so_aclprofModelUnSubscribe(modelId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3815,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofPop(){
    begin_func("aclprofPop");



        aclError result;
        result = so_aclprofPop();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3831,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofPush(void* stamp){
    begin_func("aclprofPush");



        aclError result;
        result = so_aclprofPush(stamp);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3847,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofRangeStart(void* stamp, uint32_t* rangeId){
    begin_func("aclprofRangeStart");



        aclError result;
        result = so_aclprofRangeStart(stamp, rangeId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3863,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofRangeStop(uint32_t rangeId){
    begin_func("aclprofRangeStop");



        aclError result;
        result = so_aclprofRangeStop(rangeId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3879,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofSetConfig(aclprofConfigType configType, const char* config, size_t configLength){
    begin_func("aclprofSetConfig");



        aclError result;
        result = so_aclprofSetConfig(configType, config, configLength);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3895,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofSetStampTraceMessage(void* stamp, const char* msg, uint32_t msgLen){
    begin_func("aclprofSetStampTraceMessage");



        aclError result;
        result = so_aclprofSetStampTraceMessage(stamp, msg, msgLen);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3911,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofStart(const aclprofConfig* profilerConfig){
    begin_func("aclprofStart");



        aclError result;
        result = so_aclprofStart(profilerConfig);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3927,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclprofStop(const aclprofConfig* profilerConfig){
    begin_func("aclprofStop");



        aclError result;
        result = so_aclprofStop(profilerConfig);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3943,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclrtAllocatorDesc aclrtAllocatorCreateDesc(){
    begin_func("aclrtAllocatorCreateDesc");



        aclrtAllocatorDesc result;
        result = so_aclrtAllocatorCreateDesc();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3959,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtAllocatorDestroyDesc(aclrtAllocatorDesc allocatorDesc){
    begin_func("aclrtAllocatorDestroyDesc");



        aclError result;
        result = so_aclrtAllocatorDestroyDesc(allocatorDesc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3975,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtAllocatorRegister(aclrtStream stream, aclrtAllocatorDesc allocatorDesc){
    begin_func("aclrtAllocatorRegister");



        aclError result;
        result = so_aclrtAllocatorRegister(stream, allocatorDesc);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,3991,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtAllocatorSetAllocAdviseFuncToDesc(aclrtAllocatorDesc allocatorDesc, aclrtAllocatorAllocAdviseFunc func){
    begin_func("aclrtAllocatorSetAllocAdviseFuncToDesc");



        aclError result;
        result = so_aclrtAllocatorSetAllocAdviseFuncToDesc(allocatorDesc, func);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4007,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtAllocatorSetAllocFuncToDesc(aclrtAllocatorDesc allocatorDesc, aclrtAllocatorAllocFunc func){
    begin_func("aclrtAllocatorSetAllocFuncToDesc");



        aclError result;
        result = so_aclrtAllocatorSetAllocFuncToDesc(allocatorDesc, func);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4023,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtAllocatorSetFreeFuncToDesc(aclrtAllocatorDesc allocatorDesc, aclrtAllocatorFreeFunc func){
    begin_func("aclrtAllocatorSetFreeFuncToDesc");



        aclError result;
        result = so_aclrtAllocatorSetFreeFuncToDesc(allocatorDesc, func);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4039,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtAllocatorSetGetAddrFromBlockFuncToDesc(aclrtAllocatorDesc allocatorDesc, aclrtAllocatorGetAddrFromBlockFunc func){
    begin_func("aclrtAllocatorSetGetAddrFromBlockFuncToDesc");



        aclError result;
        result = so_aclrtAllocatorSetGetAddrFromBlockFuncToDesc(allocatorDesc, func);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4055,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtAllocatorSetObjToDesc(aclrtAllocatorDesc allocatorDesc, aclrtAllocator allocator){
    begin_func("aclrtAllocatorSetObjToDesc");



        aclError result;
        result = so_aclrtAllocatorSetObjToDesc(allocatorDesc, allocator);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4071,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtAllocatorUnregister(aclrtStream stream){
    begin_func("aclrtAllocatorUnregister");



        aclError result;
        result = so_aclrtAllocatorUnregister(stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4087,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtBinaryGetFunction(const aclrtBinHandle binHandle, const char* kernelName, aclrtFuncHandle* funcHandle){
    begin_func("aclrtBinaryGetFunction");



        aclError result;
        result = so_aclrtBinaryGetFunction(binHandle, kernelName, funcHandle);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4103,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtBinaryLoad(const aclrtBinary binary, aclrtBinHandle* binHandle){
    begin_func("aclrtBinaryLoad");



        aclError result;
        result = so_aclrtBinaryLoad(binary, binHandle);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4119,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtBinaryUnLoad(aclrtBinHandle binHandle){
    begin_func("aclrtBinaryUnLoad");



        aclError result;
        result = so_aclrtBinaryUnLoad(binHandle);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4135,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclrtBinary aclrtCreateBinary(const void* data, size_t dataLen){
    begin_func("aclrtCreateBinary");



        aclrtBinary result;
        result = so_aclrtCreateBinary(data, dataLen);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4151,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtCreateContext(aclrtContext* context, int32_t deviceId){
    begin_func("aclrtCreateContext");



        aclError result;
        result = so_aclrtCreateContext(context, deviceId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4167,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtCreateEvent(aclrtEvent* event){
    begin_func("aclrtCreateEvent");



        aclError result;
        result = so_aclrtCreateEvent(event);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4183,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtCreateEventExWithFlag(aclrtEvent* event, uint32_t flag){
    begin_func("aclrtCreateEventExWithFlag");



        aclError result;
        result = so_aclrtCreateEventExWithFlag(event, flag);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4199,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtCreateEventWithFlag(aclrtEvent* event, uint32_t flag){
    begin_func("aclrtCreateEventWithFlag");



        aclError result;
        result = so_aclrtCreateEventWithFlag(event, flag);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4215,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclrtGroupInfo* aclrtCreateGroupInfo(){
    begin_func("aclrtCreateGroupInfo");



        aclrtGroupInfo* result;
        result = so_aclrtCreateGroupInfo();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4231,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtCreateStream(aclrtStream* stream){
    begin_func("aclrtCreateStream");



        aclError result;
        result = so_aclrtCreateStream(stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4247,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtCreateStreamWithConfig(aclrtStream* stream, uint32_t priority, uint32_t flag){
    begin_func("aclrtCreateStreamWithConfig");



        aclError result;
        result = so_aclrtCreateStreamWithConfig(stream, priority, flag);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4263,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtCtxGetSysParamOpt(aclSysParamOpt opt, int64_t* value){
    begin_func("aclrtCtxGetSysParamOpt");



        aclError result;
        result = so_aclrtCtxGetSysParamOpt(opt, value);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4279,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtCtxSetSysParamOpt(aclSysParamOpt opt, int64_t value){
    begin_func("aclrtCtxSetSysParamOpt");



        aclError result;
        result = so_aclrtCtxSetSysParamOpt(opt, value);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4295,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtDestroyBinary(aclrtBinary binary){
    begin_func("aclrtDestroyBinary");



        aclError result;
        result = so_aclrtDestroyBinary(binary);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4311,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtDestroyContext(aclrtContext context){
    begin_func("aclrtDestroyContext");



        aclError result;
        result = so_aclrtDestroyContext(context);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4327,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtDestroyEvent(aclrtEvent event){
    begin_func("aclrtDestroyEvent");



        aclError result;
        result = so_aclrtDestroyEvent(event);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4343,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtDestroyGroupInfo(aclrtGroupInfo* groupInfo){
    begin_func("aclrtDestroyGroupInfo");



        aclError result;
        result = so_aclrtDestroyGroupInfo(groupInfo);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4359,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtDestroyStream(aclrtStream stream){
    begin_func("aclrtDestroyStream");



        aclError result;
        result = so_aclrtDestroyStream(stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4375,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtDestroyStreamForce(aclrtStream stream){
    begin_func("aclrtDestroyStreamForce");



        aclError result;
        result = so_aclrtDestroyStreamForce(stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4391,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtDeviceCanAccessPeer(int32_t* canAccessPeer, int32_t deviceId, int32_t peerDeviceId){
    begin_func("aclrtDeviceCanAccessPeer");



        aclError result;
        result = so_aclrtDeviceCanAccessPeer(canAccessPeer, deviceId, peerDeviceId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4407,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtDeviceDisablePeerAccess(int32_t peerDeviceId){
    begin_func("aclrtDeviceDisablePeerAccess");



        aclError result;
        result = so_aclrtDeviceDisablePeerAccess(peerDeviceId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4423,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtDeviceEnablePeerAccess(int32_t peerDeviceId, uint32_t flags){
    begin_func("aclrtDeviceEnablePeerAccess");



        aclError result;
        result = so_aclrtDeviceEnablePeerAccess(peerDeviceId, flags);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4439,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtDeviceGetBareTgid(int32_t* pid){
    begin_func("aclrtDeviceGetBareTgid");



        aclError result;
        result = so_aclrtDeviceGetBareTgid(pid);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4455,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtEventElapsedTime(float* ms, aclrtEvent startEvent, aclrtEvent endEvent){
    begin_func("aclrtEventElapsedTime");



        aclError result;
        result = so_aclrtEventElapsedTime(ms, startEvent, endEvent);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4471,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtFree(void* devPtr){
    begin_func("aclrtFree");



        aclError result;
        result = so_aclrtFree(devPtr);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4487,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtFreeHost(void* hostPtr){
    begin_func("aclrtFreeHost");



        aclError result;
        result = so_aclrtFreeHost(hostPtr);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4503,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtFreePhysical(aclrtDrvMemHandle handle){
    begin_func("aclrtFreePhysical");



        aclError result;
        result = so_aclrtFreePhysical(handle);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4519,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetAllGroupInfo(aclrtGroupInfo* groupInfo){
    begin_func("aclrtGetAllGroupInfo");



        aclError result;
        result = so_aclrtGetAllGroupInfo(groupInfo);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4535,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetCurrentContext(aclrtContext* context){
    begin_func("aclrtGetCurrentContext");



        aclError result;
        result = so_aclrtGetCurrentContext(context);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4551,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetDevice(int32_t* deviceId){
    begin_func("aclrtGetDevice");



        aclError result;
        result = so_aclrtGetDevice(deviceId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4567,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetDeviceCount(uint32_t* count){
    begin_func("aclrtGetDeviceCount");



        aclError result;
        result = so_aclrtGetDeviceCount(count);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4583,__func__,result); } } while(0);



        end_func("func");

    return result;
}
uint32_t aclrtGetDeviceIdFromExceptionInfo(const aclrtExceptionInfo* info){
    begin_func("aclrtGetDeviceIdFromExceptionInfo");



        uint32_t result;
        result = so_aclrtGetDeviceIdFromExceptionInfo(info);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4599,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetDeviceSatMode(aclrtFloatOverflowMode* mode){
    begin_func("aclrtGetDeviceSatMode");



        aclError result;
        result = so_aclrtGetDeviceSatMode(mode);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4615,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetDeviceUtilizationRate(int32_t deviceId, aclrtUtilizationInfo* utilizationInfo){
    begin_func("aclrtGetDeviceUtilizationRate");



        aclError result;
        result = so_aclrtGetDeviceUtilizationRate(deviceId, utilizationInfo);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4631,__func__,result); } } while(0);



        end_func("func");

    return result;
}
uint32_t aclrtGetErrorCodeFromExceptionInfo(const aclrtExceptionInfo* info){
    begin_func("aclrtGetErrorCodeFromExceptionInfo");



        uint32_t result;
        result = so_aclrtGetErrorCodeFromExceptionInfo(info);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4647,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetGroupCount(uint32_t* count){
    begin_func("aclrtGetGroupCount");



        aclError result;
        result = so_aclrtGetGroupCount(count);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4663,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetGroupInfoDetail(const aclrtGroupInfo* groupInfo, int32_t groupIndex, aclrtGroupAttr attr, void* attrValue, size_t valueLen, size_t* paramRetSize){
    begin_func("aclrtGetGroupInfoDetail");



        aclError result;
        result = so_aclrtGetGroupInfoDetail(groupInfo, groupIndex, attr, attrValue, valueLen, paramRetSize);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4679,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetMemInfo(aclrtMemAttr attr, size_t* free, size_t* total){
    begin_func("aclrtGetMemInfo");



        aclError result;
        result = so_aclrtGetMemInfo(attr, free, total);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4695,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetOverflowStatus(void* outputAddr, size_t outputSize, aclrtStream stream){
    begin_func("aclrtGetOverflowStatus");



        aclError result;
        result = so_aclrtGetOverflowStatus(outputAddr, outputSize, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4711,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetRunMode(aclrtRunMode* runMode){
    begin_func("aclrtGetRunMode");



        aclError result;
        result = so_aclrtGetRunMode(runMode);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4727,__func__,result); } } while(0);



        end_func("func");

    return result;
}
const char* aclrtGetSocName(){
    begin_func("aclrtGetSocName");



        const char* result;
        result = so_aclrtGetSocName();

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4743,__func__,result); } } while(0);



        end_func("func");

    return result;
}
uint32_t aclrtGetStreamIdFromExceptionInfo(const aclrtExceptionInfo* info){
    begin_func("aclrtGetStreamIdFromExceptionInfo");



        uint32_t result;
        result = so_aclrtGetStreamIdFromExceptionInfo(info);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4759,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetStreamOverflowSwitch(aclrtStream stream, uint32_t* flag){
    begin_func("aclrtGetStreamOverflowSwitch");



        aclError result;
        result = so_aclrtGetStreamOverflowSwitch(stream, flag);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4775,__func__,result); } } while(0);



        end_func("func");

    return result;
}
uint32_t aclrtGetTaskIdFromExceptionInfo(const aclrtExceptionInfo* info){
    begin_func("aclrtGetTaskIdFromExceptionInfo");



        uint32_t result;
        result = so_aclrtGetTaskIdFromExceptionInfo(info);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4791,__func__,result); } } while(0);



        end_func("func");

    return result;
}
uint32_t aclrtGetThreadIdFromExceptionInfo(const aclrtExceptionInfo* info){
    begin_func("aclrtGetThreadIdFromExceptionInfo");



        uint32_t result;
        result = so_aclrtGetThreadIdFromExceptionInfo(info);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4807,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtGetVersion(int32_t* majorVersion, int32_t* minorVersion, int32_t* patchVersion){
    begin_func("aclrtGetVersion");



        aclError result;
        result = so_aclrtGetVersion(majorVersion, minorVersion, patchVersion);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4823,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtLaunchCallback(aclrtCallback fn, void* userData, aclrtCallbackBlockType blockType, aclrtStream stream){
    begin_func("aclrtLaunchCallback");



        aclError result;
        result = so_aclrtLaunchCallback(fn, userData, blockType, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4839,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtLaunchKernel(aclrtFuncHandle funcHandle, uint32_t blockDim, const void* argsData, size_t argsSize, aclrtStream stream){
    begin_func("aclrtLaunchKernel");



        aclError result;
        result = so_aclrtLaunchKernel(funcHandle, blockDim, argsData, argsSize, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4855,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMalloc(void** devPtr, size_t size, aclrtMemMallocPolicy policy){
    begin_func("aclrtMalloc");



        aclError result;
        result = so_aclrtMalloc(devPtr, size, policy);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4871,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMallocAlign32(void** devPtr, size_t size, aclrtMemMallocPolicy policy){
    begin_func("aclrtMallocAlign32");



        aclError result;
        result = so_aclrtMallocAlign32(devPtr, size, policy);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4887,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMallocCached(void** devPtr, size_t size, aclrtMemMallocPolicy policy){
    begin_func("aclrtMallocCached");



        aclError result;
        result = so_aclrtMallocCached(devPtr, size, policy);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4903,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMallocHost(void** hostPtr, size_t size){
    begin_func("aclrtMallocHost");



        aclError result;
        result = so_aclrtMallocHost(hostPtr, size);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4919,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMallocPhysical(aclrtDrvMemHandle* handle, size_t size, const aclrtPhysicalMemProp* prop, uint64_t flags){
    begin_func("aclrtMallocPhysical");



        aclError result;
        result = so_aclrtMallocPhysical(handle, size, prop, flags);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4935,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMapMem(void* virPtr, size_t size, size_t offset, aclrtDrvMemHandle handle, uint64_t flags){
    begin_func("aclrtMapMem");



        aclError result;
        result = so_aclrtMapMem(virPtr, size, offset, handle, flags);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4951,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemExportToShareableHandle(aclrtDrvMemHandle handle, aclrtMemHandleType handleType, uint64_t flags, uint64_t* shareableHandle){
    begin_func("aclrtMemExportToShareableHandle");



        aclError result;
        result = so_aclrtMemExportToShareableHandle(handle, handleType, flags, shareableHandle);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4967,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemFlush(void* devPtr, size_t size){
    begin_func("aclrtMemFlush");



        aclError result;
        result = so_aclrtMemFlush(devPtr, size);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4983,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemGetAllocationGranularity(aclrtPhysicalMemProp* prop, aclrtMemGranularityOptions option, size_t* granularity){
    begin_func("aclrtMemGetAllocationGranularity");



        aclError result;
        result = so_aclrtMemGetAllocationGranularity(prop, option, granularity);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,4999,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemImportFromShareableHandle(uint64_t shareableHandle, int32_t deviceId, aclrtDrvMemHandle* handle){
    begin_func("aclrtMemImportFromShareableHandle");



        aclError result;
        result = so_aclrtMemImportFromShareableHandle(shareableHandle, deviceId, handle);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5015,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemInvalidate(void* devPtr, size_t size){
    begin_func("aclrtMemInvalidate");



        aclError result;
        result = so_aclrtMemInvalidate(devPtr, size);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5031,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemSetPidToShareableHandle(uint64_t shareableHandle, int32_t* pid, size_t pidNum){
    begin_func("aclrtMemSetPidToShareableHandle");



        aclError result;
        result = so_aclrtMemSetPidToShareableHandle(shareableHandle, pid, pidNum);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5047,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemcpy(void* dst, size_t destMax, const void* src, size_t count, aclrtMemcpyKind kind){
    begin_func("aclrtMemcpy");



        aclError result;
        result = so_aclrtMemcpy(dst, destMax, src, count, kind);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5063,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemcpy2d(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, aclrtMemcpyKind kind){
    begin_func("aclrtMemcpy2d");



        aclError result;
        result = so_aclrtMemcpy2d(dst, dpitch, src, spitch, width, height, kind);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5079,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemcpy2dAsync(void* dst, size_t dpitch, const void* src, size_t spitch, size_t width, size_t height, aclrtMemcpyKind kind, aclrtStream stream){
    begin_func("aclrtMemcpy2dAsync");



        aclError result;
        result = so_aclrtMemcpy2dAsync(dst, dpitch, src, spitch, width, height, kind, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5095,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemcpyAsync(void* dst, size_t destMax, const void* src, size_t count, aclrtMemcpyKind kind, aclrtStream stream){
    begin_func("aclrtMemcpyAsync");



        aclError result;
        result = so_aclrtMemcpyAsync(dst, destMax, src, count, kind, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5111,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemset(void* devPtr, size_t maxCount, int32_t value, size_t count){
    begin_func("aclrtMemset");



        aclError result;
        result = so_aclrtMemset(devPtr, maxCount, value, count);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5127,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtMemsetAsync(void* devPtr, size_t maxCount, int32_t value, size_t count, aclrtStream stream){
    begin_func("aclrtMemsetAsync");



        aclError result;
        result = so_aclrtMemsetAsync(devPtr, maxCount, value, count, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5143,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtProcessReport(int32_t timeout){
    begin_func("aclrtProcessReport");



        aclError result;
        result = so_aclrtProcessReport(timeout);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5159,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtQueryDeviceStatus(int32_t deviceId, aclrtDeviceStatus* deviceStatus){
    begin_func("aclrtQueryDeviceStatus");



        aclError result;
        result = so_aclrtQueryDeviceStatus(deviceId, deviceStatus);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5175,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtQueryEvent(aclrtEvent event, aclrtEventStatus* status){
    begin_func("aclrtQueryEvent");



        aclError result;
        result = so_aclrtQueryEvent(event, status);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5191,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtQueryEventStatus(aclrtEvent event, aclrtEventRecordedStatus* status){
    begin_func("aclrtQueryEventStatus");



        aclError result;
        result = so_aclrtQueryEventStatus(event, status);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5207,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtQueryEventWaitStatus(aclrtEvent event, aclrtEventWaitStatus* status){
    begin_func("aclrtQueryEventWaitStatus");



        aclError result;
        result = so_aclrtQueryEventWaitStatus(event, status);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5223,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtRecordEvent(aclrtEvent event, aclrtStream stream){
    begin_func("aclrtRecordEvent");



        aclError result;
        result = so_aclrtRecordEvent(event, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5239,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtReleaseMemAddress(void* virPtr){
    begin_func("aclrtReleaseMemAddress");



        aclError result;
        result = so_aclrtReleaseMemAddress(virPtr);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5255,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtReserveMemAddress(void** virPtr, size_t size, size_t alignment, void* expectPtr, uint64_t flags){
    begin_func("aclrtReserveMemAddress");



        aclError result;
        result = so_aclrtReserveMemAddress(virPtr, size, alignment, expectPtr, flags);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5271,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSetDevice(int32_t deviceId){
    begin_func("aclrtSetDevice");



        aclError result;
        result = so_aclrtSetDevice(deviceId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5287,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSetDeviceSatMode(aclrtFloatOverflowMode mode){
    begin_func("aclrtSetDeviceSatMode");



        aclError result;
        result = so_aclrtSetDeviceSatMode(mode);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5303,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSetExceptionInfoCallback(aclrtExceptionInfoCallback callback){
    begin_func("aclrtSetExceptionInfoCallback");



        aclError result;
        result = so_aclrtSetExceptionInfoCallback(callback);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5319,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSetGroup(int32_t groupId){
    begin_func("aclrtSetGroup");



        aclError result;
        result = so_aclrtSetGroup(groupId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5335,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSetOpExecuteTimeOut(uint32_t timeout){
    begin_func("aclrtSetOpExecuteTimeOut");



        aclError result;
        result = so_aclrtSetOpExecuteTimeOut(timeout);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5351,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSetOpWaitTimeout(uint32_t timeout){
    begin_func("aclrtSetOpWaitTimeout");



        aclError result;
        result = so_aclrtSetOpWaitTimeout(timeout);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5367,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSetStreamFailureMode(aclrtStream stream, uint64_t mode){
    begin_func("aclrtSetStreamFailureMode");



        aclError result;
        result = so_aclrtSetStreamFailureMode(stream, mode);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5383,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSetStreamOverflowSwitch(aclrtStream stream, uint32_t flag){
    begin_func("aclrtSetStreamOverflowSwitch");



        aclError result;
        result = so_aclrtSetStreamOverflowSwitch(stream, flag);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5399,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSetTsDevice(aclrtTsId tsId){
    begin_func("aclrtSetTsDevice");



        aclError result;
        result = so_aclrtSetTsDevice(tsId);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5415,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtStreamQuery(aclrtStream stream, aclrtStreamStatus* status){
    begin_func("aclrtStreamQuery");



        aclError result;
        result = so_aclrtStreamQuery(stream, status);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5431,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtStreamWaitEvent(aclrtStream stream, aclrtEvent event){
    begin_func("aclrtStreamWaitEvent");



        aclError result;
        result = so_aclrtStreamWaitEvent(stream, event);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5447,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSubscribeReport(uint64_t threadId, aclrtStream stream){
    begin_func("aclrtSubscribeReport");



        aclError result;
        result = so_aclrtSubscribeReport(threadId, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5463,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSynchronizeDevice(void){
    begin_func("aclrtSynchronizeDevice");



        aclError result;
        result = so_aclrtSynchronizeDevice(void);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5479,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSynchronizeEvent(aclrtEvent event){
    begin_func("aclrtSynchronizeEvent");



        aclError result;
        result = so_aclrtSynchronizeEvent(event);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5495,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSynchronizeEventWithTimeout(aclrtEvent event, int32_t timeout){
    begin_func("aclrtSynchronizeEventWithTimeout");



        aclError result;
        result = so_aclrtSynchronizeEventWithTimeout(event, timeout);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5511,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSynchronizeStream(aclrtStream stream){
    begin_func("aclrtSynchronizeStream");



        aclError result;
        result = so_aclrtSynchronizeStream(stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5527,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtSynchronizeStreamWithTimeout(aclrtStream stream, int32_t timeout){
    begin_func("aclrtSynchronizeStreamWithTimeout");



        aclError result;
        result = so_aclrtSynchronizeStreamWithTimeout(stream, timeout);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5543,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtUnSubscribeReport(uint64_t threadId, aclrtStream stream){
    begin_func("aclrtUnSubscribeReport");



        aclError result;
        result = so_aclrtUnSubscribeReport(threadId, stream);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5559,__func__,result); } } while(0);



        end_func("func");

    return result;
}
aclError aclrtUnmapMem(void* virPtr){
    begin_func("aclrtUnmapMem");



        aclError result;
        result = so_aclrtUnmapMem(virPtr);

            do{ if(result != ACL_SUCCESS){ fprintf(stderr,"ERROR: file %s, line %d, func %s, error code is %d\n",__file__,5575,__func__,result); } } while(0);



        end_func("func");

    return result;
}
